{
  "name": "builderkit.ai",
  "version": "0.1.0",
  "private": true,
  "author": "@saddysk",
  "scripts": {
    "dev": "next dev",
    "build": "next build && npm run postbuild",
    "postbuild": "next-sitemap",
    "start": "next start",
    "validate": "run-s format lint typecheck",
    "typecheck": "tsc --noEmit",
    "lint": "next lint",
    "format": "prettier --write \"**/*.{ts,tsx,css,html,js,jsx,json}\"",
    "prepare": "husky install"
  },
  "dependencies": {
    "@headlessui/react": "^1.7.18",
    "@radix-ui/react-accordion": "^1.1.2",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-slot": "^1.0.2",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "eslint-plugin-react-hooks": "^4.6.0",
    "next": "14.0.4",
    "next-sitemap": "^4.2.2",
    "react": "^18",
    "react-dom": "^18",
    "react-icons": "^4.12.0",
    "tailwind-merge": "^2.3.0",
    "tailwindcss-animate": "^1.0.7",
    "tus-js-client": "^4.0.1"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "@typescript-eslint/eslint-plugin": "^6.15.0",
    "@typescript-eslint/parser": "^6.15.0",
    "autoprefixer": "^10.0.1",
    "eslint": "^8",
    "eslint-config-next": "14.0.4",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.1.2",
    "eslint-plugin-tailwindcss": "^3.13.0",
    "husky": "^8.0.3",
    "npm-run-all": "^4.1.5",
    "postcss": "^8",
    "tailwindcss": "^3.3.0",
    "typescript": "^5"
  }
}


import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const font = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Landing Pages by BuilderKit.ai",
  description: "NextJS SaaS AI Boilerplate",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={font.className}>
        <main>{children}</main>
      </body>
    </html>
  );
}


// This is the entry component for the landing page of the application.
// It sequentially renders the primary sections of the landing page including Hero, Features, Product, Pricing, Faq, and Footer components.

import LandingPage1 from "@/components/landing-pages/landing-page-1";
import LandingPage2 from "@/components/landing-pages/landing-page-2";
import LandingPage3 from "@/components/landing-pages/landing-page-3";
import LandingPage4 from "@/components/landing-pages/landing-page-4";
import LandingPage5 from "@/components/landing-pages/landing-page-5";
import LandingPage6 from "@/components/landing-pages/landing-page-6";
import LandingPage7 from "@/components/landing-pages/landing-page-7";
import LandingPage8 from "@/components/landing-pages/landing-page-8";
import LandingPage9 from "@/components/landing-pages/landing-page-9";
import LandingPage10 from "@/components/landing-pages/landing-page-10";

export default async function Home() {
  return (
    <>
      {/* <LandingPage1 /> */}
      {/* <LandingPage2 /> */}
      {/* <LandingPage3 /> */}
      {/* <LandingPage4 /> */}
      {/* <LandingPage5 /> */}
      <LandingPage6 />
      {/* <LandingPage7 /> */}
      {/* <LandingPage8 /> */}
      {/* <LandingPage9 /> */}
      {/* <LandingPage10 /> */}
    </>
  );
}


import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};


"use client";

import * as React from "react";
import * as SheetPrimitive from "@radix-ui/react-dialog";
import { Cross2Icon } from "@radix-ui/react-icons";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <Cross2Icon className="size-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
);
SheetHeader.displayName = "SheetHeader";

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
);
SheetFooter.displayName = "SheetFooter";

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};


"use client";

import * as React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronDownIcon } from "@radix-ui/react-icons";

import { cn } from "@/lib/utils";

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
));
AccordionItem.displayName = "AccordionItem";

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDownIcon className="size-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
));
AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };


import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-1 text-xs font-medium transition-colors tracking-widest focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground shadow",
        secondary: "border-transparent bg-secondary text-secondary-foreground",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };


import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline: "border border-input bg-background shadow-sm hover:bg-accent",
        secondary: "bg-secondary text-white shadow-sm hover:bg-secondary/90",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = "Button";

export { Button, buttonVariants };


// This is the entry component for the landing page of the application.
// It sequentially renders the primary sections of the landing page including Hero, Features, Product, Pricing, Faq, and Footer components.

import Features from './Features';
import FeaturedOn from './FeaturedOn';
import Footer from './Footer';
import FAQs from './FAQs';
import Hero from './Hero';
import Pricing from './Pricing';
import WorkFlow from './WorkFlow';
import Navbar from './Navbar';

export default async function LandingPage10() {
  return (
    <>
      <Navbar />
      <div className='bg-[#031614]'>
        <div className='max-w-6xl mx-auto pt-20'>
          <Hero />
          <FeaturedOn />
          <Features />
          <WorkFlow />
          <Pricing />
          <FAQs />
          <Footer />
        </div>
      </div>
    </>
  );
}


import React from "react";
import Image from "next/image";
import Dropbox from "@/assets/landing-page-10/dropbox.png";
import Paypal from "@/assets/landing-page-10/paypal.png";
import Google from "@/assets/landing-page-10/google.png";
import { cn } from "@/lib/utils";

const logos = [
  { src: Paypal, alt: "Paypal", height: 50, width: 150 },
  { src: Google, alt: "Google", height: 50, width: 130 },
  { src: Dropbox, alt: "Dropbox", height: 20, width: 160 },
  { src: Google, alt: "Google", height: 50, width: 130 },
];

const FeatureOn = () => {
  return (
    <div className="flex flex-col justify-center items-center space-y-[64px] h-[568px]">
      <div className="text-[#ABABB0] text-[32px] font-normal leading-10">
        Featured on:
      </div>
      <div className="flex justify-center flex-wrap w-full gap-10 lg:gap-0">
        {logos.map((logo, index) => (
          <div
            key={index}
            className={cn(
              index !== logos.length - 1 && "lg:border-r",
              "border-[#132524] lg:px-14"
            )}
          >
            <Image
              key={index}
              src={logo.src}
              alt={logo.alt}
              height={logo.height}
              width={logo.width}
              //This logic is used to add a border to all the logos except the last one
              className="h-fit"
            />
          </div>
        ))}
      </div>
    </div>
  );
};

export default FeatureOn;


// This component serves as the primary visual and textual introduction on the homepage.
// It typically includes a headline, a subheading, and a call-to-action (CTA) button to engage users right from the start.
// This component plays a crucial role in setting the tone and providing key information about the product or service.

import { FaArrowRight } from 'react-icons/fa';
import Image from 'next/image';
import dashboard from '@/assets/landing-page-10/dashboard.png';
import FlickIcon from '@/assets/landing-page-10/FlickIcon';
import ButtonCta from './ButtonCta';

const Hero = () => {
  return (
    <section className='space-y-20 px-4'>
      <div className='flex flex-col justify-center '>
        <div className='space-y-[18px] max-w-2xl mx-auto'>
          <div className='px-4 py-1.5 gap-2 bg-[#022f21] rounded-full w-fit mx-auto'>
            <div className='text-[#18EDA7] text-sm font-semibold flex items-center gap-2'>
              Unlock Your Creative Spark! <FaArrowRight className='size-3' />
            </div>
          </div>
          <div className='text-center text-[64px] font-bold leading-[4rem] tracking-[-1.28px] grey-gradient text-transparent relative'>
            <div className='absolute md:left-8 -top-3 md:-top-4'>
              <FlickIcon />
            </div>
            <span>Generate AI Apps with ease</span>
          </div>
          <div className='max-w-96 mx-auto text-center font-medium leading-7 tracking-[0.04px] text-[#ABABB0]'>
            Unleash Your Creative Potential by Turning What You Consume into Engaging Content Ideas
          </div>
        </div>
        <div className='mt-10 mx-auto'>
          <ButtonCta className='px-10 py-3 h-10' />
        </div>
      </div>

      <Image src={dashboard} width={1000} height={420} alt='hero' className='w-full rounded-t-lg' />
    </section>
  );
};

export default Hero;


// This component is used to provide navigation links across the website.
// It is typically placed at the top of each page and includes links to major sections like Home, About, Services, and Contact.
// The component also handles responsive adjustments to ensure navigation is accessible on different device sizes.

import { cn } from "@/lib/utils";
import Link from "next/link";

import {
  Sheet,
  SheetClose,
  SheetContent,
  SheetTrigger,
} from "@/components/ui/sheet";
import { HiBars3 } from "react-icons/hi2";
import ButtonCta from "./ButtonCta";
import Image from "next/image";

const NavbarRoutes = [
  { label: "Features", url: "/#features" },
  { label: "Products", url: "/#products" },
  { label: "Testimonials", url: "/#testimonials" },
  { label: "FAQ", url: "/#faq" },
];

export default async function Navbar() {
  return (
    <div className="w-full text-white bg-[#031614]">
      <div
        className={cn(
          "max-w-6xl mx-auto flex justify-between items-center p-4"
        )}
      >
        <Link href="https://www.builderkit.ai">
          <div className="flex items-center gap-2 w-fit">
            <Image src="/lp10-logo.png" width={132} height={132} alt="logo" />
          </div>
        </Link>

        <ul className="hidden md:flex items-center gap-12">
          {NavbarRoutes.map((item, index) => (
            <li
              key={index}
              className="text-sm cursor-pointer font-medium leading-6"
            >
              <Link href={item.url}>{item.label}</Link>
            </li>
          ))}
        </ul>

        <div className="hidden md:block">
          <ButtonCta />
        </div>

        <Sheet>
          <SheetTrigger className="block md:hidden">
            <HiBars3 size={24} />
          </SheetTrigger>
          <SheetContent>
            <div className="space-y-6">
              <div className="flex flex-col gap-4">
                {NavbarRoutes.map((item, index) => (
                  <div key={index} className="text-sm font-medium py-2">
                    <SheetClose asChild>
                      <Link href={item.url}>{item.label}</Link>
                    </SheetClose>
                  </div>
                ))}
              </div>
              <ButtonCta className="w-full" />
            </div>
          </SheetContent>
        </Sheet>
      </div>
    </div>
  );
}


// This component displays the different subscription plans or pricing tiers available for the product or service.
// It typically includes information such as price, features included in each plan, and a call-to-action for users to sign up or purchase.
// This component is key for conversion and clearly communicates the value proposition of each pricing tier.

import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { FaFire } from "react-icons/fa";
import CheckedIcon from "@/assets/landing-page-10/CheckedIcon";
import { cn } from "@/lib/utils";
import GreenBadge from "@/assets/landing-page-10/GreenBadge";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";

const plans = [
  {
    badge: "Professional",
    price: "56",
    features: [
      "Single user license",
      "Lifetime updates",
      "5,000+ icons",
      "6 unique styles",
    ],
    isHiglighted: false,
  },
  {
    badge: "Team",
    price: "112",
    features: [
      "Single user license",
      "Lifetime updates",
      "5,000+ icons",
      "6 unique styles",
      "Live stroke & corners",
    ],
    isHiglighted: true,
  },
  {
    badge: "Enterprise",
    price: "224",
    features: [
      "Single user license",
      "Lifetime updates",
      "5,000+ icons",
      "6 unique styles",
      "Powered by variants",
      "IconJar & SVG library",
      "Unlimited projects",
    ],
    isHiglighted: false,
  },
];

const ListItem = ({ text }: { text: string }) => (
  <li className="flex items-center gap-3 text-lg  font-normal leading-7">
    <CheckedIcon /> {text}
  </li>
);

const Pricing = () => {
  return (
    <div id="pricing" className="space-y-[120px] px-6 mt-[200px] mb-24">
      <div className="space-y-6">
        <h1 className="text-center text-5xl md:text-[56px] font-medium leading-[66px] header-gradient tracking-[-1.12px]">
          Pay once, use forever, upgrade for free
        </h1>
        <p className="text-[#C9C9C9] text-center text-xl  font-normal leading-8 max-w-3xl mx-auto">
          Flexible pricing for any team size. It's a one-time payment — you only
          buy a license once, and all future updates are free for you forever.
        </p>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 space-y-10 md:space-y-0">
        {plans.map((plan, index) => (
          <Card
            key={index}
            className={cn(
              plan.isHiglighted && "border-4 border-[#26AB75]",
              "w-full h-fit bg-white"
            )}
          >
            <CardContent className="m-8 p-0 text-[#050316]">
              {plan.isHiglighted && (
                <div className="relative">
                  <GreenBadge />
                  <p className="text-lg  font-semibold leading-7 text-white absolute top-[-63px] left-1/2 -translate-x-1/2">
                    Best value
                  </p>
                </div>
              )}
              <Badge className="text-sm font-medium leading-5 mb-8 bg-[#26AB75]">
                {plan.badge}
              </Badge>
              <div className="flex gap-1">
                <p className="text-3xl font-normal">$</p>
                <p className="text-5xl font-bold">{plan.price}</p>
              </div>
              <p className="text-lg  font-normal leading-7">
                For freelancers, indie developers or solopreneurs.
              </p>
              <Button
                className={cn(
                  "rounded-full w-full border border-[#e7e7e7] py-6 font-bold mt-6 mb-12 gap-2 shadow-none",
                  plan.isHiglighted
                    ? "text-white bg-[#26AB75]"
                    : "text-[#2AA875] bg-[#DFFFF2]"
                )}
              >
                <FaFire className="size-5" />
                Buy Now
              </Button>
              <ul className="space-y-3">
                {plan.features.map((text, index) => (
                  <ListItem key={index} text={text} />
                ))}
              </ul>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
};

export default Pricing;


// This component is used to display a list of frequently asked questions and their answers.
// This component is typically used in sections like 'Help' or 'Support' to assist users in finding quick answers.
// The FAQ data is expected to be passed as a prop in the form of an array of {question, answer} objects.

"use client";

import React, { useState } from "react";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import PlusIcon from "@/assets/landing-page-10/PlusIcon";
import MinusIcon from "@/assets/landing-page-10/MinusIcon";
import { cn } from "@/lib/utils";

const accordionData = [
  {
    value: "0",
    question: "Lorem ipsum dolor sit amet?",
    answer: "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
  },
  {
    value: "1",
    question: "Lorem ipsum dolor sit amet?",
    answer: "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
  },
  {
    value: "2",
    question: "Lorem ipsum dolor sit amet?",
    answer: "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
  },
];

const FAQs = () => {
  const [openAccordion, setOpenAccordion] = useState<string | null>(null);

  const toggleAccordion = (value: string) => {
    setOpenAccordion(value === openAccordion ? null : value);
  };

  return (
    <div id="faq" className="space-y-16 mt-[200px]">
      <div className="space-y-5 px-4">
        <h1 className="text-center text-5xl md:text-[56px] font-medium leading-[56px] header-gradient">
          Need help?
        </h1>
        <p className="text-[#C9C9C9] text-center text-lg md:text-xl  font-normal leading-8 max-w-3xl mx-auto">
          Don't worry, we got you. Here are some answers for your questions.
        </p>
      </div>
      <div className="max-w-5xl mx-auto">
        <Accordion type="single" collapsible className="w-full">
          {accordionData.map((item, index) => (
            <AccordionItem
              key={index}
              value={item.value}
              className="px-5 border-border/30"
            >
              <AccordionTrigger onClick={() => toggleAccordion(item.value)}>
                <div className="flex items-center gap-4 text-base md:text-lg font-medium leading-7 text-white ">
                  {openAccordion === item.value ? <MinusIcon /> : <PlusIcon />}{" "}
                  {item.question}
                </div>
              </AccordionTrigger>
              <AccordionContent
                className={cn(
                  openAccordion === item.value ? "max-h-screen" : "max-h-0",
                  "text-[#808080] text-base  font-normal leading-8 ml-11 transition-max-height duration-300 ease-in-out"
                )}
              >
                {item.answer}
              </AccordionContent>
            </AccordionItem>
          ))}
        </Accordion>
      </div>
    </div>
  );
};

export default FAQs;


// This component displays a list of key features or services offered by the product.
// Each feature is represented with an icon and a short description, making it easy for users to quickly understand the product's value.
// The component expects an array of features with `icon`, `title`, and `description` properties.

import React from 'react';
import { FaGraduationCap } from 'react-icons/fa';

const Features = () => {
  return (
    <div id='features' className='space-y-[96px]'>
      <div className='space-y-5 px-4'>
        <h1 className='text-center text-5xl md:text-[56px] font-medium leading-[56px] header-gradient'>
          Revolutionize your workflow
        </h1>
      </div>
      <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-16'>
        {[...Array(6)].map((_, index) => (
          <div key={index} className='text-white space-y-6 text-center relative p-6'>
            <div className='bg-[#26AB75]/60 size-20 blur-2xl absolute top-1/4 left-1/2 -translate-x-1/2 -translate-y-1/2'></div>
            <FaGraduationCap className='size-8 z-50 mx-auto' />
            <h1 className='text-2xl font-bold leading-7'>Free forever</h1>
            <p className='text-[#ABABB0] text-center text-sm leading-6'>
              Our free plan gives you unlimited team members, 3 boards, and 300+ expert-made templates.
            </p>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Features;


// This component is used to display the website's footer section.
// It typically contains links to important pages, contact information, and social media icons.
// This component is crucial for navigation and offers users a way to connect with the company on different platforms.

import { CiTwitter } from "react-icons/ci";
import { FaDribbble, FaInstagram } from "react-icons/fa";
import { MdOutlineEmail } from "react-icons/md";
import Link from "next/link";
import ButtonCta from "./ButtonCta";
import { cn } from "@/lib/utils";

const footerItems = [
  { name: "Home", href: "/" },
  { name: "Pricing", href: "/#pricing" },
  { name: "FAQ", href: "/#faq" },
  { name: "License", href: "/" },
  { name: "Terms", href: "/" },
  { name: "Contact", href: "mailto:vatsal1811@gmail.com" },
];

const socialMediaIcons = [
  { icon: <CiTwitter className="size-5 text-white" />, name: "Twitter" },
  { icon: <FaInstagram className="size-5 text-white" />, name: "Instagram" },
  { icon: <FaDribbble className="size-5 text-white" />, name: "Dribbble" },
  { icon: <MdOutlineEmail className="size-5 text-white" />, name: "Email" },
];

const Footer = () => {
  return (
    <div className="space-y-[154px] mt-[200px]">
      <div className="space-y-10 mx-auto px-4">
        <p className="header-gradient text-5xl md:text-[56px] text-center font-medium leading-[64px]">
          Unleash the power of AI with GenAI
        </p>
        <p className="text-[#ABABB0] text-lg md:text-[22px] font-normal leading-[30px] md:leading-[34px] tracking-[0.2px] text-center max-w-3xl mx-auto">
          Highly modular NextJS AI Boilerplate that allows you to ship any AI
          Apps within days.
        </p>
        <div className="w-fit mt-8 mx-auto">
          <ButtonCta className="px-10 py-3.5 h-10" />
        </div>
        <div className="flex gap-10 justify-center">
          {socialMediaIcons.map((socialMedia, index) => (
            <div
              key={index}
              className="flex size-10 md:size-12 justify-center items-center border rounded-full social-background cursor-pointer"
            >
              {socialMedia.icon}
            </div>
          ))}
        </div>
      </div>

      <div className="border-t border-white/10 space-y-12 px-4 py-16">
        <ul className="flex flex-col md:flex-row gap-5 justify-center">
          {footerItems.map((item, index) => (
            <Link
              href={item.href}
              key={index}
              className={cn(
                item.name === "Home" ? "text-white" : "text-[#A5ABB6]",
                "text-base font-normal"
              )}
            >
              {item.name}
            </Link>
          ))}
        </ul>

        <div className="text-[#676D79] md:text-center">
          Copyright © 2024. A{" "}
          <Link
            href="https://1811labs.com"
            target="_blank"
            rel="noreferrer"
            className="hover:underline mr-2"
          >
            1811 Labs
          </Link>
          product.
          <br className="block md:hidden" /> All rights reserved.
        </div>
      </div>
    </div>
  );
};

export default Footer;


// This component is used as a reusable call-to-action button across different parts of the website.
// It can be configured with different labels and actions, making it versatile for various user interactions.
// The component accepts props such as `label` (to display button text) and `onClick` (to handle button clicks).

import Link from "next/link";
import { cn } from "@/lib/utils";
import { FC } from "react";
import { buttonVariants } from "@/components/ui/button";

interface ButtonCtaProps {
  className?: string;
}

const ButtonCta: FC<ButtonCtaProps> = async ({ className }) => {
  return (
    <Link
      href="/"
      className={cn(
        buttonVariants({ variant: "default" }),
        "rounded-lg border border-[#51DCA3] green-btn-gradient",
        className
      )}
    >
      Login
    </Link>
  );
};

export default ButtonCta;


// This component illustrates the step-by-step process or workflow of how the service or product operates.
// It is a simple component that displays the workflow of the service or product in a visually appealing manner.

import Image from 'next/image';
import React from 'react';
import card from '@/assets/landing-page-10/card.png';
import multipleCard from '@/assets/landing-page-10/multiple-cards.png';

const WorkFlow = () => {
  return (
    <div className='space-y-[96px] p-6 mt-[200px]'>
      <div className='space-y-6 mx-auto'>
        <h1 className='header-gradient text-5xl md:text-[56px] text-center font-medium'>
          Unleash the power of AI
        </h1>
        <p className='text-[#ABABB0] text-lg md:text-2xl leading-[34.54px] tracking-[0.2px] text-center max-w-2xl mx-auto'>
          Feel free to customize your reports. Utilize our super-table instead of exporting and importing data
        </p>
      </div>
      <div className='space-y-8'>
        <div className='p-10 md:p-20 bg-card-background rounded-3xl'>
          <div className='block md:flex gap-5 space-y-12 md:space-y-0'>
            <div className='space-y-5 md:w-1/2'>
              <p className='text-white text-[32px] font-bold'>Design like a PRO</p>
              <p className='text-[#C9C9C9] text-xl font-light leading-8'>
                Our intuitive interface and advanced features make it easy to write and debug code Our
                intuitive interface and advanced features make it easy to write and debug code
              </p>
            </div>
            <div className='md:w-1/2'>
              <Image src={card} width={472} height={228} alt='workflow' />
            </div>
          </div>
        </div>
        <div className='gap-8 block md:flex space-y-8 md:space-y-0'>
          <div className='px-10 py-12 bg-card-background rounded-3xl'>
            <div className='space-y-12 gap-12'>
              <div className='space-y-2'>
                <p className='text-white text-[32px] font-bold'>More efficient</p>
                <p className='text-[#C9C9C9] text-xl font-light leading-8'>
                  Our code editor provides a simple and intuitive interface that helps you write code quickly
                  and efficiently.
                </p>
              </div>
              <div>
                <Image src={multipleCard} width={472} height={228} alt='workflow' />
              </div>
            </div>
          </div>
          <div className='px-10 py-12 bg-card-background rounded-3xl'>
            <div className='space-y-12 gap-12'>
              <div className='space-y-2'>
                <p className='text-white text-[32px] font-bold'>More efficient</p>
                <p className='text-[#C9C9C9] text-xl font-light leading-8'>
                  Our code editor provides a simple and intuitive interface that helps you write code quickly
                  and efficiently.
                </p>
              </div>
              <div>
                <Image src={multipleCard} width={472} height={228} alt='workflow' />
              </div>
            </div>
          </div>
        </div>
        <div className='p-10 md:p-20 bg-card-background rounded-3xl'>
          <div className='block md:flex gap-5 space-y-12 md:space-y-0'>
            <div className='space-y-5 md:w-1/2'>
              <p className='text-white text-[32px] font-bold'>Design like a PRO</p>
              <p className='text-[#C9C9C9] text-xl font-light leading-8'>
                Our intuitive interface and advanced features make it easy to write and debug code Our
                intuitive interface and advanced features make it easy to write and debug code
              </p>
            </div>
            <div className='md:w-1/2'>
              <Image src={card} width={472} height={228} alt='workflow' />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default WorkFlow;


// This is the entry component for the landing page of the application.
// It sequentially renders the primary sections of the landing page including Hero, Features, Product, Pricing, Faq, and Footer components.

import Faq from '@/components/landing-pages/landing-page-9/Faq';
import Features from '@/components/landing-pages/landing-page-9/Features';
import Footer from '@/components/landing-pages/landing-page-9/Footer';
import Hero from '@/components/landing-pages/landing-page-9/Hero';
import Product from '@/components/landing-pages/landing-page-9/Product';
import Pricing from '@/components/landing-pages/landing-page-9/pricing/Pricing';

export default async function LandingPage9() {
  return (
    <>
      <Hero />
      <Product />
      <Features />
      <Pricing />
      <Faq />
      <Footer />
    </>
  );
}


// This component renders the main hero section of the landing page which is designed to grab the visitor's attention.
// It includes a navigation bar, a headline, a detailed subtext that explains the product briefly, and a call-to-action button.

import Navbar from '@/components/landing-pages/landing-page-9/Navbar';
import Image from 'next/image';
import HeroImage from '@/assets/landing-page-9/images/hero.png';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import ArrowRightMd from '@/assets/landing-page-9/icons/ArrowRightMd';

export default async function Hero() {
  return (
    <div className='bg-[#F6FFF8]'>
      <div className='max-w-7xl mx-auto'>
        {/* Navbar component: Displays the top navigation menu. */}
        <Navbar />

        <div className='flex max-w-4xl pt-16 flex-col gap-5 px-4 items-center justify-center mx-auto'>
          <h1 className='tracking[-2.5px] text-[#151515] max-w-xl md:leading-[67px] text-3xl sm:text-[44px] text-center'>
            Generate modular AI Apps with ease and pace
          </h1>
          <p className='text-gray-500 text-center leading-7 max-w-2xl'>
            Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days. Save Hours
            of Effort and Use our robust Deployable code.
          </p>

          <Button className='flex text-sm gap-2.5 bg-lp9-primary rounded shadow-xl h-12 px-6 hover:bg-lp9-primary/90'>
            <Link href={'/login'}>Get started</Link>
            <ArrowRightMd />
          </Button>
        </div>
        <div className='w-full max-md:px-6 mt-16 md:mt-10'>
          <Image src={HeroImage} alt='hero' />
        </div>
      </div>
    </div>
  );
}


// This component serves as the navigation bar for the application, which appears across various pages.
// It dynamically adjusts to display different links based on the user's authentication status and screen size.
// The component uses both responsive and conditional rendering techniques for optimization across devices.

import Link from "next/link";

import {
  Sheet,
  SheetClose,
  SheetContent,
  SheetTrigger,
} from "@/components/ui/sheet";
import { HiBars3 } from "react-icons/hi2";
import ArrowRightMd from "@/assets/landing-page-9/icons/ArrowRightMd";
import Image from "next/image";

const navbarRoutes = [
  { label: "Features", url: "/#features" },
  { label: "Product", url: "/#product" },
  { label: "Testimonial", url: "/#" },
  { label: "FAQ", url: "/#faq" },
];

export default async function Navbar() {
  return (
    <div className="max-w-7xl mx-auto">
      <div className="w-full flex justify-between items-center p-4">
        <Link href="https://www.builderkit.ai">
          <div className="flex items-center gap-2 w-fit">
            <Image src="/lp9-logo.svg" width={140} height={140} alt="logo" />
          </div>
        </Link>

        <ul className="hidden md:flex items-center gap-8">
          {navbarRoutes.map((item, index) => (
            <li key={index} className="font-medium">
              <Link
                href={item.url}
                className="hover:underline text-[#151515] text-sm"
              >
                {item.label}
              </Link>
            </li>
          ))}
        </ul>

        {/* Conditional button that changes based on user status. */}
        <button className="hidden md:flex gap-2.5 text-sm justify-center items-center text-white rounded-sm px-6 h-12 bg-lp9-primary">
          Sign in
          <ArrowRightMd />
        </button>

        <Sheet>
          <SheetTrigger className="block md:hidden -mr-3 mb-3">
            <HiBars3 size={24} />
          </SheetTrigger>
          <SheetContent side="top" className="px-5">
            <div className="space-y-6">
              <div className="flex flex-col gap-4">
                {navbarRoutes.map((item, index) => (
                  <div key={index} className="text-sm font-medium py-2">
                    <SheetClose asChild>
                      <Link href={item.url}>{item.label}</Link>
                    </SheetClose>
                  </div>
                ))}
              </div>
              <button className="rounded-sm px-6 h-12 text-white gap-2.5 text-sm items-center justify-center w-full flex bg-lp9-primary">
                Sign Up
              </button>
            </div>
          </SheetContent>
        </Sheet>
      </div>
    </div>
  );
}


// Features component to display the services provided by the application in the landing page.

import ServiceImageIcon1 from '@/assets/landing-page-9/icons/DesingerIcon';

const cardContent = [
  {
    icon: ServiceImageIcon1,
    colorText: 'Fast',
    title: 'Build your AI apps',
    description:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
  },
  {
    icon: ServiceImageIcon1,
    colorText: 'Fast',
    title: 'Build your AI apps',
    description:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
  },
  {
    icon: ServiceImageIcon1,
    colorText: 'Fast',
    title: 'Build your AI apps',
    description:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
  },
];

export default async function Product() {
  return (
    <div id='product' className='max-w-7xl mx-auto px-4 my-28'>
      <div className='flex flex-col justify-center items-center text-center'>
        <p className='max-w-md leading-10 md:!leading-[58px] text-lp9-secondary tracking-[-1.5px] text-3xl sm:text-5xl'>
          Explore the power of AI apps generation
        </p>
        <p className='max-w-[642px] text-lg text-gray-500 leading-8 mt-7'>
          Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days. Save Hours of
          Effort and Use our robust Deployable code.
        </p>
      </div>

      <div className='grid grid-cols-1 mt-14 mx-auto gap-2 md:grid-cols-2 xl:grid-cols-3'>
        {cardContent.map((item, index) => (
          <div key={index} className='rounded-2xl w-full md:max-w-md mx-auto p-4'>
            <div className='flex justify-center md:mb-6 h-fit rounded-xl bg-[#F1F9F380]'>
              <item.icon />
            </div>

            <p className='text-2xl font-medium text-lp9-secondary md:mt-0 sm:-mt-8 tracking-tight leading-8'>
              {item.title}
              <span className='text-lp9-primary'> {item.colorText}</span>
            </p>
            <p className='leading-7 text-[16px] text-gray-500 mt-4'>{item.description}</p>
          </div>
        ))}
      </div>
    </div>
  );
}


// Product component of landing page

import LightningIcon from '@/assets/landing-page-9/icons/LightningIcon';

const cardContent = [
  {
    icon: LightningIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: LightningIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: LightningIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: LightningIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: LightningIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: LightningIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
];

export default async function Features() {
  return (
    <div id='features' className='mx-auto px-4 py-20 md:py-28 bg-[#F6FFF8]'>
      <div className='max-w-6xl flex flex-col justify-center items-center mx-auto space-y-16 md:space-y-20'>
        <div className='text-center'>
          <p className='max-w-[690px] leading-tight text-gray-900 tracking-[-1.5px] text-3xl sm:text-5xl'>
            Essentially, everything you need to ship you first AI App
          </p>
        </div>

        <div className='grid grid-cols-1 mx-auto md:grid-cols-2 xl:grid-cols-3 gap-2 md:gap-6'>
          {cardContent.map((item, index) => (
            <div key={index} className='p-6 flex gap-5'>
              <div>
                <item.icon />
              </div>
              <div>
                <p className='text-lg leading-6 text-lp9-primary font-semibold'>{item.title}</p>
                <p className='text-gray-500 leading-6 text-sm mt-2.5'>{item.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}


// This is the Footer component of the landing page.

import Link from "next/link";
import { Button } from "@/components/ui/button";
import ArrowRightSm from "@/assets/landing-page-9/icons/ArrowRightSm";

// Array of objects representing footer navigation items
const footerItems = [
  {
    label: "About",
    url: "#",
  },
  {
    label: "Contact",
    url: "#",
  },
  {
    label: "Blog",
    url: "#",
  },
  {
    label: "Story",
    url: "#",
  },
  {
    label: "Company",
    url: "#",
  },
  {
    label: "Product",
    url: "#",
  },
  {
    label: "Press",
    url: "#",
  },
  {
    label: "More",
    url: "#",
  },
  {
    label: "Press",
    url: "#",
  },
  {
    label: "Careers",
    url: "#",
  },
  {
    label: "News letters",
    url: "#",
  },
  {
    label: "More",
    url: "#",
  },
];

export default async function Footer() {
  return (
    <footer className="bg-[#062616] text-white px-5">
      <div className="max-w-6xl mx-auto py-12 md:py-16">
        <div className="flex flex-col md:flex-row md:items-center justify-between gap-6">
          <p className="md:w-3/4 text-3xl md:text-4xl font-medium">
            Get your AI apps built with blazing speed.
          </p>
          <Link href={"/login"}>
            <Button
              variant={"ghost"}
              className="flex gap-2 px-4 py-6 rounded bg-white text-black"
            >
              Get Started
              <ArrowRightSm />
            </Button>
          </Link>
        </div>

        <hr className="opacity-10 my-16" />

        <div className="flex flex-col md:flex-row justify-between gap-10 max-md:mb-8">
          <div className="flex flex-col gap-10">
            <p className="text-2xl font-medium text-white/70">BuilderKit.ai</p>
            <p className="max-w-sm tracking-[-0.54px] leading-6 text-white/60">
              Highly modular NextJS AI Boilerplate that allows you to ship any
              AI Apps within days.
            </p>
          </div>

          <div className="text-white/60 grid grid-rows-4 grid-cols-3 grid-flow-col lg:gap-x-24 gap-y-6">
            {footerItems.map((item, index) => (
              <Link key={index} href={item.url} className="hover:underline">
                {item.label}
              </Link>
            ))}
          </div>
        </div>
        <p className="font-medium">All rights reserved.</p>
      </div>
    </footer>
  );
}


import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

const accordionItems = [
  {
    value: '1',
    question: 'What is buildekit?',
    answer: 'Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days',
  },
  {
    value: '2',
    question: 'What do i get exactly?',
    answer:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
  },
  {
    value: '3',
    question: 'Who is builder kit for?',
    answer: 'Builderkit is for developers who want to build AI apps faster.',
  },
  {
    value: '4',
    question: 'Is it a website template?',
    answer: 'No, Builderkit is a NextJS AI Boilerplate that allows you to ship any AI Apps within days.',
  },
];

export default function Faq() {
  return (
    <div className='flex justify-center px-6 bg-[#F6FFF8]'>
      <div id='faq' className='grid lg:grid-cols-[1fr_2fr] md:py-28 md:gap-20 gap-10 py-10 max-w-5xl'>
        <div className='flex flex-col gap-4 items-center mt-2'>
          <h1 className='md:text-4xl tracking-[-2px] text-lp9-secondary text-2xl sm:text-3xl'>
            Frequently asked questions
          </h1>
          <p className='text-gray-500 leading-6 mt-1 lg:text-start text-center'>
            Don't worry, we got you. Here are some answers for your questions.
          </p>
        </div>
        <div className='max-w-[700px] leading-8 items-center'>
          <Accordion type='single' collapsible className='w-full'>
            {accordionItems.map((item) => (
              <AccordionItem key={item.value} className='my-2 border-none' value={item.value}>
                <AccordionTrigger className='text-start text-lp9-secondary font-medium md:px-6 leading-relaxed'>
                  {item.question}
                </AccordionTrigger>
                <AccordionContent className='text-gray-500 md:px-6 leading-loose'>
                  {item.answer}
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
        </div>
      </div>
    </div>
  );
}


// This component renders the pricing plans for different subscription tiers.
// It utilizes the <RadioGroup> from HeadlessUI to toggle between 'monthly' and 'annually' payment frequencies.
// Tiers data is mapped to display each plan with its respective price, features, and a call-to-action.

"use client";

import ArrowRightMd from "@/assets/landing-page-9/icons/ArrowRightMd";
import TickIcon from "@/assets/landing-page-9/icons/TickIcon";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";

const tiers = [
  {
    name: "Pro",
    id: "pro",
    sellingPrice: { monthly: "$149" },
    description:
      "A pro plan grants you access to some cool features of builderkit.",
    features: [
      "NextJS Boilerplate",
      "AI Models",
      "5 Demo Apps",
      "GAuth & Magic Link",
      "Stripe & Lemon Squeezy Payments",
      "Privacy Policy & ToS",
    ],
  },
  {
    name: "Ultimate",
    id: "ultimate",
    sellingPrice: { monthly: "$199" },
    description:
      "An ultimate plan grants you access to some cool features of builderkit",
    features: [
      "NextJS Boilerplate",
      "AI Models",
      "5 Demo Apps",
      "GAuth & Magic Link",
      "Stripe & Lemon Squeezy Payments",
      "Privacy Policy & ToS",
      "Supabase",
      "Email integration",
      "SEO",
      "App Admin Dashboard",
      "Advanced API Set Up on Digital Ocean",
    ],
  },
];

// Each plan might have different components rendered based on its type (e.g., Trial vs. Standard vs. Premium).
// It uses internal state to manage the selected frequency of payments (monthly/annually).
// This component dynamically renders plan details and pricing based on the selected frequency.
export default function Plans() {
  return (
    <>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-3 md:gap-6 mt-20">
        {tiers.map((tier) => (
          // Card for each plan with its respective details and pricing.
          <div
            key={tier.id}
            className={cn(
              "w-full h-fit md:max-w-sm bg-[#1F2E270D] shadow-sm gap-2 text-lp9-secondary rounded-md p-3 sm:p-6 mx-auto mt-3",
              tier.id === "ultimate" && "bg-[#E8F2EC]"
            )}
          >
            <div className="w-full mt-6">
              <p className="text-lg font-semibold">{tier.name.toUpperCase()}</p>

              <p className="font-medium mt-2 mb-8 text-4xl">
                <span>{tier.sellingPrice.monthly}</span>
                <span className="text-[#9CA3AF]">/mo</span>
              </p>
              <p className="text-sm md:text-base font-light">
                {tier.description}
              </p>
            </div>
            <ul role="list" className="space-y-2 md:space-y-4 mt-8">
              {tier.features.map((feature) => (
                <li
                  key={feature}
                  className="leading-relaxed flex gap-3 items-center text-sm md:text-base"
                >
                  <TickIcon /> <span>{feature}</span>
                </li>
              ))}
            </ul>

            {/* CTA button for the specific plan. */}
            <Button
              size={"lg"}
              className={cn(
                "gap-2.5 w-full mt-16 py-6 px-8 font-semibold",
                tier.id === "pro"
                  ? "bg-lp9-primary hover:bg-lp9-primary/95"
                  : "bg-white hover:text-lp9-primary hover:bg-white border border-[#E5E7EB] text-[#030712]"
              )}
            >
              Get Now{" "}
              <span className={cn(tier.id !== "pro" && "invert")}>
                <ArrowRightMd />{" "}
              </span>
            </Button>
          </div>
        ))}
      </div>
    </>
  );
}


// This is the Pricing component of the landing page.

import Plans from '@/components/landing-pages/landing-page-9/pricing/Plans';

export default async function Pricing() {
  return (
    <div id='pricing' className='max-w-6xl mx-auto px-4 py-16 md:py-28'>
      <div className='flex  flex-col items-center justify-center'>
        <div className='flex flex-col justify-center items-center text-center'>
          <p className='max-w-xl leading-[58px] tracking-[-1.5px] text-3xl sm:text-5xl'>Pricing Plans</p>
          <p className='max-w-xl tracking-tighter text-lg text-[#53535C] mt-4'>
            Start making smarter decisions, <br /> Choose a plan
          </p>
        </div>

        <Plans />
      </div>
    </div>
  );
}


// This component responsible for handling payment actions for different plans and frequencies.
// Optional discounts are applied automatically for annual subscriptions when paying via Stripe.
// If the user is not logged in, they are redirected to the login page.
// Otherwise, the payment URL is constructed based on the selected provider, plan, and frequency, with potential discounts applied.
// The button's appearance and behavior change based on the payment provider (Stripe or Lemon Squeezy).

import { FC } from "react";
import { Button } from "@/components/ui/button";
import { supabaseBrowserClient } from "@/utils/supabase/client";
import { useRouter } from "next/navigation";
import config from "@/config";
import { getPaymentUrl } from "@/lib/utils";
import {
  TypeSubscriptionInterval,
  TypePaymentGatwayProvider,
  TypeSubscriptionPlan,
} from "@/types/types";

interface ButtonPaymentProps {
  provider: TypePaymentGatwayProvider;
  tier: TypeSubscriptionPlan;
  frequency: TypeSubscriptionInterval;
}

const ButtonPayment: FC<ButtonPaymentProps> = ({
  provider,
  tier,
  frequency,
}) => {
  const router = useRouter();

  // Optional: If you want to add discount code by default
  const discount =
    provider === "stripe" && frequency === "annually" ? "8JDToQd0" : undefined;

  // This function handles the redirection logic based on the user's authentication status and subscription choice.
  // If the user is logged in, it constructs a specific URL for the payment gateway, optionally adding a discount code for annual payments via Stripe.
  const goToPaymentPage = async () => {
    const supabase = supabaseBrowserClient();

    const {
      data: { user },
    } = await supabase.auth.getUser();

    let url = "/admin-dashboard";
    if (user == null) {
      url = "/login";
    } else if (tier !== "trial") {
      const variantId = config[provider].variant[tier][frequency];
      url = getPaymentUrl(provider, variantId, user.email!, discount);
    }

    router.push(url);
  };

  return (
    <>
      <Button
        variant={provider === "stripe" ? "default" : "outline"}
        size="lg"
        onClick={goToPaymentPage}
        className="w-full"
      >
        Pay with {provider === "stripe" ? "Stripe" : "Lemon Squeezy"}
      </Button>
    </>
  );
};

export default ButtonPayment;


// This is the entry component for the landing page of the application.
// It sequentially renders the primary sections of the landing page including Hero, Features, Product, Pricing, Faq, and Footer components.

import Faq from '@/components/landing-pages/landing-page-7/Faq';
import Features from '@/components/landing-pages/landing-page-7/Features';
import Footer from '@/components/landing-pages/landing-page-7/Footer';
import Hero from '@/components/landing-pages/landing-page-7/Hero';
import Product from '@/components/landing-pages/landing-page-7/Product';
import Pricing from '@/components/landing-pages/landing-page-7/pricing/Pricing';

export default async function LandingPage7() {
  return (
    <>
      <Hero />
      <Features />
      <Product />
      <Pricing />
      <Faq />
      <Footer />
    </>
  );
}


// This component renders the main hero section of the landing page which is designed to grab the visitor's attention.
// It includes a navigation bar, a headline, a detailed subtext that explains the product briefly, and a call-to-action button.

import Navbar from '@/components/landing-pages/landing-page-7/Navbar';
import Image from 'next/image';
import HeroImage from '@/assets/landing-page-7/images/hero.png';
import Link from 'next/link';
import { Button } from './Button';
import HeroBlocksBg from '@/assets/landing-page-7/icons/HeroBlocksBg';
import ArrowRightMd from '@/assets/landing-page-7/icons/ArrowRightMd';

export default async function Hero() {
  return (
    <div className='relative'>
      <div className='max-w-7xl mx-auto'>
        {/* Navbar component: Displays the top navigation menu. */}
        <div className='absolute inset-0 -z-20 overflow-hidden max-w-[80vw] left-[12%]'>
          <HeroBlocksBg />
        </div>
        <Navbar />
        <div className='flex max-w-4xl pt-16 flex-col gap-5 px-4 items-center justify-center mx-auto'>
          <h1 className='font-semibold max-w-xl md:leading-[64px] text-lp7-secondary text-3xl sm:text-[44px] text-center'>
            Generate modular AI Apps with ease and pace
          </h1>
          <p className='text-lp7-sub text-center leading-7 max-w-2xl'>
            Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days. Save Hours
            of Effort and Use our robust Deployable code.
          </p>
          <Button className='flex gap-2.5 shadow-xl h-10 px-4'>
            <Link href={'/login'}>Get started</Link>
            <ArrowRightMd />
          </Button>
        </div>
        <div className='w-full px-6 mt-16 md:mt-10'>
          <Image src={HeroImage} alt='hero' />
        </div>
      </div>
    </div>
  );
}


'use client';

import Link from 'next/link';
import { HiBars3 } from 'react-icons/hi2';
import { Sheet, SheetTrigger, SheetContent, SheetClose } from '@/components/ui/sheet';
import { Button } from '@/components/landing-pages/landing-page-7/Button';
import ArrowRightSm from '@/assets/landing-page-7/icons/ArrowRightSm';
import Image from 'next/image';

const navbarRoutes = [
  { label: 'Features', url: '/#features' },
  { label: 'Product', url: '/#product' },
  { label: 'Pricing', url: '/#pricing' },
  { label: 'FAQ', url: '/#faq' },
];

export default function Navbar() {
  return (
    <div className='max-w-2xl mx-auto px-3 pt-4 bg-white'>
      <div
        className='w-full p-2 flex flex-col justify-between items-center border-[#EAEAEA] border rounded-2xl
        '>
        <div className='w-full flex justify-between items-center'>
          <Link href='https://www.builderkit.ai'>
            <div className='flex items-center gap-2 w-fit'>
              <Image src='/lp7-logo.svg' width={140} height={140} alt='logo' />
            </div>
          </Link>

          <ul className='hidden md:flex items-center gap-6'>
            {navbarRoutes.map((item, index) => (
              <li key={index} className='text-sm font-medium text-[#0C0E1E]'>
                <Link href={item.url} className='hover:underline'>
                  {item.label}
                </Link>
              </li>
            ))}
          </ul>
          <Button className='hidden md:flex gap-2 px-3 py-1.5'>
            <Link href={'/login'}>Sign up</Link>
            <ArrowRightSm />
          </Button>
          <Sheet>
            <SheetTrigger className='block md:hidden'>
              <HiBars3 size={24} />
            </SheetTrigger>
            <SheetContent side='top' className='border-none text-[#0C0E1E]'>
              <div className='space-y-6'>
                <div className='flex flex-col gap-4'>
                  {navbarRoutes.map((item, index) => (
                    <div key={index} className='text-sm font-medium py-2'>
                      <SheetClose asChild>
                        <Link href={item.url}>{item.label}</Link>
                      </SheetClose>
                    </div>
                  ))}
                </div>
                <Button className='flex w-full gap-2 px-3 py-1.5'>
                  <Link href={'/login'}>Sign up</Link>
                  <ArrowRightSm />
                </Button>
              </div>
            </SheetContent>
          </Sheet>
        </div>
      </div>
    </div>
  );
}


// Features component to display the services provided by the application in the landing page.

import ServiceImageIcon1 from '@/assets/landing-page-7/icons/DesignerIcon';

const cardContent = [
  {
    icon: ServiceImageIcon1,
    title: 'Build your AI apps Fast',
    description:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
  },
  {
    icon: ServiceImageIcon1,
    title: 'Build your AI apps Fast',
    description:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
  },
  {
    icon: ServiceImageIcon1,
    title: 'Build your AI apps Fast',
    description:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
  },
];

export default async function Product() {
  return (
    <div id='product' className='max-w-7xl mx-auto  px-4 my-[120px]'>
      <div className='flex flex-col justify-center items-center text-center'>
        <p className='text-lp7-primary text-sm font-semibold mb-4'>What can you do with builder kit?</p>
        <p className='font-medium max-w-xl leading-9 text-lp7-secondary tracking-[-1.68px] text-3xl sm:text-[32px]'>
          Explore the power of AI apps generation
        </p>
        <p className='max-w-xl text-lp7-sub leading-7 mt-2'>
          Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days. Save Hours of
          Effort and Use our robust Deployable code.
        </p>
      </div>

      <div className='grid grid-cols-1 mt-[72px] mx-auto gap-2 md:grid-cols-2 xl:grid-cols-3'>
        {cardContent.map((item, index) => (
          <div
            key={index}
            className='rounded-2xl w-full md:max-w-md mx-auto bg-[#FCFCFC] border border-[#EDEDED] p-4'>
            <div className='flex justify-center md:mb-5 h-fit rounded-xl border border-[#F1F1F1] mb-4'>
              <item.icon />
            </div>

            <p className='text-[20px] text-lp7-secondary tracking-tight leading-6 font-semibold'>
              {item.title}
            </p>

            <p className='leading-7 text-[#757679] mt-1.5'>{item.description}</p>
          </div>
        ))}
      </div>
    </div>
  );
}


// Product component of landing page

import LightningIcon from '@/assets/landing-page-7/icons/LightningIcon';

const cardContent = [
  {
    icon: LightningIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: LightningIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: LightningIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: LightningIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: LightningIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: LightningIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
];

export default async function Features() {
  return (
    <div id='features' className='mx-auto px-4 my-[120px]'>
      <div className='max-w-6xl flex flex-col justify-center items-center mx-auto space-y-16 md:space-y-20'>
        <div className='text-center'>
          <p className='text-lp7-primary text-sm font-semibold mb-4'>What can you do with builder kit?</p>
          <p className='font-medium max-w-sm leading-9 text-lp7-secondary tracking-[-1.68px] text-2xl sm:text-[32px]'>
            Essentially, everything you need to ship you first AI App
          </p>
        </div>

        <div className='grid grid-cols-1 mx-auto md:grid-cols-2 xl:grid-cols-3 gap-6'>
          {cardContent.map((item, index) => (
            <div key={index} className='rounded-xl md:max-w-80 bg-[#FAFAFA] p-6'>
              <div>
                <item.icon />
              </div>
              <div className='mt-4'>
                <p className='text-[20px] leading-6 text-lp7-secondary font-semibold'>{item.title}</p>
                <p className='text-[#727272] text-sm mt-2'>{item.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}


import Link from "next/link";
import { Button } from "@/components/landing-pages/landing-page-7/Button";
import ArrowRightMd from "@/assets/landing-page-7/icons/ArrowRightMd";
import Image from "next/image";

const all = [
  {
    label: "About",
    link: "/about",
  },
  {
    label: "Company",
    link: "/company",
  },
  {
    label: "Careers",
    link: "/careers",
  },
  {
    label: "Newsletter",
    link: "/newsletter",
  },
];

const info = [
  {
    label: "Features",
    link: "/features",
  },
  {
    label: "Product",
    link: "/product",
  },
  {
    label: "Pricing",
    link: "/pricing",
  },
  {
    label: "FAQs",
    link: "/faqs",
  },
];

export default async function Footer() {
  return (
    <div className="flex md:justify-center bg-[#FCFCFC] border border-t-[#DEDEDE] p-5">
      <div className="flex flex-col md:gap-32 gap-24 md:py-12 md:max-w-5xl w-full">
        <div className="flex md:flex-row flex-col justify-between md:gap-20 gap-10">
          <div className="flex flex-col md:gap-6 gap-4 md:w-2/5">
            <Link href="https://www.builderkit.ai">
              <div className="flex items-center gap-2 w-fit">
                <Image
                  src="/lp7-logo.svg"
                  width={140}
                  height={140}
                  alt="logo"
                />
              </div>
            </Link>

            <span className="text-lp7-secondary font-medium leading-7 lg:min-w-[400px]">
              Highly modular NextJS AI Boilerplate that allows you to ship any
              AI Apps within days.
            </span>

            <Button className="flex shadow-xl w-fit h-10">
              Get Started
              <ArrowRightMd />
            </Button>
          </div>

          <div className="grid grid-cols-2 sm:grid-cols-3 w-full justify-between max-w-xl md:grid-cols-2 xl:grid-cols-3 gap-10">
            <div className="flex flex-col gap-4 w-1/3">
              <p className="text-xs text-stone-400">ALL</p>
              <div className="flex flex-col gap-3 ">
                {all.map((item) => (
                  <Link href={item.link} key={item.label}>
                    {item.label}
                  </Link>
                ))}
              </div>
            </div>

            <div className="flex flex-col gap-4 w-1/3">
              <p className="text-xs text-stone-400">INFO</p>
              <div className="flex flex-col gap-3">
                {info.map((item) => (
                  <Link href={item.link} key={item.label}>
                    {item.label}
                  </Link>
                ))}
              </div>
            </div>

            <div className="flex flex-col gap-4 w-1/3">
              <p className="text-xs text-stone-400">CONTACTS</p>
              <Link
                href="mailto:vatsal1811@gmail.com"
                className="text-lp7-secondary"
              >
                vatsal1811@gmail.com
              </Link>
            </div>
          </div>
        </div>
        <div className="flex justify-center">
          <p className="text-stone-600 text-xs">© 2024 — 1811 Labs</p>
        </div>
      </div>
    </div>
  );
}


import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 ",
  {
    variants: {
      variant: {
        default:
          "bg-gradient-to-t from-[#0F6FFF] to-[#0F6FFFE5] hover:bg-[#262626]/70 gap-2 items-center justify-center text-center rounded-[8px] text-sm text-white",
        outline: "border border-input bg-background shadow-sm hover:bg-accent",
        secondary: "bg-secondary text-white shadow-sm hover:bg-secondary/90",
        ghost: "hover:bg-accent hover:text-accent-foreground bg-white gap-2",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 py-3 px-8",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {}
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, ...props }, ref) => {
    return (
      <button
        className={cn(buttonVariants({ variant, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = "Button";

export { Button, buttonVariants };


import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

const accordionItems = [
  {
    value: '1',
    question: 'What is buildekit?',
    answer: 'Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days',
  },
  {
    value: '2',
    question: 'What do i get exactly?',
    answer:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
  },
  {
    value: '3',
    question: 'Who is builder kit for?',
    answer: 'Builderkit is for developers who want to build AI apps faster.',
  },
  {
    value: '4',
    question: 'Is it a website template?',
    answer: 'No, Builderkit is a NextJS AI Boilerplate that allows you to ship any AI Apps within days.',
  },
];

export default function Faq() {
  return (
    <div className='flex justify-center md:px-6 px-2'>
      <div id='faq' className='grid lg:grid-cols-[1fr_2fr] md:py-20 md:gap-20 gap-10 py-10 max-w-5xl'>
        <div className='flex flex-col gap-4 items-center mt-2'>
          <h1 className='md:text-3xl text-lp7-secondary font-medium text-2xl'>Frequently asked questions</h1>
          <p className='text-lp7-sub px-3 md:px-0 lg:text-start text-center'>
            Don't worry, we got you. Here are some answers for your questions.
          </p>
        </div>
        <div className='max-w-[700px] leading-8 items-center'>
          <Accordion type='single' collapsible className='w-full'>
            {accordionItems.map((item) => (
              <AccordionItem key={item.value} className='my-2 px-0 border-[#F2F2F2]' value={item.value}>
                <AccordionTrigger className='text-start text-lp7-secondary font-medium px-6 leading-relaxed'>
                  {item.question}
                </AccordionTrigger>
                <AccordionContent className='text-lp7-sub px-6 pt-0 leading-loose'>
                  {item.answer}
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
        </div>
      </div>
    </div>
  );
}


// This component renders the pricing plans for different subscription tiers.
// It utilizes the <RadioGroup> from HeadlessUI to toggle between 'monthly' and 'annually' payment frequencies.
// Tiers data is mapped to display each plan with its respective price, features, and a call-to-action.

"use client";

import TickIcon from "@/assets/landing-page-7/icons/TickIcon";
import { cn } from "@/lib/utils";
import { Button } from "@/components/landing-pages/landing-page-7/Button";
import ArrowBlack from "@/assets/landing-page-7/icons/ArrowBlack";
import ArrowWhite from "@/assets/landing-page-7/icons/ArrowWhite";

const tiers = [
  {
    name: "Pro",
    id: "pro",
    sellingPrice: { monthly: "$149" },
    description:
      "A pro plan grants you access to some cool features of builderkit.",
    features: [
      "NextJS Boilerplate",
      "AI Models",
      "5 Demo Apps",
      "GAuth & Magic Link",
      "Stripe & Lemon Squeezy Payments",
      "Privacy Policy & ToS",
    ],
  },
  {
    name: "Ultimate",
    id: "ultimate",
    sellingPrice: { monthly: "$199" },
    description:
      "An ultimate plan grants you access to some cool features of builderkit",
    features: [
      "NextJS Boilerplate",
      "AI Models",
      "5 Demo Apps",
      "GAuth & Magic Link",
      "Stripe & Lemon Squeezy Payments",
      "Privacy Policy & ToS",
      "Supabase",
      "Email integration",
      "SEO",
      "App Admin Dashboard",
      "Advanced API Set Up on Digital Ocean",
    ],
  },
];

// Each plan might have different components rendered based on its type (e.g., Trial vs. Standard vs. Premium).
// It uses internal state to manage the selected frequency of payments (monthly/annually).
// This component dynamically renders plan details and pricing based on the selected frequency.
export default function Plans() {
  return (
    <>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-3 md:gap-6 mt-16">
        {tiers.map((tier) => (
          // Card for each plan with its respective details and pricing.
          <div
            key={tier.id}
            className={cn(
              "w-full h-fit md:max-w-sm border-[#171717] bg-[#3A556E0D] shadow-sm gap-2 text-[#1C1C1C] rounded-2xl p-3 sm:p-6 mx-auto mt-3",
              tier.id === "ultimate" && "bg-[#E5F4FF]"
            )}
          >
            <div className="w-full mt-6">
              <p className="text-lg font-semibold">{tier.name.toUpperCase()}</p>

              <p className="font-medium mt-2 mb-8 text-4xl">
                <span>{tier.sellingPrice.monthly}</span>
                <span className="text-[#9CA3AF]">/mo</span>
              </p>
              <p>{tier.description}</p>
            </div>
            <ul role="list" className="space-y-4 mt-8">
              {tier.features.map((feature) => (
                <li
                  key={feature}
                  className="leading-relaxed flex gap-3 font-medium"
                >
                  <TickIcon /> <span>{feature}</span>
                </li>
              ))}
            </ul>

            {/* CTA button for the specific plan. */}

            <Button
              variant={tier.id === "pro" ? "default" : "ghost"}
              size={"lg"}
              className="flex w-full mt-16 py-6 px-8 font-semibold"
            >
              Get Now {tier.id === "pro" ? <ArrowWhite /> : <ArrowBlack />}
            </Button>
          </div>
        ))}
      </div>
    </>
  );
}


// This is the Pricing component of the landing page.

import Plans from '@/components/landing-pages/landing-page-7/pricing/Plans';

export default async function Pricing() {
  return (
    <div id='pricing' className='max-w-6xl mx-auto px-4 py-20 md:py-28'>
      <div className='flex  flex-col items-center justify-center'>
        <div className='flex flex-col justify-center items-center text-center'>
          <p className='text-lp7-primary text-sm font-semibold mb-5'>Pricing</p>
          <p className='font-medium max-w-xl leading-[38px] text-lp7-secondary tracking-[-1.68px] text-2xl sm:text-[32px]'>
            Flexible Pricing Plans
          </p>
          <p className='max-w-xl text-lp7-sub mt-2'>Start making smarter decisions</p>
        </div>

        <Plans />
      </div>
    </div>
  );
}


// This component responsible for handling payment actions for different plans and frequencies.
// Optional discounts are applied automatically for annual subscriptions when paying via Stripe.
// If the user is not logged in, they are redirected to the login page.
// Otherwise, the payment URL is constructed based on the selected provider, plan, and frequency, with potential discounts applied.
// The button's appearance and behavior change based on the payment provider (Stripe or Lemon Squeezy).

import { FC } from "react";
import { Button } from "@/components/ui/button";
import { supabaseBrowserClient } from "@/utils/supabase/client";
import { useRouter } from "next/navigation";
import config from "@/config";
import { getPaymentUrl } from "@/lib/utils";
import {
  TypeSubscriptionInterval,
  TypePaymentGatwayProvider,
  TypeSubscriptionPlan,
} from "@/types/types";

interface ButtonPaymentProps {
  provider: TypePaymentGatwayProvider;
  tier: TypeSubscriptionPlan;
  frequency: TypeSubscriptionInterval;
}

const ButtonPayment: FC<ButtonPaymentProps> = ({
  provider,
  tier,
  frequency,
}) => {
  const router = useRouter();

  // Optional: If you want to add discount code by default
  const discount =
    provider === "stripe" && frequency === "annually" ? "8JDToQd0" : undefined;

  // This function handles the redirection logic based on the user's authentication status and subscription choice.
  // If the user is logged in, it constructs a specific URL for the payment gateway, optionally adding a discount code for annual payments via Stripe.
  const goToPaymentPage = async () => {
    const supabase = supabaseBrowserClient();

    const {
      data: { user },
    } = await supabase.auth.getUser();

    let url = "/admin-dashboard";
    if (user == null) {
      url = "/login";
    } else if (tier !== "trial") {
      const variantId = config[provider].variant[tier][frequency];
      url = getPaymentUrl(provider, variantId, user.email!, discount);
    }

    router.push(url);
  };

  return (
    <>
      <Button
        variant={provider === "stripe" ? "default" : "outline"}
        size="lg"
        onClick={goToPaymentPage}
        className="w-full"
      >
        Pay with {provider === "stripe" ? "Stripe" : "Lemon Squeezy"}
      </Button>
    </>
  );
};

export default ButtonPayment;


import FeaturedOn from './FeaturedOn';
import Hero from './Hero';
import Features2 from './Features-2';
import Features from './Features';
import Pricing from './Pricing';
import Faq from './FAQ';
import Footer from './Footer';

export default function LandingPage6() {
  return (
    <div className='text-white bg-[#141414] bg-gradient-to-bl from-[#313B8233] to-[#090A1833]'>
      <Hero />
      <FeaturedOn />
      <Features2 />
      <Features />
      <Pricing />
      <Faq />
      <hr className='border border-[#2B2F45] w-full' />
      <Footer />
    </div>
  );
}


import { Notion, Grammarly, Intercom, Unsplash, Descript } from '@/assets/landing-page-6/icons';
import Image from 'next/image';

export default async function FeaturedOn() {
  const imageSrc = [Unsplash, Notion, Intercom, Descript, Grammarly];

  return (
    <div className='flex justify-center flex-col items-center md:text-lg text-base md:gap-8 gap-4 md:py-20 py-16'>
      <p className='text-center text-[#787878] md:text-lg'>More than 25,000 teams use Builderkit</p>

      <div className='flex justify-center md:gap-10 gap-5 flex-wrap'>
        {imageSrc.map((src, index) => {
          return <Image key={index} src={src} width={125} height={125} alt='logo' />;
        })}
      </div>
    </div>
  );
}


import Navbar from './Navbar';
import Image from 'next/image';
import { ArrowRightIcon } from '@radix-ui/react-icons';
import Button from './Button';
import hero from '@/assets/landing-page-6/images/hero.svg';

export default function Hero() {
  return (
    <div className='flex flex-col items-center md:gap-[88px] gap-16 pt-4 '>
      <Navbar />

      <div className='flex flex-col gap-8'>
        <div className='flex flex-col gap-4 items-start md:max-w-2xl max-w-80 w-full'>
          <div className='border border-[#222222] px-4 items-center flex h-7 font-semibold text-sm rounded-full'>
            Unlock Your Creative Spark!
            <ArrowRightIcon className='ml-2' />
          </div>

          <div className='gap-4 flex flex-col'>
            <h1 className='font-semibold md:text-[40px] text-3xl'>Generate AI Apps with ease</h1>
            <span className='text-stone-300 text-sm md:text-base leading-7'>
              Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days. Save Hours
              of Effort and Use our robust Deployable code.
            </span>
          </div>
        </div>
        <Button fill={false} size='md' rounded={true}>
          <span>Get Started</span>
          <ArrowRightIcon />
        </Button>
      </div>

      <Image src={hero} width={200} height={200} alt='hero' className='w-full md:px-[84.5px] px-5' />
    </div>
  );
}


import Image from 'next/image';
import Link from 'next/link';
import { Sheet, SheetClose, SheetContent, SheetTrigger } from '@/components/ui/sheet';
import { HiBars3 } from 'react-icons/hi2';
import { ArrowRightIcon } from '@radix-ui/react-icons';
import Button from './Button';

const navOptions = [
  {
    label: 'Features',
    url: '/#features',
  },
  {
    label: 'Product',
    url: '/#product',
  },
  {
    label: 'Pricing',
    url: '/#pricing',
  },
  {
    label: 'FAQ',
    url: '/#faq',
  },
];

export default function Navbar() {
  return (
    <div className='flex md:max-w-2xl  justify-between pt-2 pb-4 border-b border-[#222222] w-full items-center md:px-0 px-4 '>
      <Link href='https://www.builderkit.ai'>
        <div className='flex items-center gap-2 w-fit'>
          <Image src='/lp6-logo.svg' width={140} height={140} alt='logo' />
        </div>
      </Link>

      <div>
        <div className='md:flex gap-4 hidden items-center'>
          {navOptions.map((opt) => {
            return (
              <Link href={opt.url} key={opt.label} className='px-1 py-2.5 text-sm leading-6 hover:underline'>
                {opt.label}
              </Link>
            );
          })}
          <Button fill={false} size='sm' rounded={true}>
            <span>Signin</span>
            <ArrowRightIcon />
          </Button>
        </div>

        <Sheet>
          <SheetTrigger className='block md:hidden'>
            <HiBars3 size={24} />
          </SheetTrigger>
          <SheetContent side='top' className='bg-[#141414] text-white border-black'>
            <div className='space-y-6'>
              <div className='flex flex-col gap-4'>
                {navOptions.map((item, index) => (
                  <div key={index} className='text-sm font-medium py-2'>
                    <SheetClose asChild>
                      <Link href={item.url}>{item.label}</Link>
                    </SheetClose>
                  </div>
                ))}
              </div>
              <Button fill={false} size='sm'>
                <span>Sign in</span>
                <ArrowRightIcon className='font-bold' />
              </Button>
            </div>
          </SheetContent>
        </Sheet>
      </div>
    </div>
  );
}


/* eslint-disable tailwindcss/no-contradicting-classname */
import Image from "next/image";
import Tick from "@/assets/landing-page-6/icons/Tick.svg";
import Button from "./Button";
import { ArrowRightIcon } from "@radix-ui/react-icons";
import { cn } from "@/lib/utils";

const features = [
  { feature: "NextJS Boilerplate", available: true },
  { feature: "AI Modules", available: true },
  { feature: "5 Demo Apps", available: true },
  { feature: "GAuth & Magic Link", available: false },
  { feature: "Stripe & Lemon Squeezy Payments", available: false },
  { feature: "Privacy Policy & ToS", available: false },
];

export default function Pricing() {
  return (
    <div id="pricing" className="flex justify-center md:py-20 py-10">
      <div className="flex flex-col gap-20 md:max-w-6xl max-w-80 items-center">
        <div className="items-center flex flex-col gap-7">
          <div className="items-center flex flex-col gap-4">
            <span className="text-[#227BFF] font-semibold text-sm">
              Pricing
            </span>
            <h1 className="md:text-4xl text-2xl text-center max-w-[560px] font-medium">
              Pricing Plans to Suit Your Needs
            </h1>
          </div>

          <span className="text-[#A8A8A8] text-center">
            Start making smarter decisions, Choose a plan
          </span>
        </div>
        <div className="flex gap-4 md:flex-row flex-col">
          <div className="border border-[#2B2F45] rounded-3xl flex gap-12 px-1 py-8 items-center md:flex-row flex-col w-full bg-[#161823]">
            <div className="flex flex-col gap-6 items-center flex-1">
              <div className="flex flex-col gap-2">
                <h3 className="font-semibold text-center text-lg">PRO</h3>
                <div className="font-semibold text-[40px] leading-[50px]">
                  <span className="">$149</span>
                  <span className="text-stone-400">/mo</span>
                </div>
              </div>
              <Button size="md" className="bg-[#FFFFFF0A]">
                Buy Now <ArrowRightIcon />
              </Button>
            </div>

            <div className="flex flex-col gap-4 max-w-72 flex-1">
              {features.map((feat) => {
                return (
                  <div
                    key={feat.feature}
                    className={cn("flex gap-2 items-start", {
                      "text-[#484848]": !feat.available,
                    })}
                  >
                    <Image
                      src={Tick}
                      alt="tick"
                      width={20}
                      height={20}
                      className={cn({ "opacity-25": !feat.available })}
                    />
                    <span className="leading-6 -mt-0.5">{feat.feature}</span>
                  </div>
                );
              })}
            </div>
          </div>

          <div className="border border-[#2B2F45] rounded-3xl flex gap-12 px-4 py-8 items-center md:flex-row flex-col bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-[#0085FF29] from-10% to-[#1A1A1A29] w-full">
            <div className="flex flex-col gap-6 items-center flex-1">
              <div className="flex flex-col gap-2">
                <h3 className="font-semibold text-center text-lg">PRO</h3>
                <div className="font-semibold text-[40px] leading-[50px]">
                  <span className="">$149</span>
                  <span className="text-stone-400">/mo</span>
                </div>
              </div>
              <Button fill={true} size="md">
                Buy Now <ArrowRightIcon />
              </Button>
            </div>

            <div className="flex flex-col gap-4 max-w-72 flex-1">
              {features.map((feat) => {
                return (
                  <div
                    key={feat.feature}
                    className={cn("flex gap-2 items-start")}
                  >
                    <Image src={Tick} alt="tick" width={20} height={20} />
                    <span className="leading-6 -mt-0.5">{feat.feature}</span>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


import Image from 'next/image';
import features from '@/assets/landing-page-6/images/feature.svg';

const cardDetails = [
  {
    title: 'Build your AI apps Fast',
    content:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
    url: features,
  },
  {
    title: 'Build your AI apps Fast',
    content:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
    url: features,
  },
  {
    title: 'Build your AI apps Fast',
    content:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
    url: features,
  },
];

export default async function Features() {
  return (
    <div id='features' className='flex justify-center'>
      <div className='md:max-w-[1030px] max-w-80 flex flex-col md:py-32 py-24 items-center md:gap-24 gap-16'>
        <div className='flex flex-col items-center gap-7 justify-between text-center'>
          <div className='flex flex-col gap-4'>
            <span className='font-medium text-sm text-[#227AFF]'>What can you do with builder kit?</span>
            <h1 className='md:text-4xl text-2xl font-semibold max-w-lg flex flex-col gap-2'>
              <span>Explore the power of</span>
              <span>AI apps generation Workflow</span>
            </h1>
          </div>

          <span className='text-[#A8A8A8] leading-6 max-w-[628px] md:text-lg'>
            Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days. Save Hours
            of Effort and Use our robust Deployable code.
          </span>
        </div>

        <div className='flex gap-4 flex-col md:flex-row '>
          {cardDetails.map((card) => (
            <div
              key={card.title}
              className='md:rounded-3xl rounded-lg flex flex-col md:flex md:gap-8 gap-4 border border-[#2B2F45] p-4 bg-[#161823]'>
              <Image src={card.url} alt={card.title} width={400} height={400} className='rounded-lg' />
              <div className='gap-1.5 flex flex-col'>
                <h2 className='font-semibold md:text-xl text-lg'>{card.title}</h2>
                <span className='text-[#A8A8A8] leading-7'>{card.content}</span>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}


import { Lightning } from '@/assets/landing-page-6/icons';
import Image from 'next/image';

const cardDetails = [
  {
    title: 'Quality apps',
    content:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours. ',
  },
  {
    title: 'Quality apps',
    content:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours. ',
  },
  {
    title: 'Quality apps',
    content:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours. ',
  },
  {
    title: 'Quality apps',
    content:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours. ',
  },
  {
    title: 'Quality apps',
    content:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours. ',
  },
  {
    title: 'Quality apps',
    content:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours. ',
  },
];

export default async function Features2() {
  return (
    <div className='flex flex-col md:py-32 py-16 items-center md:gap-20 gap-10'>
      <div className='flex flex-col gap-7 items-center max-md:max-w-80'>
        <div className='flex flex-col gap-4 items-center'>
          <p className='font-semibold text-sm text-[#227AFF]'>What can you do with builder kit?</p>
          <h1 className='font-medium md:text-4xl text-2xl max-w-xl text-center'>
            Essentially, everything you need to ship you first AI App
          </h1>
        </div>

        <span className='md:text-lg md:max-w-[642px] text-[#A8A8A8] text-center'>
          Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days. Save Hours of
          Effort and Use our robust Deployable code.
        </span>
      </div>

      <div className='flex md:grid grid-cols-3 flex-col md:gap-6 gap-4 flex-wrap'>
        {cardDetails.map((card, index) => {
          return (
            <div
              key={index}
              className='md:rounded-3xl rounded-lg shadow-md flex flex-col gap-2 bg-[#0f111a] md:p-6 p-4 w-80 items-start'>
              <div className='flex flex-col gap-4'>
                <Image src={Lightning} width={25} height={25} alt='logo' className='size-8' />
                <h1 className='text-xl font-semibold'>{card.title}</h1>
              </div>

              <p className='text-sm text-[#A8A8A8]'>{card.content}</p>
            </div>
          );
        })}
      </div>
    </div>
  );
}


import Image from "next/image";
import Button from "./Button";
import { ArrowRightIcon } from "@radix-ui/react-icons";
import Link from "next/link";

const All = [
  {
    label: "About",
    link: "/about",
  },
  {
    label: "Company",
    link: "/company",
  },
  {
    label: "Careers",
    link: "/careers",
  },
  {
    label: "Newsletter",
    link: "/newsletter",
  },
];

const Info = [
  {
    label: "Features",
    link: "/features",
  },
  {
    label: "Product",
    link: "/product",
  },
  {
    label: "Pricing",
    link: "/pricing",
  },
  {
    label: "FAQs",
    link: "/faqs",
  },
];

export default async function Footer() {
  return (
    <div className="flex justify-center">
      <div className="flex flex-col md:gap-32 gap-24 md:py-20 py-10 md:max-w-5xl max-w-80 ">
        <div className="flex md:flex-row flex-col justify-between md:gap-20 gap-10">
          <div className="flex flex-col md:gap-6 gap-4 md:w-2/5">
            <Image
              src="/lp6-logo.svg"
              alt="logo"
              width={100}
              height={100}
              className="w-32 h-8"
            />

            <span className="text-[#A8A8A8] text-start">
              Highly modular NextJS AI Boilerplate that allows you to ship any
              AI Apps within days.
            </span>

            <Button fill={false} size="md" rounded={true}>
              Get Started
              <ArrowRightIcon />
            </Button>
          </div>

          <div className="flex gap-6 md:flex-1 flex-col  md:flex-row">
            <div className="flex flex-col gap-4 w-1/3">
              <p className="text-xs">ALL</p>
              <div className="flex flex-col gap-3 text-[#A8A8A8]">
                {All.map((item) => {
                  return (
                    <Link href={item.link} key={item.label}>
                      {item.label}
                    </Link>
                  );
                })}
              </div>
            </div>

            <div className="flex flex-col gap-4 w-1/3">
              <p className="text-xs">INFO</p>
              <div className="flex flex-col gap-3 text-stone-400">
                {Info.map((item) => {
                  return (
                    <Link href={item.link} key={item.label}>
                      {item.label}
                    </Link>
                  );
                })}
              </div>
            </div>

            <div className="flex flex-col gap-4 w-1/3">
              <p className="text-xs">CONTACTS</p>
              <Link
                href="mailto:vatsal1811@gmail.com"
                className="text-stone-400"
              >
                vatsal1811@gmail.com
              </Link>
            </div>
          </div>
        </div>
        <div className="flex justify-center">
          <p className="text-stone-600 text-xs">© 2024 — 1811 Labs</p>
        </div>
      </div>
    </div>
  );
}


import { cn } from "@/lib/utils";
import { ReactNode } from "react";

interface ButtonProps {
  children: ReactNode;
  fill?: boolean;
  size?: string;
  rounded?: boolean;
  className?: string;
}

function Button({ children, fill, size, rounded, className }: ButtonProps) {
  return (
    <button
      className={cn(
        "flex hover:opacity-90 rounded-lg items-center shadow w-fit gap-2.5 text-sm",
        {
          "text-black bg-white ": fill,
          "text-white bg-[#343854]": !fill,
          "px-2.5 h-8": size === "sm",
          "px-6 h-11": size == "md",
          "rounded-3xl": rounded,
        },
        className
      )}
    >
      {children}
    </button>
  );
}

export default Button;


import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

const accordion = [
  {
    title: 'What is buildekit?',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus ad vitae excepturi, necessitatibus ex eveniet deserunt eaque qui quisquam architecto sapiente dolorum. Eligendi ipsum perferendis corrupti quasi eius blanditiis beatae.',
  },
  {
    title: 'What do i get exactly?',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus ad vitae excepturi, necessitatibus ex eveniet deserunt eaque qui quisquam architecto sapiente dolorum. Eligendi ipsum perferendis corrupti quasi eius blanditiis beatae.',
  },
  {
    title: 'Who is builder kit for?',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus ad vitae excepturi, necessitatibus ex eveniet deserunt eaque qui quisquam architecto sapiente dolorum. Eligendi ipsum perferendis corrupti quasi eius blanditiis beatae.',
  },
  {
    title: 'Is it a website template?',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus ad vitae excepturi, necessitatibus ex eveniet deserunt eaque qui quisquam architecto sapiente dolorum. Eligendi ipsum perferendis corrupti quasi eius blanditiis beatae.',
  },
];

export default function FAQ() {
  return (
    <div className='flex justify-center'>
      <div id='faq' className='flex flex-col md:flex-row md:py-32 md:gap-20 gap-10 py-10 max-w-5xl'>
        <div className='flex flex-col gap-6 items-center mt-2'>
          <h1 className='md:text-3xl font-medium text-2xl'>Frequently asked questions</h1>
          <p className='text-[#A8A8A8] px-10 md:px-0 leading-7 md:w-[334px]'>
            Don't worry, we got you. Here are some answers for your questions.
          </p>
        </div>

        <div className='flex flex-col leading-8 ] items-center'>
          {accordion.map((item, index) => {
            return (
              <Accordion type='single' collapsible key={index}>
                <AccordionItem value={item.title} className=' md:w-[669px] w-80  border-[#2B2F45] border-b'>
                  <AccordionTrigger className='text-base flex justify-between w-full md:mx-6 mx-3 md:h-16'>
                    {item.title}
                  </AccordionTrigger>
                  <AccordionContent className='text-[#A8A8A8] md:text-base pb-5 md:px-6 px-3'>
                    {item.content}
                  </AccordionContent>
                </AccordionItem>
              </Accordion>
            );
          })}
        </div>
      </div>
    </div>
  );
}


// This is the entry component for the landing page of the application.
// It sequentially renders the primary sections of the landing page including Hero, Features, Product, Pricing, Faq, and Footer components.

import Faq from './Faq';
import Features from './Features';
import Footer from './Footer';
import Hero from './Hero';
import Pricing from './pricing/Pricing';
import Product from './Product';

export default async function LandingPage1() {
  return (
    <>
      <Hero />
      <Features />
      <Product />
      <Pricing />
      <Faq />
      <Footer />
    </>
  );
}


// This component renders the main hero section of the landing page which is designed to grab the visitor's attention.
// It includes a navigation bar, a headline, a detailed subtext that explains the product briefly, and a call-to-action button.

import Navbar from './Navbar';
import { Button } from '@/components/ui/button';
import Image from 'next/image';
import HeroImage from '@/assets/landing-page-1/images/hero.png';
import Link from 'next/link';

export default async function Hero() {
  return (
    <div className='bg-waves bg-[#EDF6FF]'>
      <div className='max-w-6xl mx-auto'>
        {/* Navbar component: Displays the top navigation menu. */}
        <Navbar />

        <div className='flex flex-col md:flex-row gap-10 py-5 md:py-14 px-4'>
          <div className='space-y-6 w-full md:w-1/2'>
            <p className='text-primary text-xs md:text-sm font-bold leading-normal tracking-widest uppercase'>
              Let's ship your Apps faster
            </p>
            <p className='text-5xl md:text-6xl'>Ship AI apps like a pro.</p>
            <p className='text-lg md:text-xl text-secondary md:leading-relaxed'>
              With lots of unique blocks, you can easily build a page without coding.
              <br className='block md:hidden' /> Build your next AI website within few minutes.
            </p>
            <Link href='/admin-dashboard' className='block'>
              <Button className='px-8 py-5'>Get Started</Button>
            </Link>
          </div>
          <div className='w-full md:w-1/2 flex items-center justify-center'>
            <Image src={HeroImage} width={500} height={500} alt='hero' />
          </div>
        </div>
      </div>
    </div>
  );
}


// This component serves as the navigation bar for the application, which appears across various pages.
// It dynamically adjusts to display different links based on the user's authentication status and screen size.
// The component uses both responsive and conditional rendering techniques for optimization across devices.

import Link from "next/link";

import {
  Sheet,
  SheetClose,
  SheetContent,
  SheetTrigger,
} from "@/components/ui/sheet";
import { HiBars3 } from "react-icons/hi2";
import { Button } from "@/components/ui/button";
import Image from "next/image";

const navbarRoutes = [
  { label: "Waitlist", url: "/waitlist" },
  { label: "Features", url: "/#features" },
  { label: "Product", url: "/#product" },
  { label: "Pricing", url: "/#pricing" },
  { label: "FAQ", url: "/#faq" },
];

export default async function Navbar() {
  return (
    <div className="max-w-6xl mx-auto">
      <div className="w-full flex justify-between items-center p-4 mb-5">
        <Link href="https://www.builderkit.ai">
          <div className="flex items-center gap-2 w-fit">
            <Image src="/lp1-logo.png" width={140} height={140} alt="logo" />
          </div>
        </Link>

        <ul className="hidden md:flex items-center gap-6">
          {navbarRoutes.map((item, index) => (
            <li key={index} className="text-sm font-medium">
              <Link href={item.url} className="hover:underline">
                {item.label}
              </Link>
            </li>
          ))}
        </ul>

        {/* Conditional button that changes based on user status. */}
        <Button className="hidden md:block">Login</Button>

        <Sheet>
          <SheetTrigger className="block md:hidden">
            <HiBars3 size={24} />
          </SheetTrigger>
          <SheetContent side="top">
            <div className="space-y-6">
              <div className="flex flex-col gap-4">
                {navbarRoutes.map((item, index) => (
                  <div key={index} className="text-sm font-medium py-2">
                    <SheetClose asChild>
                      <Link href={item.url}>{item.label}</Link>
                    </SheetClose>
                  </div>
                ))}
              </div>
              <Button className="rounded-lg w-full flex border border-[#51DCA3] green-btn-gradient">
                Sign Up
              </Button>
            </div>
          </SheetContent>
        </Sheet>
      </div>
    </div>
  );
}


// Product component of landing page

import ChatIcon from '@/assets/landing-page-1/icons/ChatIcon';
import IntegrationIcon from '@/assets/landing-page-1/icons/IntegrationIcon';
import TaskIcon from '@/assets/landing-page-1/icons/TaskIcon';
import UserIcon from '@/assets/landing-page-1/icons/UserIcon';

const items = [
  {
    icon: UserIcon,
    title: 'Expertise & Innovation',
    description:
      'With lots of unique blocks, you can easily build a page without coding. Build your next landing page.',
  },
  {
    icon: TaskIcon,
    title: 'Organized tasks',
    description:
      'With lots of unique blocks, you can easily build a page without coding. Build your next landing page.',
  },
  {
    icon: ChatIcon,
    title: 'Easy Feedback Sharing',
    description:
      'With lots of unique blocks, you can easily build a page without coding. Build your next landing page.',
  },
  {
    icon: IntegrationIcon,
    title: 'Seamless Integration',
    description:
      'With lots of unique blocks, you can easily build a page without coding. Build your next landing page.',
  },
];

export default async function Product() {
  return (
    <div id='product' className='bg-waves bg-[#EDF6FF] mx-auto p-4'>
      <div className='max-w-4xl flex flex-col justify-center items-center mx-auto py-20 space-y-20'>
        <div className='space-y-7 max-w-xl'>
          <p className='text-primary text-xs md:text-sm text-center font-bold leading-normal tracking-widest uppercase'>
            WHY CHOOSE US
          </p>
          <p className='text-center text-3xl md:text-4xl leading-normal md:leading-snug'>
            People choose us because we serve the best for everyone
          </p>
        </div>
        <div className='w-full grid grid-cols-1 md:grid-cols-2 gap-16'>
          {items.map((item, index) => (
            <div key={index} className='flex items-start'>
              <div className='mr-4'>
                <item.icon />
              </div>
              <div>
                <p className='text-xl font-semibold mb-2'>{item.title}</p>
                <p className='text-secondary/90 leading-relaxed'>{item.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}


// Features component to display the services provided by the application in the landing page.

import ServiceImageIcon1 from "@/assets/landing-page-1/icons/ServiceImageIcon1";
import ServiceImageIcon2 from "@/assets/landing-page-1/icons/ServiceImageIcon2";
import ServiceImageIcon3 from "@/assets/landing-page-1/icons/ServiceImageIcon3";
import { BiRightArrowAlt } from "react-icons/bi";
import { Button } from "@/components/ui/button";

const cardContent = [
  {
    icon: ServiceImageIcon1,
    bgColor: "#68D585",
    title: "Custom AI Development",
    description:
      "With lots of unique blocks, you can easily build a page without coding. Build your next landing page.",
  },
  {
    icon: ServiceImageIcon2,
    bgColor: "#473BF0",
    title: "AI Integration Services",
    description:
      "With lots of unique blocks, you can easily build a page without coding. Build your next landing page.",
  },
  {
    icon: ServiceImageIcon3,
    bgColor: "#F64B4B",
    title: "AI Powered Sites",
    description:
      "With lots of unique blocks, you can easily build a page without coding. Build your next landing page.",
  },
];

const serviceFeatures = [
  {
    title: "1M+",
    description: "Customers visit Omega every month to get their service done.",
  },
  {
    title: "92%",
    description: "Satisfaction rate comes from our awesome customers.",
  },
  {
    title: "4.9/5.0",
    description: "Average customer ratings we have got all over internet.",
  },
];

export default async function Features() {
  return (
    <div id="features" className="max-w-6xl mx-auto p-4 space-y-20 my-20">
      <div className="flex flex-col items-center justify-center">
        <div className="space-y-7 max-w-xl">
          <p className="text-primary text-xs md:text-sm text-center font-bold leading-normal tracking-widest uppercase">
            OUR SERVICES
          </p>
          <p className="text-center text-3xl md:text-4xl leading-normal md:leading-snug">
            We provide great services for our customers based on needs
          </p>
          <p className=" text-secondary/90 text-center text-lg md:text-xl font-light md:leading-8 tracking-wide">
            With lots of unique blocks, you can easily build a page without
            coding. Build your next consultancy website within few minutes.
          </p>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-10 ">
        {cardContent.map((item, index) => (
          <div
            key={index}
            style={{ backgroundColor: item.bgColor }}
            className="px-8 py-6 rounded-2xl space-y-8"
          >
            <div className="flex justify-center">
              <item.icon />
            </div>
            <div className="text-white text-center">
              <p className="text-2xl font-medium">{item.title}</p>
              <p className="font-light mt-4">{item.description}</p>
              <Button
                variant="link"
                className="text-white flex items-center gap-2 mx-auto mt-8"
              >
                Learn more
                <BiRightArrowAlt size={20} />
              </Button>
            </div>
          </div>
        ))}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-28">
        {serviceFeatures.map((item, index) => (
          <div key={index}>
            <p className="text-center text-5xl leading-snug">{item.title}</p>
            <p className="text-secondary/90 text-center text-lg mt-4">
              {item.description}
            </p>
          </div>
        ))}
      </div>
    </div>
  );
}


// This is the Footer component of the landing page.

import Link from "next/link";
import { Button } from "@/components/ui/button";

// Array of objects representing footer navigation items
const footerItems = [
  {
    label: "About",
    url: "/about",
  },
  {
    label: "Contact",
    url: "/contact",
  },
  {
    label: "Blog",
    url: "/blog",
  },
  {
    label: "Story",
    url: "/story",
  },
  {
    label: "Company",
    url: "/company",
  },
  {
    label: "Product",
    url: "/product",
  },
  {
    label: "Careers",
    url: "/careers",
  },
  {
    label: "Press",
    url: "/press",
  },
  {
    label: "Terms of Service",
    url: "/terms-of-service",
  },
  {
    label: "Privacy Policy",
    url: "/privacy-policy",
  },
];

export default async function Footer() {
  return (
    <footer className="bg-[#161C2D] text-white">
      <div className="max-w-6xl mx-auto px-4 py-16">
        <div className="flex flex-col md:flex-row md:items-center justify-between gap-6">
          <p className="md:w-1/2 text-3xl md:text-4xl font-medium leading-normal md:leading-normal">
            Get your AI apps built with blazing speed.
          </p>
          <Button
            size="lg"
            className="rounded-full bg-white hover:bg-white/90 text-black"
          >
            Try Now
            <span className="ml-2">&rarr;</span>
          </Button>
        </div>

        <hr className="opacity-10 my-16" />

        <div className="flex flex-col md:flex-row justify-between gap-10 mb-8">
          <div className="md:w-1/4 flex flex-col gap-8">
            <p className="font-medium text-2xl leading-6 text-stone-300">
              BuilderKit.ai
            </p>
            <p className="text-lg">
              Highly modular NextJS AI Boilerplate that allows you to ship any
              AI Apps within days.
            </p>
          </div>

          <div className="text-muted-foreground grid grid-rows-4 grid-cols-3 grid-flow-col gap-x-10 gap-y-6">
            {footerItems.map((item, index) => (
              <Link key={index} href={item.url} className="hover:underline">
                {item.label}
              </Link>
            ))}
          </div>
        </div>

        <p className="font-medium">All rights reserved.</p>
      </div>
    </footer>
  );
}


// Faq in the landing page is a section that provides answers to frequently asked questions.

import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

const accordionItems = [
  {
    value: '1',
    question: 'Is it accessible?',
    answer: 'Yes. It adheres to the WAI-ARIA design pattern.',
  },
  {
    value: '2',
    question: 'Is it accessible?',
    answer: 'Yes. It adheres to the WAI-ARIA design pattern. Yes. It adheres to the WAI-ARIA design pattern.',
  },
  {
    value: '3',
    question: 'Is it accessible?',
    answer: 'Yes. It adheres to the WAI-ARIA design pattern.',
  },
];

export default async function Faq() {
  return (
    <div id='faq' className='bg-waves bg-[#EDF6FF] mx-auto py-20'>
      <div className='max-w-xl mx-auto p-4'>
        <div className='flex flex-col items-center justify-center'>
          <div className='space-y-7 max-w-lg'>
            <p className='text-center text-4xl leading-snug'>Need Help?</p>
            <p className='text-secondary text-center text-xl font-light leading-8'>
              Don't worry, we got you. Here are some answers for your questions.
            </p>
          </div>
        </div>
        <Accordion type='single' collapsible className='w-full'>
          {accordionItems.map((item, index) => (
            <AccordionItem key={index} className='my-5 bg-white rounded-xl' value={item.value}>
              <AccordionTrigger className='text-start font-medium px-6 leading-relaxed'>
                {item.question}
              </AccordionTrigger>
              <AccordionContent className='text-secondary/65 border-t px-6 pt-3 leading-loose'>
                {item.answer}
              </AccordionContent>
            </AccordionItem>
          ))}
        </Accordion>
      </div>
    </div>
  );
}


// This component renders the pricing plans for different subscription tiers.
// It utilizes the <RadioGroup> from HeadlessUI to toggle between 'monthly' and 'annually' payment frequencies.
// Tiers data is mapped to display each plan with its respective price, features, and a call-to-action.

"use client";

import { RadioGroup } from "@headlessui/react";
import { Badge } from "@/components/ui/badge";
import { useState } from "react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";

const frequencies = [
  { value: "monthly", label: "Billed Monthly", priceSuffix: "/month" },
  { value: "annually", label: "Billed Annually", priceSuffix: "/year" },
];

const tiers = [
  {
    name: "Trial",
    id: "trial",
    description: "50% Off on Annual Plans",
    actualPrice: { monthly: "", annually: "" },
    sellingPrice: { monthly: "", annually: "" },
    features: [
      "With lots of unique blocks, you can easily build a page without coding. Build your next landing page.",
    ],
  },
  {
    name: "Standard",
    id: "standard",
    description: "50% Off on Annual Plans",
    actualPrice: { monthly: "", annually: "$150" },
    sellingPrice: { monthly: "$15", annually: "$75" },
    features: [
      "With lots of unique blocks, you can easily build a page without coding. Build your next landing page.",
    ],
  },
  {
    name: "Premium",
    id: "premium",
    description: "50% Off on Annual Plans",
    actualPrice: { monthly: "", annually: "$300" },
    sellingPrice: { monthly: "$50", annually: "$150" },
    features: [
      "With lots of unique blocks, you can easily build a page without coding. Build your next landing page.",
    ],
  },
];

// Each plan might have different components rendered based on its type (e.g., Trial vs. Standard vs. Premium).
// It uses internal state to manage the selected frequency of payments (monthly/annually).
// This component dynamically renders plan details and pricing based on the selected frequency.
export default function Plans() {
  const [frequency, setFrequency] = useState(frequencies[0]);

  return (
    <>
      {/* <RadioGroup> is used here to allow the user to choose between monthly or annual billing. */}
      {/* It affects the display of prices and billing cycles dynamically based on the selection. */}
      <div className="flex justify-center mb-8">
        <RadioGroup
          value={frequency}
          onChange={setFrequency}
          className="grid grid-cols-2 bg-white gap-x-1 rounded-full p-1 text-center text-[10px] md:text-xs leading-5 ring-1 ring-inset ring-gray-200"
        >
          <RadioGroup.Label className="sr-only">
            Payment frequency
          </RadioGroup.Label>
          {frequencies.map((option) => (
            <RadioGroup.Option
              key={option.value}
              value={option}
              className={({ checked }) =>
                cn(
                  checked && "bg-primary text-white",
                  "cursor-pointer rounded-full px-2 py-1 md:py-2"
                )
              }
            >
              {option.label}
            </RadioGroup.Option>
          ))}
        </RadioGroup>
      </div>

      <div className="flex flex-col md:flex-row items-start justify-center gap-10">
        {tiers.map((tier) => (
          // Card for each plan with its respective details and pricing.
          <div
            key={tier.id}
            className="md:w-1/4 flex flex-col items-center justify-center gap-6 md:gap-10 p-6"
          >
            <Badge className="bg-primary/10 text-primary shadow-none uppercase">
              {tier.name}
            </Badge>
            <div className="text-center">
              <div className="mb-4">
                {tier.id === "trial" ? (
                  <p className="text-5xl">Free</p>
                ) : (
                  <div className="flex items-end gap-1">
                    <p className="text-2xl font-semibold line-through text-black/50 decoration-black/70 decoration-2 px-0.5">
                      {(tier.actualPrice as any)[frequency.value]}
                    </p>
                    <p className="text-5xl font-semibold tracking-tight">
                      {(tier.sellingPrice as any)[frequency.value]}
                    </p>
                    <p className="text-sm font-medium leading-loose">
                      {frequency.priceSuffix}
                    </p>
                  </div>
                )}
              </div>
              <p className="text-sm opacity-60">{tier.description}</p>
            </div>
            <ul role="list" className="h-20 space-y-2 text-sm opacity-60">
              {tier.features.map((feature) => (
                <li key={feature} className="text-center leading-relaxed">
                  {feature}
                </li>
              ))}
            </ul>

            <Button size="lg" className="w-full">
              Get Started
            </Button>
          </div>
        ))}
      </div>
    </>
  );
}


// This is the Pricing component of the landing page.

import Plans from './Plans';

export default async function Pricing() {
  return (
    <div id='pricing' className='max-w-6xl mx-auto px-4 py-28'>
      <div className='flex flex-col items-center justify-center'>
        <p className='text-4xl mb-7 leading-snug'>Pricing</p>
        <p className='md:w-1/2 text-lg text-secondary font-light text-center mb-16'>
          With lots of unique blocks, you can easily build a page without coding. Build your next landing
          page.
        </p>

        <Plans />
      </div>
    </div>
  );
}


import FeaturedOn from './FeaturedOn';
import Hero from './Hero';
import Features2 from './Features2';
import Features from './Features';
import Pricing from './Pricing';
import Faq from './FAQ';
import Footer from './Footer';

export default function LandingPage8() {
  return (
    <div className='text-[#090A18]'>
      <div className='bg-black bg-gradient-to-tr from-[#090A1843] to-[#313B825D] text-white'>
        <Hero />
        <FeaturedOn />
      </div>
      <Features />
      <Features2 />
      <Pricing />
      <Faq />
      <Footer />
    </div>
  );
}


import { Notion, Grammarly, Intercom, Unsplash, Descript } from '@/assets/landing-page-8/icons';
import Image from 'next/image';

export default async function FeaturedOn() {
  const imageSrc = [Unsplash, Notion, Intercom, Descript, Grammarly];

  return (
    <div className='flex justify-center flex-col items-center md:text-lg text-base md:gap-8 gap-4 md:py-20 py-16'>
      <p className=' font-medium text-center text-[#787878]'>More than 25,000 teams use Builderkit</p>

      <div className='flex justify-center md:gap-10 gap-5 flex-wrap'>
        {imageSrc.map((src, index) => {
          return <Image key={index} src={src} width={125} height={125} alt='logo' />;
        })}
      </div>
    </div>
  );
}


import Navbar from './Navbar';
import Image from 'next/image';
import { ArrowRightIcon } from '@radix-ui/react-icons';
import { FaArrowRight } from 'react-icons/fa6';
import Button from './Button';
import hero from '@/assets/landing-page-8/images/hero.svg';

export default function Hero() {
  return (
    <div className='flex flex-col items-center md:gap-24 gap-16'>
      <Navbar />

      <div className='flex flex-col gap-12 items-center'>
        <div className='flex flex-col gap-5 max-md:max-w-80 w-full items-center'>
          <div className='border border-[#222222] px-4 items-center flex h-7 font-semibold text-sm rounded-full'>
            Unlock Your Creative Spark!
            <ArrowRightIcon className='ml-2' />
          </div>

          <h1 className='font-medium md:leading-[60px] md:text-[60px] text-3xl text-center md:w-fit'>
            Generate AI Apps with ease
          </h1>

          <span className='text-[#787878] text-sm md:text-base text-center max-w-[736px] leading-7'>
            Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days. Save Hours
            of Effort and Use our robust Deployable code.
          </span>
        </div>
        <Button fill={false} size='md'>
          <span>Get Started</span>
          <FaArrowRight />
        </Button>
      </div>

      <Image src={hero} width={200} height={200} alt='hero' className='w-full md:px-40 px-5' />
    </div>
  );
}


'use client';

import { ArrowRightIcon } from '@radix-ui/react-icons';
import Button from './Button';
import Image from 'next/image';
import { Sheet, SheetClose, SheetContent, SheetTrigger } from '@/components/ui/sheet';
import { HiBars3 } from 'react-icons/hi2';
import Link from 'next/link';

const navOptions = [
  {
    label: 'Features',
    url: '/#features',
  },
  {
    label: 'Product',
    url: '/#product',
  },
  {
    label: 'Pricing',
    url: '/#pricing',
  },
  {
    label: 'FAQ',
    url: '/#faq',
  },
];

export default function Navbar() {
  return (
    <div className='flex justify-between h-12 md:max-w-screen-sm mt-4 items-center w-full max-w-80 border border-[#222222] px-2 md:rounded-2xl rounded-lg bg-[#0C0E1E]'>
      <Link href='https://www.builderkit.ai'>
        <div className='flex items-center gap-2 w-fit'>
          <Image src='/lp8-logo.svg' width={140} height={140} alt='logo' />
        </div>
      </Link>

      <div className='md:flex hidden gap-0.5 font-medium'>
        {navOptions.map((opt) => {
          return (
            <Link href={opt.url} key={opt.label} className='px-1 py-2.5 text-sm hover:underline'>
              {opt.label}
            </Link>
          );
        })}
      </div>
      <div className='flex gap-2'>
        <div className='md:block hidden'>
          <Button fill={false} size='sm'>
            <span className='leading-5'>Get Started</span>
            <ArrowRightIcon />
          </Button>
        </div>

        <Sheet>
          <SheetTrigger className='block md:hidden'>
            <HiBars3 size={24} />
          </SheetTrigger>
          <SheetContent side='top' className='bg-black text-white border-black'>
            <div className='space-y-6'>
              <div className='flex flex-col gap-4 text-sm'>
                {navOptions.map((item, index) => (
                  <div key={index} className='text-sm font-medium py-2'>
                    <SheetClose asChild>
                      <Link href={item.url}>{item.label}</Link>
                    </SheetClose>
                  </div>
                ))}
              </div>
              <Button fill={false} size='sm'>
                <span>Get Started</span>
                <ArrowRightIcon />
              </Button>
            </div>
          </SheetContent>
        </Sheet>
      </div>
    </div>
  );
}


import { Lightning } from '@/assets/landing-page-8/icons';
import Image from 'next/image';

const cardDetails = [
  {
    title: 'Quality apps',
    content: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    title: 'Quality apps',
    content: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    title: 'Quality apps',
    content: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    title: 'Quality apps',
    content: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    title: 'Quality apps',
    content: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    title: 'Quality apps',
    content: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
];

export default async function Features2() {
  return (
    <div className='flex flex-col md:py-32 py-16 items-center md:gap-20 gap-10'>
      <div className='flex flex-col gap-7 items-center max-md:max-w-80'>
        <div className='flex flex-col gap-4 items-center'>
          <h1 className='font-medium text-2xl md:text-4xl md:leading-[44px] max-w-xl text-center'>
            Essentially, <span className='text-[#005CE7]'>everything</span> you need to ship{' '}
            <span className='text-[#005CE7]'>you first AI App</span>
          </h1>
        </div>

        <span className='md:text-lg md:max-w-[642px] text-[#787878] text-center'>
          Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days. Save Hours of
          Effort and Use our robust Deployable code.
        </span>
      </div>

      <div className='flex md:grid grid-cols-3 flex-col md:gap-1.5 gap-4 flex-wrap'>
        {cardDetails.map((card, index) => {
          return (
            <div key={index} className='flex flex-col gap-6 md:p-6 md:pb-8 p-4 w-96 items-center'>
              <Image src={Lightning} width={25} height={25} alt='logo' className='size-6' />
              <div className='flex flex-col gap-4'>
                <h1 className='md:text-xl text-lg font-medium text-center'>{card.title}</h1>
                <p className='text-[#787878] text-center px-10'>{card.content}</p>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}


const pricingDetails = [
  {
    title: 'PRO',
    price: '$149',
    features: [
      'NextJS Boilerplate',
      'AI Modules',
      '5 Demo Apps',
      'GAuth & Magic Link',
      'Stripe & Lemon Squeezy Payments',
      'Privacy Policy & ToS',
    ],
  },
  {
    title: 'ULTIMATE',
    price: '$199',
    features: [
      'NextJS Boilerplate',
      'AI Modules',
      '5 Demo Apps',
      'GAuth & Magic Link',
      'Stripe & Lemon Squeezy Payments',
      'Privacy Policy & ToS',
      'Supabase',
      'Email Integration',
      'SEO',
      'App Admin Dashboard',
      'App Admin Advanced API Set Up on Digital Ocean',
    ],
  },
];

export default pricingDetails;


import Image from 'next/image';
import tick from '@/assets/landing-page-8/icons/tick.svg';
import Button from './Button';
import pricingDetails from './PricingConstants';
import { FaArrowRight } from 'react-icons/fa6';
export default function Pricing() {
  return (
    <div
      id='pricing'
      // eslint-disable-next-line tailwindcss/no-contradicting-classname
      className='bg-black bg-gradient-to-b to-[#090A18] to-25% from-[#5d67b378] flex flex-col md:gap-20 gap-10 items-center md:py-32 py-24 text-white'>
      <div className='flex flex-col gap-4 text-center'>
        <h1 className='md:text-4xl font-medium text-2xl'>Pricing</h1>
        <span className='text-[#787878]'>Start making smarter decisions, Choose a plan</span>
      </div>

      <div className='flex md:gap-6 gap-3 md:mx-2 flex-col md:flex-row '>
        {pricingDetails.map((plans) => {
          return (
            <div
              key={plans.title}
              className='bg-gradient-to-tl from-[#090A18] to-[#5D67B3] rounded-2xl h-fit md:w-[368px] w-80'>
              <div className='card flex flex-col gap-16 md:p-6 p-3 justify-start items-start bg-[#151627] rounded-2xl md:pt-12 pt-8 h-fit w-90 m-px'>
                <div className='flex flex-col md:gap-8 gap-6'>
                  <div className='flex flex-col gap-3'>
                    <h3 className='text-lg font-semibold'>{plans.title}</h3>
                    <div className='flex items-center'>
                      <span className='text-4xl font-semibold'>{plans.price}</span>
                      <span className='text-stone-500'>/month</span>
                    </div>
                  </div>

                  <div className='flex flex-col md:gap-4 gap-3'>
                    {plans.features.map((feat) => {
                      return (
                        <div key={feat} className='flex items-start gap-3 text-start'>
                          <Image src={tick} width={20} height={20} alt='icon' />
                          <span>{feat}</span>
                        </div>
                      );
                    })}
                  </div>
                </div>
                <Button fill={plans.title !== 'PRO' ? true : false} size='lg' className='w-full'>
                  Get now
                  <FaArrowRight />
                </Button>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}


import Image from 'next/image';
import features from '@/assets/landing-page-8/images/features.svg';

const cardDetails = [
  {
    title: 'Build your AI apps Fast',
    content:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
    url: features,
  },
  {
    title: 'Build your AI apps Fast',
    content:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
    url: features,
  },
  {
    title: 'Build your AI apps Fast',
    content:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
    url: features,
  },
];

export default async function Features() {
  return (
    <div id='features' className='flex justify-center'>
      <div className='md:max-w-6xl max-w-80 flex flex-col md:py-32 py-24 items-center md:gap-24 gap-16'>
        <div className='flex flex-col items-center gap-7 justify-between text-center'>
          <h1 className='md:text-4xl text-2xl font-medium max-w-lg flex flex-col md:gap-2'>
            <span>Explore the power of</span>
            <span>
              AI apps generation <span className='text-[#005CE7]'>Workflow</span>
            </span>
          </h1>

          <span className='text-[#787878] leading-6 md:text-lg max-w-[628px]'>
            Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days. Save Hours
            of Effort and Use our robust Deployable code.
          </span>
        </div>

        <div className='flex gap-4 flex-col md:flex-row '>
          {cardDetails.map((card) => (
            <div key={card.title} className='flex flex-col md:gap-6 gap-4'>
              <Image
                src={card.url}
                alt={card.title}
                width={400}
                height={400}
                className='bg-[#F2F1F960] rounded-sm'
              />
              <div className='text-center'>
                <h2 className='font-medium md:text-2xl text-xl mb-4'>{card.title}</h2>
                <span className='text-[#727272]'>{card.content}</span>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}


import Button from "./Button";
import { ArrowRightIcon } from "@radix-ui/react-icons";
import Link from "next/link";

const options = [
  {
    label: "About",
    url: "/about",
  },
  {
    label: "Company",
    url: "/company",
  },
  {
    label: "Press",
    url: "/press",
  },
  {
    label: "Contact",
    url: "/contact",
  },
  {
    label: "Product",
    url: "/product",
  },
  {
    label: "Careers",
    url: "/careers",
  },
  {
    label: "Blog",
    url: "/blog",
  },
  {
    label: "Press",
    url: "/press",
  },
  {
    label: "Newsletter",
    url: "/newsletter",
  },
  {
    label: "Story",
    url: "/story",
  },
  {
    label: "More",
    url: "/more",
  },
  {
    label: "More",
    url: "/more",
  },
];

export default function Footer() {
  return (
    // eslint-disable-next-line tailwindcss/no-contradicting-classname
    <div className="bg-black md:py-20 md:pb-28 md:px-[135px] px-8 py-10 bg-gradient-to-b from-[#090A18] from-80% to-[#313B827D]">
      <div className="flex flex-col md:gap-16 gap-8 ">
        <div className="flex justify-between flex-col md:flex-row gap-6 md:gap-0">
          <h1 className="font-medium text-white text-[26px] leading-[52px]">
            Get your AI apps built with blazing speed.
          </h1>
          <Button fill={false} size="lg">
            <span>Get Started</span>
            <ArrowRightIcon className="font-bolder" />
          </Button>
        </div>

        <hr className="border opacity-25"></hr>

        <div className="flex justify-between flex-col md:flex-row gap-10 md:gap-0">
          <div className="flex flex-col gap-8 max-w-96">
            <h1 className="font-medium text-2xl leading-6 text-[#FFFFFFB2]">
              BuilderKit.ai
            </h1>
            <span className="text-[#B0B2B8] md:text-lg">
              Highly modular NextJS AI Boilerplate that allows you to ship any
              AI Apps within days.
            </span>
            <p className="font-medium text-white">All rights reserved</p>
          </div>

          <div className="grid grid-cols-3 md:gap-x-[140px] gap-y-4 gap-x-10 text-[#B0B2B8] text-sm font-medium ">
            {options.map((option, index) => {
              return (
                <Link
                  href={option.url}
                  className="text-start hover:underline"
                  key={index}
                >
                  {option.label}
                </Link>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
}


import { cn } from "@/lib/utils";
import { ReactNode } from "react";

interface ButtonProps {
  children: ReactNode;
  fill?: boolean;
  size?: string;
  className?: string;
}

function Button({ children, fill, size, className }: ButtonProps) {
  return (
    <button
      className={cn(
        "flex hover:opacity-90 rounded-lg items-center shadow w-fit gap-2.5 text-sm",
        className,
        {
          "text-black bg-white ": fill,
          "text-white bg-[#21285D]": !fill,
          "px-2.5 h-8": size === "sm",
          "px-6 h-11": size == "md",
          "md:h-[52px] md:px-8 h-10 px-6 justify-center": size == "lg",
        }
      )}
    >
      {children}
    </button>
  );
}

export default Button;


import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

const accordion = [
  {
    title: 'What is buildekit?',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus ad vitae excepturi, necessitatibus ex eveniet deserunt eaque qui quisquam architecto sapiente dolorum. Eligendi ipsum perferendis corrupti quasi eius blanditiis beatae.',
  },
  {
    title: 'What do i get exactly?',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus ad vitae excepturi, necessitatibus ex eveniet deserunt eaque qui quisquam architecto sapiente dolorum. Eligendi ipsum perferendis corrupti quasi eius blanditiis beatae.',
  },
  {
    title: 'Who is builder kit for?',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus ad vitae excepturi, necessitatibus ex eveniet deserunt eaque qui quisquam architecto sapiente dolorum. Eligendi ipsum perferendis corrupti quasi eius blanditiis beatae.',
  },
  {
    title: 'Is it a website template?',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus ad vitae excepturi, necessitatibus ex eveniet deserunt eaque qui quisquam architecto sapiente dolorum. Eligendi ipsum perferendis corrupti quasi eius blanditiis beatae.',
  },
];

export default function FAQ() {
  return (
    <div id='faq' className='flex flex-col items-center md:py-32 md:gap-20 gap-10 py-16'>
      <div className='flex flex-col gap-6 items-center justify-around'>
        <h1 className='md:text-4xl font-medium text-2xl'>Frequently asked questions</h1>
        <p className='text-[#787878] px-10 md:px-0 text-center'>
          Don't worry, we got you. Here are some answers for your questions.
        </p>
      </div>
      <div className='flex flex-col items-start leading-8 '>
        {accordion.map((item, index) => {
          return (
            <Accordion type='single' collapsible key={index}>
              <AccordionItem value={item.title} className=' md:w-[780px] w-80 p-2 border-[#F3F3F3]'>
                <AccordionTrigger className='font-medium text-base md:h-16'>{item.title}</AccordionTrigger>
                <AccordionContent className='text-stone-400 text-sm'>{item.content}</AccordionContent>
              </AccordionItem>
            </Accordion>
          );
        })}
      </div>
    </div>
  );
}


import Hero from './Hero';
import Features from './Features';
import Features2 from './Features2';
import Pricing from './Pricing';
import Faq from './FAQ';
import Footer from './Footer';

export default async function LandingPage4() {
  return (
    <div className='bg-black text-white '>
      <Hero />
      <Features />
      <Features2 />
      <Pricing />
      <Faq />
      <Footer />
    </div>
  );
}


import Button from "./Button";
import Navbar from "./Navbar";
import { ArrowRightIcon } from "@radix-ui/react-icons";
import Image from "next/image";
import { hero } from "@/assets/landing-page-4/images";

export default function Hero() {
  return (
    <div className="flex flex-col items-center bg-gradient-hero-lp4">
      <Navbar />

      <div className="flex flex-col md:max-w-6xl w-full md:my-24 my-12 max-w-80">
        <div className="flex flex-col gap-4">
          <div className="bg-primary-[#262626] px-4 text-sm gap-2 rounded-lg font-semibold max-w-60 py-2 flex items-center">
            <span>Unlock Your Creative Spark</span>
            <ArrowRightIcon />
          </div>

          <div className="flex md:flex-row flex-col ">
            <div className="text-3xl md:text-6xl font-medium md:w-1/2 text-transparent bg-clip-text bg-gradient-to-b from-white to-[#BABABA] ">
              Generate AI Apps with ease
            </div>
            <div className="flex flex-col gap-5 md:w-1/2">
              <span className="text-stone-400 leading-7 md:text-base text-sm">
                Highly modular NextJS AI Boilerplate that allows you to ship any
                AI Apps within days. Save Hours of Effort and Use our robust
                Deployable code.
              </span>
              <Button fill={true} size="lg">
                Get Started
              </Button>
            </div>
          </div>
        </div>
      </div>

      <Image
        src={hero}
        width={800}
        height={500}
        alt="hero"
        className="max-w-80 md:max-w-6xl w-full"
      />
    </div>
  );
}


'use client';

import { ArrowRightIcon } from '@radix-ui/react-icons';
import Button from '../landing-page-4/Button';
import Image from 'next/image';
import { Sheet, SheetClose, SheetContent, SheetTrigger } from '@/components/ui/sheet';
import { HiBars3 } from 'react-icons/hi2';
import Link from 'next/link';

const navOptions = [
  {
    label: 'Features',
    url: '/#features',
  },
  {
    label: 'Product',
    url: '/#product',
  },
  {
    label: 'Pricing',
    url: '/#pricing',
  },
  {
    label: 'FAQ',
    url: '/#faq',
  },
];

export default function Navbar() {
  return (
    <div className='flex justify-between md:h-12 md:max-w-6xl mt-4 items-center w-full max-w-80'>
      <Link href='https://www.builderkit.ai'>
        <div className='flex items-center gap-2 w-fit'>
          <Image src='/lp4-logo.svg' width={40} height={40} alt='logo' />
        </div>
      </Link>

      <div className='md:flex hidden gap-4'>
        {navOptions.map((opt) => {
          return (
            <Link href={opt.url} key={opt.label} className='px-1 py-2.5 text-base leading-6  hover:underline'>
              {opt.label}
            </Link>
          );
        })}
      </div>
      <div className='flex gap-2'>
        <div className='md:block hidden'>
          <Button fill={false} size='sm'>
            <span className='leading-5'>Sign in</span>
          </Button>
        </div>

        <Sheet>
          <SheetTrigger className='block md:hidden'>
            <HiBars3 size={24} />
          </SheetTrigger>
          <SheetContent side='top' className='bg-black text-white border-black'>
            <div className='space-y-6'>
              <div className='flex flex-col gap-4'>
                {navOptions.map((item, index) => (
                  <div key={index} className='text-sm font-medium py-2'>
                    <SheetClose asChild>
                      <Link href={item.url}>{item.label}</Link>
                    </SheetClose>
                  </div>
                ))}
              </div>
              <Button fill={false} size='sm'>
                <span>Sign in</span>
                <ArrowRightIcon />
              </Button>
            </div>
          </SheetContent>
        </Sheet>
      </div>
    </div>
  );
}


import { LightningBoltIcon } from '@radix-ui/react-icons';

const cardDetails = [
  {
    title: 'Quality apps',
    content: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    title: 'Quality apps',
    content: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    title: 'Quality apps',
    content: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    title: 'Quality apps',
    content: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    title: 'Quality apps',
    content: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    title: 'Quality apps',
    content: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
];

export default function Features2() {
  return (
    <div className='bg-gradient-feat-lp4'>
      <div
        id='product'
        className=' flex bg-gradient-to-b from-black from-0% via-transparent to-black to-100% justify-center items-center md:py-56 py-28 '>
        <div className='flex flex-col gap-24 md:max-w-6xl max-w-80 items-center'>
          <div className='flex flex-col gap-7 font-medium text-center items-center'>
            <h1 className='md:max-w-xl md:text-4xl text-2xl'>
              Essentially, everything you need to ship you first AI App
            </h1>
            <span className='text-stone-400 md:max-w-2xl md:text-base text-sm'>
              Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days. Save Hours
              of Effort and Use our robust Deployable code.
            </span>
          </div>

          <div className='flex gap-4 flex-wrap'>
            {cardDetails.map((card) => {
              return (
                <div
                  key={card.title}
                  className='rounded-lg flex flex-col p-6 gap-5 border border-[#171717] max-w-[366px]'>
                  <LightningBoltIcon className='size-6 text-[#94989E]' />
                  <div className='gap-2 flex flex-col '>
                    <h3 className='leading-6 font-medium'>{card.title}</h3>
                    <span className='text-stone-400 text-sm'>{card.content}</span>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
}


import Image from "next/image";
import Tick from "@/assets/landing-page-4/icons/tick.svg";
import Button from "./Button";
import { ArrowRightIcon } from "@radix-ui/react-icons";
import { cn } from "@/lib/utils";

const features = [
  { feature: "NextJS Boilerplate", available: true },
  { feature: "AI Modules", available: true },
  { feature: "5 Demo Apps", available: true },
  { feature: "GAuth & Magic Link", available: false },
  { feature: "Stripe & Lemon Squeezy Payments", available: false },
  { feature: "Privacy Policy & ToS", available: false },
];

export default function Pricing() {
  return (
    <div id="pricing" className="flex justify-center md:py-20 py-10">
      <div className="flex flex-col gap-20 md:max-w-6xl max-w-80 items-center">
        <h1 className="md:text-4xl text-2xl text-center max-w-[560px] font-medium">
          Start making smarter decisions, Choose a plan
        </h1>
        <div className="flex gap-4 md:flex-row flex-col">
          <div className="border border-[#171717] rounded-lg flex gap-12 px-1 py-8 items-center md:flex-row flex-col bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-[#69FFF61A] from-10% to-black w-full">
            <div className="flex flex-col gap-6 items-center flex-1">
              <div className="flex flex-col gap-2">
                <h3 className="font-semibold text-center">PRO</h3>
                <div className="font-semibold text-[40px] leading-[50px]">
                  <span className="">$149</span>
                  <span className="text-stone-400">/mo</span>
                </div>
              </div>
              <Button fill={false} size="md">
                Buy Now <ArrowRightIcon />
              </Button>
            </div>

            <div className="flex flex-col gap-4 max-w-72 flex-1">
              {features.map((feat) => {
                return (
                  <div
                    key={feat.feature}
                    className={cn("flex gap-2 items-start", {
                      "text-stone-400": !feat.available,
                    })}
                  >
                    <Image
                      src={Tick}
                      alt="tick"
                      width={20}
                      height={20}
                      className={cn({ "opacity-70": !feat.available })}
                    />
                    <span className={cn("font-medium leading-6 -mt-0.5")}>
                      {feat.feature}
                    </span>
                  </div>
                );
              })}
            </div>
          </div>

          <div className="border border-[#171717] rounded-lg flex gap-12 px-4 py-8 items-center md:flex-row flex-col bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-[#FF2BAA29] from-10% to-black w-full ">
            <div className="flex flex-col gap-6 items-center flex-1">
              <div className="flex flex-col gap-2">
                <h3 className="font-semibold text-center">PRO</h3>
                <div className="font-semibold text-[40px] leading-[50px]">
                  <span className="">$149</span>
                  <span className="text-stone-400">/mo</span>
                </div>
              </div>
              <Button fill={true} size="md">
                Buy Now <ArrowRightIcon />
              </Button>
            </div>

            <div className="flex flex-col gap-4 max-w-72 flex-1">
              {features.map((feat) => {
                return (
                  <div
                    key={feat.feature}
                    className={cn("flex gap-2 items-start")}
                  >
                    <Image src={Tick} alt="tick" width={20} height={20} />
                    <span className={cn("font-medium leading-6 -mt-0.5")}>
                      {feat.feature}
                    </span>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


import Image from 'next/image';
import { features } from '@/assets/landing-page-4/images';

const cardDetails = [
  {
    title: 'Build your AI apps Fast',
    content: 'Builderkit takes care of everything, get your production-ready app within hours.',
    url: features,
  },
  {
    title: 'Build your AI apps Fast',
    content: 'Builderkit takes care of everything, get your production-ready app within hours.',
    url: features,
  },
  {
    title: 'Build your AI apps Fast',
    content: 'Builderkit takes care of everything, get your production-ready app within hours.',
    url: features,
  },
];

export default async function Features() {
  return (
    <div id='features' className='flex justify-center'>
      <div className='md:max-w-6xl max-w-80 flex flex-col md:mt-56 mt-24 items-center gap-24'>
        <div className='flex flex-col items-center gap-7 justify-between text-center'>
          <h1 className='md:text-4xl text-2xl font-medium max-w-lg flex flex-col gap-2'>
            <span>Explore the power of</span>
            <span>AI apps generation Workflow</span>
          </h1>
          <span className='text-stone-400 leading-6 max-w-2xl'>
            Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days. Save Hours
            of Effort and Use our robust Deployable code.
          </span>
        </div>

        <div className='flex gap-4 flex-col md:flex-row '>
          {cardDetails.map((card) => {
            return (
              <div
                key={card.title}
                className='rounded-2xl flex flex-col md:flex md:gap-8 gap-4 border border-[#171717] md:pt-8 md:pb-4 pb-2 pt-4 md:px-4 px-2'>
                <div className='gap-4 flex flex-col text-center'>
                  <h2 className='font-medium md:text-2xl text-xl'>{card.title}</h2>
                  <span className='text-stone-400 text-sm'>{card.content}</span>
                </div>

                <Image src={card.url} alt={card.title} width={400} height={400} className='rounded-xl' />
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
}


import Button from "./Button";
import { ArrowRightIcon } from "@radix-ui/react-icons";
import Link from "next/link";

const options = [
  {
    label: "About",
    url: "/about",
  },
  {
    label: "Company",
    url: "/company",
  },
  {
    label: "Press",
    url: "/press",
  },
  {
    label: "Contact",
    url: "/contact",
  },
  {
    label: "Product",
    url: "/product",
  },
  {
    label: "Careers",
    url: "/careers",
  },
  {
    label: "Blog",
    url: "/blog",
  },
  {
    label: "Press",
    url: "/press",
  },
  {
    label: "Newsletter",
    url: "/newsletter",
  },
  {
    label: "Story",
    url: "/story",
  },
  {
    label: "More",
    url: "/more",
  },
  {
    label: "More",
    url: "/more",
  },
];

export default function Footer() {
  return (
    <div className=" md:mt-[208px] mt-24 md:py-20 md:px-32 px-8 py-5">
      <div className="flex flex-col md:gap-16 gap-8 ">
        <div className="flex justify-between flex-col md:flex-row gap-6 md:gap-0">
          <h1 className="font-medium md:text-4xl text-white max-w-[613px] text-2xl">
            Get your AI apps built with blazing speed.
          </h1>
          <Button fill={true} size="md">
            <span>Get Started</span>
            <ArrowRightIcon className="font-bolder" />
          </Button>
        </div>

        <hr className="border opacity-25"></hr>

        <div className="flex justify-between flex-col md:flex-row gap-10 md:gap-0">
          <div className="flex flex-col gap-8 max-w-[300px]">
            <h1 className="font-medium text-2xl leading-6 text-stone-300">
              BuilderKit.ai
            </h1>
            <span className="text-stone-400">
              Highly modular NextJS AI Boilerplate that allows you to ship any
              AI Apps within days.
            </span>
            <p className="font-medium text-white">All rights reserved</p>
          </div>

          <div className="grid grid-cols-3 md:gap-x-[140px] gap-y-4 gap-x-10 text-stone-400 text-sm font-medium ">
            {options.map((option, index) => {
              return (
                <Link
                  href={option.url}
                  className="text-start hover:underline"
                  key={index}
                >
                  {option.label}
                </Link>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
}


import { cn } from "@/lib/utils";
import { ReactNode } from "react";

interface ButtonProps {
  children: ReactNode;
  fill?: boolean;
  size?: string;
}

function Button({ children, fill, size }: ButtonProps) {
  return (
    <button
      className={cn(
        "flex hover:opacity-90 rounded-lg items-center shadow w-fit",
        {
          "text-black bg-white ": fill,
          "text-white bg-[#262626]": !fill,
          "px-2.5 h-8": size === "sm",
          "px-4 h-11": size == "md",
          "md:h-11 md:px-5 h-8 px-3 rounded-xl": size == "lg",
        }
      )}
    >
      {children}
    </button>
  );
}

export default Button;


import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

const accordion = [
  {
    title: 'What is buildekit?',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus ad vitae excepturi, necessitatibus ex eveniet deserunt eaque qui quisquam architecto sapiente dolorum. Eligendi ipsum perferendis corrupti quasi eius blanditiis beatae.',
  },
  {
    title: 'What do i get exactly?',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus ad vitae excepturi, necessitatibus ex eveniet deserunt eaque qui quisquam architecto sapiente dolorum. Eligendi ipsum perferendis corrupti quasi eius blanditiis beatae.',
  },
  {
    title: 'Who is builder kit for?',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus ad vitae excepturi, necessitatibus ex eveniet deserunt eaque qui quisquam architecto sapiente dolorum. Eligendi ipsum perferendis corrupti quasi eius blanditiis beatae.',
  },
  {
    title: 'Is it a website template?',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus ad vitae excepturi, necessitatibus ex eveniet deserunt eaque qui quisquam architecto sapiente dolorum. Eligendi ipsum perferendis corrupti quasi eius blanditiis beatae.',
  },
];

export default function FAQ() {
  return (
    <div id='faq' className='flex flex-col items-center md:py-20 md:gap-20 gap-10 py-10'>
      <div className='flex flex-col gap-6 items-center justify-around'>
        <h1 className='md:text-4xl font-medium text-2xl'>Frequently asked questions</h1>
        <p className='text-stone-400 px-10 md:px-0 text-center'>
          Don't worry, we got you. Here are some answers for your questions.
        </p>
      </div>
      <div className='flex flex-col items-start leading-8 '>
        {accordion.map((item, index) => {
          return (
            <Accordion type='single' collapsible key={index}>
              <AccordionItem
                value={item.title}
                className=' md:w-[780px] w-80 p-2 border-b-stone-800 border-b'>
                <AccordionTrigger className='font-medium text-base'>{item.title}</AccordionTrigger>
                <AccordionContent className='text-stone-400 md:text-base'>{item.content}</AccordionContent>
              </AccordionItem>
            </Accordion>
          );
        })}
      </div>
    </div>
  );
}


// This is the entry component for the landing page of the application.
// It sequentially renders the primary sections of the landing page including Hero, Features, Product, Pricing, Faq, and Footer components.

import Navbar from "./Navbar";
import Hero from "./Hero";
import FeaturedOn from "./FeaturedOn";
import HowTo from "./HowTo";
import Pricing from "./Pricing/Pricing";
import Help from "./Help";
import Footer from "./Footer";

export default async function LandingPage3() {
  return (
    <>
      <div className="bg-gradient-to-r from-[#52BDAA33] from-20% via-white  to-[#52BDAA33] to-80%">
        <Navbar />
        <Hero />
      </div>
      <FeaturedOn />
      <HowTo />
      <Pricing />
      <Help />
      <Footer />
    </>
  );
}


import {
  Notion,
  Grammarly,
  Intercom,
  Unsplash,
  Descript,
} from "@/assets/landing-page-3/images";
import Image from "next/image";

export default async function FeaturedOn() {
  const imageSrc = [Unsplash, Notion, Intercom, Descript, Grammarly];

  return (
    <div
      id="testimonials"
      className="flex justify-center flex-col items-center text-2xl md:gap-16 md:my-40 my-20 gap-8"
    >
      <span className=" font-semibold text-center text-lg md:text-2xl">
        More than 25,000 teams use Builderkit
      </span>
      <div className="flex justify-center md:gap-10 flex-wrap gap-5">
        {imageSrc.map((src, index) => {
          return (
            <Image key={index} src={src} width={125} height={125} alt="logo" />
          );
        })}
      </div>
    </div>
  );
}


import Image from "next/image";
import HeroImage from "@/assets/landing-page-3/images/hero.svg";
import { ArrowRightIcon, VideoIcon } from "@radix-ui/react-icons";
import Button from "../landing-page-3/Button";

export default async function Hero() {
  const heading = "Generate AI Apps with Ease";
  const content =
    "Let's make your work more organize and easily using the Dashboard with many of the latest features in managing work every day.";

  return (
    <div className="flex w-full justify-center ">
      <div className="flex flex-col w-full items-center md:mt-14 mt-8 ">
        <div className="flex flex-col gap-8 max-w-[625px] items-center py-2.5 text-center">
          <span className="md:text-6xl text-3xl font-semibold px-10 bg-gradient-to-b from-black from-60% to-[#929292] bg-clip-text text-transparent">
            {heading}
          </span>
          <span className="text-stone-500 leading-7 px-2.5 text-sm md:text-base text-balance">
            {content}
          </span>
          <div className="flex gap-4 justify-center leading-5">
            <Button>
              <span>Start Creating</span>
              <ArrowRightIcon></ArrowRightIcon>
            </Button>
            <button className="rounded-lg border flex gap-2 items-center md:px-6 px-3 py-2 shadow text-xs hover:opacity-80 md:text-base bg-white">
              <span>Watch Demo</span>
              <VideoIcon></VideoIcon>
            </button>
          </div>
        </div>
        <Image
          src={HeroImage}
          width={500}
          height={500}
          alt="hero"
          className=" w-full md:px-24 px-4 md:mt-14 mt-8"
        />
      </div>
    </div>
  );
}


'use client';

import { ArrowRightIcon } from '@radix-ui/react-icons';
import Button from '../landing-page-3/Button';
import Image from 'next/image';
import { Sheet, SheetClose, SheetContent, SheetTrigger } from '@/components/ui/sheet';
import { HiBars3 } from 'react-icons/hi2';
import Link from 'next/link';

const navOptions = [
  {
    label: 'Features',
    url: '/#features',
  },
  {
    label: 'Product',
    url: '/#product',
  },
  {
    label: 'Testimonials',
    url: '/#testimonials',
  },
  {
    label: 'FAQ',
    url: '/#faq',
  },
];

export default function Navbar() {
  return (
    <div className='flex justify-between md:px-16  px-4 md:h-20 items-center h-12'>
      <Link href='https://www.builderkit.ai'>
        <div className='flex items-center gap-2 w-fit'>
          <Image src='/lp3-logo.png' width={140} height={140} alt='logo' />
        </div>
      </Link>

      <div className='hidden md:flex gap-4'>
        {navOptions.map((opt) => {
          return (
            <Link href={opt.url} key={opt.label} className='px-1 py-2.5 text-base leading-6  hover:underline'>
              {opt.label}
            </Link>
          );
        })}
      </div>
      <div>
        <div className='hidden md:block'>
          <Button>
            <span className='leading-5'>Sign Up</span>
            <ArrowRightIcon />
          </Button>
        </div>

        <Sheet>
          <SheetTrigger className='block md:hidden'>
            <HiBars3 size={24} />
          </SheetTrigger>
          <SheetContent side='top' className=''>
            <div className='space-y-6'>
              <div className='flex flex-col gap-4'>
                {navOptions.map((item, index) => (
                  <div key={index} className='text-sm font-medium py-2'>
                    <SheetClose asChild>
                      <Link href={item.url}>{item.label}</Link>
                    </SheetClose>
                  </div>
                ))}
              </div>
              <Button>
                <span>Sign Up</span>
                <ArrowRightIcon />
              </Button>
            </div>
          </SheetContent>
        </Sheet>
      </div>
    </div>
  );
}


import { Button } from "@/components/ui/button";
import { ArrowRightIcon } from "@radix-ui/react-icons";
import Link from "next/link";

const options = [
  {
    label: "About",
    url: "/about",
  },
  {
    label: "Company",
    url: "/company",
  },
  {
    label: "Press",
    url: "/press",
  },
  {
    label: "Contact",
    url: "/contact",
  },
  {
    label: "Product",
    url: "/product",
  },
  {
    label: "Careers",
    url: "/careers",
  },
  {
    label: "Blog",
    url: "/blog",
  },
  {
    label: "Press",
    url: "/press",
  },
  {
    label: "Newsletter",
    url: "/newsletter",
  },
  {
    label: "Story",
    url: "/story",
  },
  {
    label: "More",
    url: "/more",
  },
  {
    label: "More",
    url: "/more",
  },
];

export default function Footer() {
  return (
    <div className=" mt-[208px] md:py-20 md:px-32 bg-[#062B1C] px-8 py-10">
      <div className="flex flex-col md:gap-16 gap-8 ">
        <div className="flex justify-between flex-col gap-6 md:gap-0 md:flex-row">
          <h1 className="font-medium md:text-4xl text-white max-w-[613px] text-2xl">
            Get your AI apps built with blazing speed.
          </h1>
          <Button className="bg-white hover:bg-white hover:opacity-80 rounded-full flex md:gap-2 gap-1  md:px-8 leading-6 px-2 text-black font-semibold md:text-base text-sm md:h-14 h-10">
            <span>Get Started</span>
            <ArrowRightIcon></ArrowRightIcon>
          </Button>
        </div>

        <hr className="border opacity-25"></hr>

        <div className="flex justify-between flex-col gap-10 md:flex-row md:gap-0">
          <div className="flex flex-col gap-8 max-w-[300px]">
            <h1 className="font-medium text-2xl leading-6 text-stone-300">
              BuilderKit.ai
            </h1>
            <span className="text-stone-400">
              Highly modular NextJS AI Boilerplate that allows you to ship any
              AI Apps within days.
            </span>
            <p className="font-medium text-white">All rights reserved</p>
          </div>

          <div className="grid grid-cols-3 md:gap-x-[140px] gap-y-4 gap-x-10 text-stone-400 text-sm font-medium ">
            {options.map((option, index) => {
              return (
                <Link
                  href={option.url}
                  className="text-start hover:underline"
                  key={index}
                >
                  {option.label}
                </Link>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
}


import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

const heading = 'Need Help?';
const content = "Don't worry, we got you. Here are some answers for your questions.";

const accordion = [
  {
    title: 'What is buildekit?',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus ad vitae excepturi, necessitatibus ex eveniet deserunt eaque qui quisquam architecto sapiente dolorum. Eligendi ipsum perferendis corrupti quasi eius blanditiis beatae.',
  },
  {
    title: 'lorem ipsum dolor sit amet?',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus ad vitae excepturi, necessitatibus ex eveniet deserunt eaque qui quisquam architecto sapiente dolorum. Eligendi ipsum perferendis corrupti quasi eius blanditiis beatae.',
  },
  {
    title: 'lorem ipsum dolor sit amet?',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus ad vitae excepturi, necessitatibus ex eveniet deserunt eaque qui quisquam architecto sapiente dolorum. Eligendi ipsum perferendis corrupti quasi eius blanditiis beatae.',
  },
  {
    title: 'lorem ipsum dolor sit amet?',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus ad vitae excepturi, necessitatibus ex eveniet deserunt eaque qui quisquam architecto sapiente dolorum. Eligendi ipsum perferendis corrupti quasi eius blanditiis beatae.',
  },
  {
    title: 'lorem ipsum dolor sit amet?',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus ad vitae excepturi, necessitatibus ex eveniet deserunt eaque qui quisquam architecto sapiente dolorum. Eligendi ipsum perferendis corrupti quasi eius blanditiis beatae.',
  },
  {
    title: 'lorem ipsum dolor sit amet?',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus ad vitae excepturi, necessitatibus ex eveniet deserunt eaque qui quisquam architecto sapiente dolorum. Eligendi ipsum perferendis corrupti quasi eius blanditiis beatae.',
  },
];

export default function Help() {
  return (
    <div id='faq' className='flex flex-col items-center md:py-20 md:gap-20 gap-10 py-10'>
      <div className='flex flex-col gap-6 items-center justify-around'>
        <h1 className='md:text-4xl font-medium text-2xl'>{heading}</h1>
        <p className='text-stone-500 px-10 md:px-0 text-center'>{content}</p>
      </div>
      <div className='flex flex-col gap-4 items-start leading-8 '>
        {accordion.map((item, index) => {
          return (
            <Accordion type='single' collapsible key={index}>
              <AccordionItem value={item.title} className=' md:w-[640px] w-80 border-b-0'>
                <AccordionTrigger className='font-medium text-base'>{item.title}</AccordionTrigger>
                <AccordionContent className='text-stone-500 text-sm bg-[#F4FFF5] border-t border-t-[#F1F1F1] p-2'>
                  {item.content}
                </AccordionContent>
              </AccordionItem>
            </Accordion>
          );
        })}
      </div>
    </div>
  );
}


import { ReactNode } from "react";

interface ButtonProps {
  children: ReactNode;
}

export default function Button({ children }: ButtonProps) {
  return (
    <button className="flex md:px-6 gap-2 bg-[#26AB75] hover:opacity-90 px-3 md:h-12 text-xs md:text-base text-white rounded-lg items-center shadow h-8">
      {children}
    </button>
  );
}


import { howTo } from "@/assets/landing-page-3/images";
import Image from "next/image";

export default async function HowTo() {
  return (
    <div
      id="about"
      className="flex flex-col md:px-32 px-8 my-40 gap-20 items-center"
    >
      <div className="flex flex-col gap-6 items-center ">
        <h1 className="md:text-4xl text-xl font-medium">
          Revolutionize your workflow
        </h1>
        <span className="text-stone-500 text-sm md:text-base max-w-2xl text-center text-balance ">
          Highly modular NextJS AI Boilerplate that allows you to ship any AI
          Apps within days. Save Hours of Effort and Use our robust Deployable
          code.
        </span>
      </div>
      <div className="flex md:gap-4 gap-2 flex-col md:flex-row">
        {[0, 1, 2].map((i) => {
          return (
            <div className="flex flex-col md:gap-6 gap-3 max-w-96" key={i}>
              <Image
                src={howTo}
                width={500}
                height={500}
                alt="how-to"
                className="w-full"
              />
              <div className="flex flex-col gap-3">
                <h3 className="font-medium md:text-2xl text-xl">
                  Build your AI apps fast
                </h3>
                <span className="text-stone-500 text-sm md:text-base">
                  Builderkit takes care of everything from authentication to
                  payments, get your production-ready app within hours.
                </span>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}


import free from '@/assets/landing-page-3/icons/free.svg';
import pro from '@/assets/landing-page-3/icons/pro.svg';
import ultimate from '@/assets/landing-page-3/icons/ultimate.svg';
const pricingDetails = [
  {
    icon: free,
    title: 'Free',
    price: '$0',
    description: 'A free plan grants you access to some cool features of Spend.In.',
    features: [
      { feature: 'NextJS Boilerplate', available: true },
      { feature: 'AI Modules', available: true },
      { feature: '5 Demo Apps', available: true },
      { feature: 'GAuth & Magic Link', available: false },
      { feature: 'Stripe & Lemon Squeezy Payments', available: false },
      { feature: 'Privacy Policy & ToS', available: false },
      { feature: 'Supabase', available: false },
      { feature: 'SEO', available: false },
      { feature: 'Email Integration', available: false },
      { feature: 'App Admin Dashboard', available: false },
    ],
  },
  {
    icon: pro,
    title: 'Pro',
    price: '$149',
    description: 'For professional only! Start arranging your expenses with our best templates.',
    features: [
      { feature: 'NextJS Boilerplate', available: true },
      { feature: 'AI Modules', available: true },
      { feature: '5 Demo Apps', available: true },
      { feature: 'GAuth & Magic Link', available: true },
      { feature: 'Stripe & Lemon Squeezy Payments', available: true },
      { feature: 'Privacy Policy & ToS', available: true },
      { feature: 'Supabase', available: false },
      { feature: 'SEO', available: false },
      { feature: 'Email Integration', available: false },
      { feature: 'App Admin Dashboard', available: false },
    ],
  },
  {
    icon: ultimate,
    title: 'Ultimate',
    price: '$199',
    description: 'If you a finance manager at big company, this plan is a perfect match.',
    features: [
      { feature: 'NextJS Boilerplate', available: true },
      { feature: 'AI Modules', available: true },
      { feature: '5 Demo Apps', available: true },
      { feature: 'GAuth & Magic Link', available: true },
      { feature: 'Stripe & Lemon Squeezy Payments', available: true },
      { feature: 'Privacy Policy & ToS', available: true },
      { feature: 'Supabase', available: true },
      { feature: 'Email Integration', available: true },
      { feature: 'SEO', available: true },
      { feature: 'App Admin Dashboard', available: true },
      { feature: 'App Admin Advanced API Set Up on Digital Ocean', available: true },
      { feature: 'Advanced Features', available: true },
      { feature: 'Discord Community', available: true },
    ],
  },
];

export default pricingDetails;


"use client";

import { Discount } from "@/assets/landing-page-3/images";
import Image from "next/image";
import pricingDetails from "./PricingConstants";
import tick from "@/assets/landing-page-3/icons/tick-circle.svg";
import cross from "@/assets/landing-page-3/icons/close-circle.svg";
import { Button } from "@/components/ui/button";
import { useState } from "react";
import ToggleSwitch from "./ToggleSwitch";
import { cn } from "@/lib/utils";
const heading = "Ready to Get Started?";
const content = "Choose a plan that suits your business";

export default function Pricing() {
  const [checked, setChecked] = useState(false);

  return (
    <div
      id="Pricing"
      className="md:px-32 flex flex-col gap-12 justify-center items-center text-center px-8 my-40"
    >
      <div className="flex flex-col gap-4">
        <h1 className="md:text-4xl font-medium text-2xl">{heading}</h1>
        <span className="text-stone-500">{content}</span>
      </div>

      <div className="flex flex-col">
        <div className="flex font-medium gap-4 md:text-xl text-lg items-center">
          <span>Monthly</span>
          <ToggleSwitch
            isToggled={checked}
            handleToggle={() => setChecked(!checked)}
          />
          <span>Yearly</span>
        </div>
        <div className="ml-auto flex">
          <Image src={Discount} width={150} height={150} alt="discount"></Image>
        </div>
      </div>

      <div className="flex gap-3 md:mx-2 flex-col md:flex-row">
        {pricingDetails.map((plans, index) => {
          return (
            <div
              key={index}
              className="flex flex-col gap-7 border border-stone-200 rounded-lg md:p-8 p-4  justify-start items-start h-fit max-w-96 "
            >
              <div className="flex flex-col gap-3">
                <div className="flex gap-2 items-center">
                  <Image
                    src={plans.icon}
                    width={35}
                    height={40}
                    alt="icon"
                  ></Image>
                  <h3 className="text-3xl font-medium max-md:text-xl">
                    {plans.title}
                  </h3>
                </div>
                <span className="text-stone-500 text-sm">
                  Perfect plan to get started
                </span>
              </div>

              <div className="flex items-center">
                <span className="md:text-4xl font-semibold text-2xl">
                  {!checked
                    ? plans.price
                    : "$" +
                      Math.round(Number(plans.price.substring(1)) * 12 * 0.35)}
                </span>
                <span className="text-stone-500">
                  {checked ? "/yearly" : "/month"}
                </span>
              </div>

              <div className="text-stone-500 text-start text-sm md:text-base">
                {plans.description}
              </div>

              <div className="flex flex-col gap-5 ">
                {plans.features.map((feat) => {
                  return (
                    <div key={feat.feature} className="flex gap-3 text-start">
                      <Image
                        src={feat.available ? tick : cross}
                        width={20}
                        height={20}
                        alt="icon"
                      ></Image>
                      <span
                        className={cn("md:text-lg", {
                          "text-stone-500": !feat.available,
                        })}
                      >
                        {feat.feature}
                      </span>
                    </div>
                  );
                })}
              </div>
              <div className="w-full">
                <Button className="bg-[#009429] hover:bg-[#009429] text-sm text-white w-full h-12 rounded-lg">
                  Get Started
                </Button>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}


import { cn } from "@/lib/utils";
import { FC } from "react";

interface ToggleSwitchProps {
  isToggled: boolean;
  handleToggle: () => void;
}

const ToggleSwitch: FC<ToggleSwitchProps> = ({ isToggled, handleToggle }) => {
  return (
    <div
      onClick={handleToggle}
      className={cn(
        "cursor-pointer md:w-16 md:h-9 w-14 h-7 p-1 rounded-full md:p-2 transition-colors duration-100 ease-in-out",
        {
          "bg-[#009429]": isToggled,
          "bg-gray-400": !isToggled,
        }
      )}
    >
      <div
        className={cn(
          "bg-white size-5 rounded-full transition-transform duration-300 ease-in-out pointer-events-none",
          {
            "translate-x-7": isToggled,
            "translate-x-0": !isToggled,
          }
        )}
      />
    </div>
  );
};

export default ToggleSwitch;


// This is the entry component for the landing page of the application.
// It sequentially renders the primary sections of the landing page including Hero, Features, Product, Pricing, Faq, and Footer components.

import Faq from '@/components/landing-pages/landing-page-2/Faq';
import Features from '@/components/landing-pages/landing-page-2/Features';
import Footer from '@/components/landing-pages/landing-page-2/Footer';
import Hero from '@/components/landing-pages/landing-page-2/Hero';
import Product from '@/components/landing-pages/landing-page-2/Product';
import Pricing from '@/components/landing-pages/landing-page-2/pricing/Pricing';

export default async function LandingPage2() {
  return (
    <>
      <Hero />
      <Features />
      <Product />
      <Pricing />
      <Faq />
      <Footer />
    </>
  );
}


// This component renders the main hero section of the landing page which is designed to grab the visitor's attention.
// It includes a navigation bar, a headline, a detailed subtext that explains the product briefly, and a call-to-action button.

import Navbar from '@/components/landing-pages/landing-page-2/Navbar';
import Image from 'next/image';
import HeroImage from '@/assets/landing-page-2/images/hero.png';
import Link from 'next/link';
import { ArrowRightIcon } from '@radix-ui/react-icons';

export default async function Hero() {
  return (
    <div className='bg-gradient-to-b from-[#FFFFFF33] to-[#FFD6B033]'>
      <div className='max-w-7xl mx-auto'>
        <Navbar />

        <div className='flex flex-col gap-6 sm:gap-8 py-8 md:py-14 px-4 items-center justify-center mx-auto max-w-3xl'>
          <h1 className='font-semibold text-[#262626] leading-[67px] tracking-[-2.5px] text-6xl max-sm:text-4xl text-center'>
            Generate modular <span className='text-lp2-primary'>AI Apps with ease and pace</span>{' '}
          </h1>

          <p className='text-lp2-secondary text-center sm:text-lg leading-7'>
            Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days. Save Hours
            of Effort and Use our robust Deployable code.
          </p>
          <Link
            href='/login'
            className='flex gap-2.5 justify-center items-center text-white rounded-lg bg-gradient-to-t px-6 py-3 from-lp2-primary to-lp2-primary/80 max-sm:mb-8'>
            Get Started <ArrowRightIcon className='mt-0.5' />
          </Link>
        </div>
        <div className='w-full max-md:px-7 px-3 md:mt-5'>
          <Image src={HeroImage} alt='hero' />
        </div>
      </div>
    </div>
  );
}


// This component serves as the navigation bar for the application, which appears across various pages.
// It dynamically adjusts to display different links based on the user's authentication status and screen size.
// The component uses both responsive and conditional rendering techniques for optimization across devices.

import Link from "next/link";

import {
  Sheet,
  SheetClose,
  SheetContent,
  SheetTrigger,
} from "@/components/ui/sheet";
import { HiBars3 } from "react-icons/hi2";
import { ArrowRightIcon } from "@radix-ui/react-icons";
import Image from "next/image";

const navbarRoutes = [
  { label: "Features", url: "/#features" },
  { label: "Product", url: "/#product" },
  { label: "Pricing", url: "/#pricing" },
  { label: "FAQ", url: "/#faq" },
];

export default async function Navbar() {
  return (
    <div className="max-w-7xl mx-auto bg-white">
      <div className="w-full flex justify-between items-center p-4">
        <Link href="https://www.builderkit.ai">
          <div className="flex items-center gap-2 w-fit">
            <Image src="/lp2-logo.svg" width={140} height={140} alt="logo" />
          </div>
        </Link>

        <ul className="hidden md:flex items-center gap-6">
          {navbarRoutes.map((item, index) => (
            <li key={index} className="text-sm font-medium ">
              <Link href={item.url} className="hover:underline text-[#4B5563]">
                {item.label}
              </Link>
            </li>
          ))}
        </ul>

        {/* Conditional button that changes based on user status. */}
        <button className="hidden md:flex justify-center items-center text-white rounded-lg  bg-gradient-to-t h-12 px-6 from-lp2-primary to-lp2-primary/70">
          Get Started <ArrowRightIcon className="ml-2" />
        </button>

        <Sheet>
          <SheetTrigger className="block md:hidden -mr-3 mb-3">
            <HiBars3 size={24} />
          </SheetTrigger>
          <SheetContent side="top" className="px-5">
            <div className="space-y-6">
              <div className="flex flex-col gap-4">
                {navbarRoutes.map((item, index) => (
                  <div key={index} className="text-sm font-medium py-2">
                    <SheetClose asChild>
                      <Link href={item.url}>{item.label}</Link>
                    </SheetClose>
                  </div>
                ))}
              </div>
              <button className="rounded-lg px-6 py-3 text-white justify-center w-full flex border bg-gradient-to-t from-lp2-primary to-lp2-primary/80">
                Sign Up
              </button>
            </div>
          </SheetContent>
        </Sheet>
      </div>
    </div>
  );
}


// Product component of landing page

import StarIcon from '@/assets/landing-page-2/icons/StarIcon';

const cardContent = [
  {
    icon: StarIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: StarIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: StarIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: StarIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: StarIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: StarIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
];

export default async function Product() {
  return (
    <div id='product' className=' mx-auto p-4 mb-12'>
      <div className='max-w-6xl flex flex-col justify-center items-center mx-auto py-20 space-y-20'>
        <div className='space-y-7 max-w-2xl'>
          <p className='font-semibold sm:leading-tight max-w-screen-sm px-2 tracking-tighter text-3xl sm:text-5xl text-center '>
            <span className='text-lp2-primary'>Essentially </span> , everything you need to ship you first AI
            App
          </p>
        </div>

        <div className='grid grid-cols-1 mx-auto xl:w-full lg:w-[870px] md:grid-cols-2 xl:grid-cols-3 gap-6 md:gap-8'>
          {cardContent.map((item, index) => (
            <div key={index} className='rounded-3xl md:max-w-[360px] shadow border border-[#E5E7EB] p-6'>
              <div>
                <item.icon />
              </div>
              <div>
                <p className='text-2xl leading-7 mt-10 font-semibold tracking-[-2%]'>{item.title}</p>
                <p className='text-lp2-secondary mt-4 pr-2'>{item.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}


// Features component to display the services provided by the application in the landing page.

import ServiceImageIcon1 from '@/assets/landing-page-2/icons/DesignerIcon';

const cardContent = [
  {
    icon: ServiceImageIcon1,
    colorText: 'Fast',
    title: 'Build your AI apps',
    description:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
  },
  {
    icon: ServiceImageIcon1,
    colorText: 'Fast',
    title: 'Build your AI apps',
    description:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
  },
  {
    icon: ServiceImageIcon1,
    colorText: 'Fast',
    title: 'Build your AI apps',
    description:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
  },
];

export default async function Features() {
  return (
    <div id='features' className='max-w-6xl mx-auto p-4 space-y-[72px] my-20'>
      <div className='flex flex-col items-center justify-center'>
        <div className='space-y-7 max-w-3xl'>
          <p className='text-center text-[#1C1C1C] max-w-lg mx-auto text-5xl max-sm:text-3xl leading-tight font-semibold'>
            Explore the power of AI apps generation
          </p>
          <p className='text-lp2-secondary leading-[28.8px] max-w-2xl text-center md:text-lg md:leading-8 tracking-wide'>
            Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days. Save Hours
            of Effort and Use our robust Deployable code.
          </p>
        </div>
      </div>
      <div className='grid grid-cols-1 mx-auto xl:w-full lg:w-[870px] md:grid-cols-2 xl:grid-cols-3 gap-4'>
        {cardContent.map((item, index) => (
          <div
            key={index}
            className='rounded-2xl w-full max-md:text-center md:max-w-[368px] mx-auto space-y-4'>
            <div className='flex justify-center bg-[#FFF7F480] rounded-xl'>
              <item.icon />
            </div>

            <p className='text-[2rem] text-[#1C1C1C] leading-10 pt-2 tracking-[-2px] font-semibold'>
              {item.title} <span className='text-lp2-primary'>{item.colorText}</span>
            </p>

            <p className='leading-7 text-lp2-secondary'>{item.description}</p>
          </div>
        ))}
      </div>
    </div>
  );
}


// This is the Footer component of the landing page.

import Link from "next/link";
import WhiteArrowIcon from "@/assets/landing-page-2/icons/WhiteArrowIcon";

// Array of objects representing footer navigation items
const footerItems = [
  {
    label: "About",
    url: "#",
  },
  {
    label: "Company",
    url: "#",
  },
  {
    label: "Press",
    url: "#",
  },
  {
    label: "Contact",
    url: "#",
  },
  {
    label: "Product",
    url: "#",
  },
  {
    label: "Careers",
    url: "#",
  },
  {
    label: "Blog",
    url: "#",
  },
  {
    label: "More",
    url: "#",
  },
  {
    label: "Press",
    url: "#",
  },
  {
    label: "Story",
    url: "#",
  },
  {
    label: "News letters",
    url: "#",
  },
  {
    label: "More",
    url: "#",
  },
];

export default async function Footer() {
  return (
    <footer className="bg-[#1C1C1C] text-white px-5">
      <div className="max-w-6xl mx-auto py-16">
        <div className="flex flex-col md:flex-row md:items-center justify-between gap-6">
          <p className="max-w-xl text-3xl md:text-4xl font-medium leading-tight md:leading-[52px]">
            Get your AI apps built with blazing speed.
          </p>
          <Link href={"/login"}>
            <button className="h-12 flex items-center gap-2 rounded-xl font-semibold bg-gradient-to-t from-lp5-primary to-[#ff5100dc] px-8 py-3">
              Get Started
              <WhiteArrowIcon />
            </button>
          </Link>
        </div>

        <hr className="opacity-30 my-16" />

        <div className="flex flex-col md:flex-row justify-between gap-10 mb-8">
          <div className="flex flex-col gap-8">
            <p className="text-3xl font-semibold text-white/70">
              BuilderKit.ai
            </p>
            <p className="md:text-lg max-w-[290px] tracking-[-0.54px] leading-6 text-white/60">
              Highly modular NextJS AI Boilerplate that allows you to ship any
              AI Apps within days.
            </p>
          </div>

          <div className="text-white/60 grid grid-rows-4 grid-cols-3 grid-flow-col lg:gap-x-24 gap-y-6">
            {footerItems.map((item, index) => (
              <Link key={index} href={item.url} className="hover:underline">
                {item.label}
              </Link>
            ))}
          </div>
        </div>
        <p>All rights reserved.</p>
      </div>
    </footer>
  );
}


// Faq in the landing page is a section that provides answers to frequently asked questions.

import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

const accordionItems = [
  {
    value: '1',
    question: 'What is buildekit?',
    answer: 'Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days',
  },
  {
    value: '2',
    question: 'What do i get exactly?',
    answer:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
  },
  {
    value: '3',
    question: 'Who is builder kit for?',
    answer: 'Builderkit is for developers who want to build AI apps faster.',
  },
  {
    value: '4',
    question: 'Is it a website template?',
    answer: 'No, Builderkit is a NextJS AI Boilerplate that allows you to ship any AI Apps within days.',
  },
];

export default async function Faq() {
  return (
    <div id='faq' className='mx-auto py-20 md:px-6 px-4'>
      <div className='max-w-3xl mx-auto p-4'>
        <div className='mx-auto mb-10'>
          <p className='text-center text-5xl max-sm:text-3xl leading-snug font-semibold'>FAQ</p>
        </div>

        <Accordion type='single' collapsible className='w-full'>
          {accordionItems.map((item, index) => (
            <AccordionItem key={index} className='p-0' value={item.value}>
              <AccordionTrigger className='font-medium leading-relaxed'>{item.question}</AccordionTrigger>
              <AccordionContent
                className='text-[#171717] p-0 mb-6 leading-5 max-w-md
              '>
                {item.answer}
              </AccordionContent>
            </AccordionItem>
          ))}
        </Accordion>
      </div>
    </div>
  );
}


// This component renders the pricing plans for different subscription tiers.
// It utilizes the <RadioGroup> from HeadlessUI to toggle between 'monthly' and 'annually' payment frequencies.
// Tiers data is mapped to display each plan with its respective price, features, and a call-to-action.

"use client";

import OrangeArrowIcon from "@/assets/landing-page-2/icons/OrangeArrowIcon";
import { cn } from "@/lib/utils";
import { FaArrowRightLong } from "react-icons/fa6";

const tiers = [
  {
    name: "Free",
    id: "free",
    sellingPrice: { monthly: "$0" },
    features: ["NextJS Boilerplate", "AI Models", "5 Demo Apps"],
  },
  {
    name: "Pro",
    id: "pro",
    sellingPrice: { monthly: "$149" },
    features: [
      "NextJS Boilerplate",
      "AI Models",
      "5 Demo Apps",
      "GAuth & Magic Link",
      "Stripe & Lemon Squeezy Payments",
      "Privacy Policy & ToS",
    ],
  },
  {
    name: "Ultimate",
    id: "ultimate",
    sellingPrice: { monthly: "$199" },
    features: [
      "NextJS Boilerplate",
      "AI Models",
      "5 Demo Apps",
      "GAuth & Magic Link",
      "Stripe & Lemon Squeezy Payments",
      "Privacy Policy & ToS",
      "Supabase",
      "Email integration",
      "SEO",
      "App Admin Dashboard",
      "Advanced API Set Up on Digital Ocean",
    ],
  },
];

// Each plan might have different components rendered based on its type (e.g., Trial vs. Standard vs. Premium).
// It uses internal state to manage the selected frequency of payments (monthly/annually).
// This component dynamically renders plan details and pricing based on the selected frequency.
export default function Plans() {
  return (
    <>
      <div className="grid mt-20 grid-cols-1 md:grid-cols-2 lg:grid-cols-3 md:gap-6">
        {tiers.map((tier) => (
          // Card for each plan with its respective details and pricing.

          <div
            key={tier.id}
            className="w-full h-fit shadow-sm bg-gradient-to-b from-white to-neutral-50 border border-[#E5E7EB] p-6 rounded-2xl flex mx-auto flex-col mt-6"
          >
            <div className="text-center space-y-4 w-full mt-4">
              {tier.name === "Pro" && (
                <div className="w-1/2 h-7 flex items-center justify-center gap-3 rounded-md mx-auto text-xs font-medium text-lp2-primary bg-[#FCF9F7]">
                  <span className="size-1.5 text-center bg-lp2-primary rounded-full block" />{" "}
                  MOST POPULAR
                </div>
              )}
              <p className="text-lg font-semibold">{tier.name.toUpperCase()}</p>

              <p className="font-semibold text-4xl">
                <span>{tier.sellingPrice.monthly}</span>
                <span className="text-[#9CA3AF]">/mo</span>
              </p>
            </div>
            <ul role="list" className="space-y-3 mt-6">
              {tier.features.map((feature) => (
                <li
                  key={feature}
                  className="flex items-start gap-3 font-medium"
                >
                  <OrangeArrowIcon /> <span>{feature}</span>
                </li>
              ))}
            </ul>

            {/* CTA button for the specific plan. */}
            <button
              className={cn(
                "w-full h-12 font-semibold flex items-center justify-center gap-2 mt-12 text-sm",
                tier.name === "Pro"
                  ? "bg-gradient-to-t from-lp2-primary to-lp2-primary/80 hover:bg-lp2-primary hover:text-white text-white rounded-xl"
                  : "bg-gradient-to-b from-white to-gray-100 border border-gray-200 rounded-lg"
              )}
            >
              Get Now <FaArrowRightLong />
            </button>
          </div>
        ))}
      </div>
    </>
  );
}


// This is the Pricing component of the landing page.

import Plans from '@/components/landing-pages/landing-page-2/pricing/Plans';

export default async function Pricing() {
  return (
    <div id='pricing' className='max-w-6xl mx-auto px-4 md:py-28 py-14'>
      <div className='flex flex-col items-center justify-center'>
        <h4 className='font-semibold max-w-xl text-5xl max-sm:text-3xl text-center'>
          <span className='text-lp2-primary'> Pricing</span> plan
        </h4>
        <Plans />
      </div>
    </div>
  );
}


// This component responsible for handling payment actions for different plans and frequencies.
// Optional discounts are applied automatically for annual subscriptions when paying via Stripe.
// If the user is not logged in, they are redirected to the login page.
// Otherwise, the payment URL is constructed based on the selected provider, plan, and frequency, with potential discounts applied.
// The button's appearance and behavior change based on the payment provider (Stripe or Lemon Squeezy).

import { FC } from "react";
import { Button } from "@/components/ui/button";
import { supabaseBrowserClient } from "@/utils/supabase/client";
import { useRouter } from "next/navigation";
import config from "@/config";
import { getPaymentUrl } from "@/lib/utils";
import {
  TypeSubscriptionInterval,
  TypePaymentGatwayProvider,
  TypeSubscriptionPlan,
} from "@/types/types";

interface ButtonPaymentProps {
  provider: TypePaymentGatwayProvider;
  tier: TypeSubscriptionPlan;
  frequency: TypeSubscriptionInterval;
}

const ButtonPayment: FC<ButtonPaymentProps> = ({
  provider,
  tier,
  frequency,
}) => {
  const router = useRouter();

  // Optional: If you want to add discount code by default
  const discount =
    provider === "stripe" && frequency === "annually" ? "8JDToQd0" : undefined;

  // This function handles the redirection logic based on the user's authentication status and subscription choice.
  // If the user is logged in, it constructs a specific URL for the payment gateway, optionally adding a discount code for annual payments via Stripe.
  const goToPaymentPage = async () => {
    const supabase = supabaseBrowserClient();

    const {
      data: { user },
    } = await supabase.auth.getUser();

    let url = "/admin-dashboard";
    if (user == null) {
      url = "/login";
    } else if (tier !== "trial") {
      const variantId = config[provider].variant[tier][frequency];
      url = getPaymentUrl(provider, variantId, user.email!, discount);
    }

    router.push(url);
  };

  return (
    <>
      <Button
        variant={provider === "stripe" ? "default" : "outline"}
        size="lg"
        onClick={goToPaymentPage}
        className="w-full"
      >
        Pay with {provider === "stripe" ? "Stripe" : "Lemon Squeezy"}
      </Button>
    </>
  );
};

export default ButtonPayment;


import Hero from '@/components/landing-pages/landing-page-5/Hero';
import Features from '@/components/landing-pages/landing-page-5/Features';
import Faq from '@/components/landing-pages/landing-page-5/Faq';
import Product from '@/components/landing-pages/landing-page-5/Product';
import Pricing from '@/components/landing-pages/landing-page-5/pricing/Pricing';
import Footer from '@/components/landing-pages/landing-page-5/Footer';

export default async function LandingPage5() {
  return (
    <>
      <main className='bg-black'>
        <Hero />
        <Features />
        <Product />
        <Pricing />
        <Faq />
        <Footer />
      </main>
    </>
  );
}


// This component renders the main hero section of the landing page which is designed to grab the visitor's attention.
// It includes a navigation bar, a headline, a detailed subtext that explains the product briefly, and a call-to-action button.

import Navbar from '@/components/landing-pages/landing-page-5/Navbar';
import Image from 'next/image';
import HeroImage from '@/assets/landing-page-5/images/hero.png';
import Link from 'next/link';
import { ArrowRightIcon } from '@radix-ui/react-icons';

import { Badge } from '@/components/ui/badge';
import HeroBG from '@/assets/landing-page-5/icons/HeroBG';

export default async function Hero() {
  return (
    <div className='relative isolate bg-[#090909]'>
      <span className='absolute w-full overflow-hidden max-w-[98vw] -z-50 top-20'>
        <HeroBG className='mx-auto' />
      </span>

      <div className='max-w-7xl mx-auto'>
        {/* Navbar component: Displays the top navigation menu. */}
        <Navbar />
        <div className='flex items-center justify-center max-w-4xl mt-4 flex-col gap-5 py-5 md:py-14 px-4 mx-auto'>
          <Badge className='bg-[#5d5d5d4f] text-sm'>
            Unlock Your Creative Spark! <ArrowRightIcon className='ml-2 pt-0.5' />
          </Badge>
          <h1 className='font-medium text-white text-3xl sm:text-6xl tracking-[-2.4px] text-center'>
            Generate AI Apps with ease
          </h1>
          <p className='text-lp5-secondary text-center mb-8 max-w-2xl font-medium'>
            Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days. Save Hours
            of Effort and Use our robust Deployable code.
          </p>
          <Link href={'/login'}>
            <button className='w-40 h-12 rounded-full text-black bg-white font-semibold'>Get Started</button>
          </Link>
          <div className='w-[250px] md:w-[600px] -z-50 rounded-full mx-auto pt-0 translate-y-20 bg-[#302f2f] blur-[50px] block h-20' />
        </div>
        <div className='w-full px-7'>
          <Image src={HeroImage} alt='hero' />
        </div>
      </div>
    </div>
  );
}


'use client';

import Link from 'next/link';
import { HiBars3 } from 'react-icons/hi2';
import { Sheet, SheetTrigger, SheetContent, SheetClose } from '@/components/ui/sheet';
import Image from 'next/image';

const navbarRoutes = [
  { label: 'Features', url: '/#features' },
  { label: 'Product', url: '/#product' },
  { label: 'Pricing', url: '/#pricing' },
  { label: 'FAQ', url: '/#faq' },
];

export default function Navbar() {
  return (
    <div className='max-w-2xl mx-auto px-3 pt-3'>
      <div
        className='w-full p-2 flex flex-col justify-between items-center border-[#222222] border rounded-full bg-gradient-to-t from-[#121212] to-[#202020]
        '>
        <div className='w-full flex justify-between items-center '>
          <Link href='https://www.builderkit.ai'>
            <div className='flex items-center gap-2 w-fit'>
              <Image src='/lp5-logo.svg' width={40} height={40} alt='logo' />
            </div>
          </Link>

          <ul className='hidden md:flex items-center gap-6'>
            {navbarRoutes.map((item, index) => (
              <li key={index} className='text-sm font-medium text-white'>
                <Link href={item.url} className='hover:underline'>
                  {item.label}
                </Link>
              </li>
            ))}
          </ul>

          <Link
            href={'/login'}
            className='hidden text-center rounded-[24px]  h-8 md:flex pb-0.5 items-center text-sm px-2.5 text-white bg-[#262626] hover:bg-[#262626]/70'>
            Sign in
          </Link>

          <Sheet>
            <SheetTrigger className='block md:hidden'>
              <HiBars3 size={24} className='text-white' />
            </SheetTrigger>
            <SheetContent
              side='top'
              className='bg-[linear-gradient(180deg,#121212_0%,#202020_100%)] border-none text-white'>
              <div className='space-y-6'>
                <div className='flex flex-col gap-4'>
                  {navbarRoutes.map((item, index) => (
                    <div key={index} className='text-sm font-medium py-2'>
                      <SheetClose asChild>
                        <Link href={item.url}>{item.label}</Link>
                      </SheetClose>
                    </div>
                  ))}
                </div>
                <Link
                  href={'/login'}
                  className='w-full h-10 flex justify-center items-center mt-5 text-sm text-white rounded-full bg-[#262626]'>
                  Sign in
                </Link>
              </div>
            </SheetContent>
          </Sheet>
        </div>
      </div>
    </div>
  );
}


// Product component of landing page

import LightningIcon from '@/assets/landing-page-5/icons/LightningIcon';

const cardContent = [
  {
    icon: LightningIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: LightningIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: LightningIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: LightningIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: LightningIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
  {
    icon: LightningIcon,
    title: 'Quality apps',
    description: 'Identify strengths, capitalize on weaknesses, and chart a course for unparalleled success.',
  },
];

export default async function Product() {
  return (
    <div id='product' className=' mx-auto p-4'>
      <div className='flex flex-col justify-center items-center mx-auto space-y-20'>
        <div className='space-y-7 max-w-4xl text-center'>
          <p className='max-w-xl font-medium mx-auto lg:px-2 text-2xl sm:text-4xl text-white'>
            Essentially, <span className='text-[#BC86FF]'> everything </span> you need to ship you{' '}
            <span className='text-[#BC86FF]'> first AI App</span>
          </p>
          <p className='text-lp5-secondary text-lg max-sm:text-sm max-w-2xl md:leading-8 tracking-wide'>
            Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days. Save Hours
            of Effort and Use our robust Deployable code.
          </p>
        </div>
        <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8'>
          {cardContent.map((item, index) => (
            <div
              key={index}
              className='rounded-2xl md:max-w-64 space-y-2 border bg-[#0D0D0D] border-[#171717] p-4'>
              <div>
                <item.icon />
              </div>
              <div>
                <p className='text-[#F7F7F8] font-medium'>{item.title}</p>
                <p className='text-[#94989E] text-sm mt-2'>{item.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}


// Features component to display the services provided by the application in the landing page.

import ServiceImageIcon1 from '@/assets/landing-page-5/icons/DesingerIcon';

const cardContent = [
  {
    icon: ServiceImageIcon1,
    title: 'Build your AI apps Fast',
    description:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
  },
  {
    icon: ServiceImageIcon1,
    title: 'Build your AI apps Fast',
    description:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
  },
  {
    icon: ServiceImageIcon1,
    title: 'Build your AI apps Fast',
    description:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
  },
];

export default async function Features() {
  return (
    <div id='features' className='max-w-7xl mx-auto p-4 space-y-20 md:my-48 my-28'>
      <div className='flex flex-col items-center justify-center'>
        <div className='space-y-7 max-w-3xl text-center'>
          <p className='text-3xl sm:text-4xl tracking-[1.08px] max-w-[560px] mx-auto leading-[44px] text-white font-medium'>
            Explore the power of AI apps generation
            <span className='text-lp5-primary'> Workflow</span>
          </p>
          <p className='text-lp5-secondary text-lg max-sm:text-sm lg:px-8 max-w-2xl md:leading-8 tracking-wide'>
            Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days. Save Hours
            of Effort and Use our robust Deployable code.
          </p>
        </div>
      </div>

      <div className='grid grid-cols-1 mx-auto xl:w-full lg:w-[870px] lg:grid-cols-2 xl:grid-cols-3 gap-4'>
        {cardContent.map((item, index) => (
          <div
            key={index}
            className='rounded-2xl w-full border-[#171717] md:max-w-[416px] max-lg:mx-auto p-4 text-center bg-[#0D0D0D]'>
            <p className='text-2xl font-medium text-white/80 mt-4'>{item.title}</p>
            <p className='leading-6 mb-8 mt-2 text-center text-lp5-secondary'>{item.description}</p>
            <div>
              <item.icon />
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}


// This is the Footer component of the landing page.

import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { ArrowRightIcon } from '@radix-ui/react-icons';

// Array of objects representing footer navigation items
const footerItems = [
  {
    label: 'About',
    url: '#',
  },
  {
    label: 'Company',
    url: '#',
  },
  {
    label: 'Press',
    url: '#',
  },
  {
    label: 'Contact',
    url: '#',
  },
  {
    label: 'Product',
    url: '#',
  },
  {
    label: 'Careers',
    url: '#',
  },
  {
    label: 'Blog',
    url: '#',
  },
  {
    label: 'More',
    url: '#',
  },
  {
    label: 'Press',
    url: '#',
  },
  {
    label: 'Story',
    url: '#',
  },
  {
    label: 'News letters',
    url: '#',
  },
  {
    label: 'More',
    url: '#',
  },
];

export default async function Footer() {
  return (
    <footer className='bg-[#1C1C1C] text-white px-5'>
      <div className='max-w-6xl mx-auto py-16'>
        <div className='flex flex-col md:flex-row md:items-center justify-between gap-6'>
          <p className='md:w-1/2 text-2xl font-medium leading-normal md:leading-normal'>
            Get your AI apps built with blazing speed.
          </p>
          <Link href={'/login'}>
            <Button className='bg-lp5-primary flex gap-2 px-4 py-6 rounded-full'>
              Get Started
              <ArrowRightIcon />
            </Button>
          </Link>
        </div>

        <hr className='opacity-10 my-16' />

        <div className='flex flex-col md:flex-row justify-between gap-10 mb-8'>
          <div className='flex flex-col gap-8'>
            <p className='text-2xl font-semibold text-white/70'>BuilderKit.ai</p>
            <p className='text-lg max-w-sm tracking-[-0.54px] font-normal leading-6 text-white/60'>
              Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days.
            </p>
          </div>

          <div className='text-white/60 grid grid-rows-4 grid-cols-3 grid-flow-col lg:gap-x-24 gap-y-6'>
            {footerItems.map((item, index) => (
              <Link key={index} href={item.url} className='hover:underline'>
                {item.label}
              </Link>
            ))}
          </div>
        </div>
        <p className='font-medium'>All rights reserved.</p>
      </div>
    </footer>
  );
}


// Faq in the landing page is a section that provides answers to frequently asked questions.

import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

const accordionItems = [
  {
    value: '1',
    question: 'What is buildekit?',
    answer: 'Highly modular NextJS AI Boilerplate that allows you to ship any AI Apps within days',
  },
  {
    value: '2',
    question: 'What do i get exactly?',
    answer:
      'Builderkit takes care of everything from authentication to payments, get your production-ready app within hours.',
  },
  {
    value: '3',
    question: 'Who is builder kit for?',
    answer: 'Builderkit is for developers who want to build AI apps faster.',
  },
  {
    value: '4',
    question: 'Is it a website template?',
    answer: 'No, Builderkit is a NextJS AI Boilerplate that allows you to ship any AI Apps within days.',
  },
];

export default async function Faq() {
  return (
    <div id='faq' className='mx-auto py-20 md:px-6'>
      <div className='max-w-3xl mx-auto p-4'>
        <div className='flex flex-col items-center justify-center mb-12'>
          <div className='space-y-7 text-center'>
            <p className=' text-white text-4xl font-medium'>Frequently asked questions</p>
            <p className='text-lp5-secondary text-lg max-sm:text-sm lg:px-8 max-w-3xl md:leading-8 tracking-wide'>
              Seamlessly use your preferred tools for unified work, start to finish. Don't worry, we got you.
              Here are some answers for your questions.
            </p>
          </div>
        </div>
        <Accordion type='single' collapsible className='w-full'>
          {accordionItems.map((item) => (
            <AccordionItem key={item.value} className='my-2 px-0 border-[#171717]' value={item.value}>
              <AccordionTrigger className='text-white font-medium px-6 leading-relaxed'>
                {item.question}
              </AccordionTrigger>
              <AccordionContent className='text-lp5-secondary px-6 pt-0 leading-loose'>
                {item.answer}
              </AccordionContent>
            </AccordionItem>
          ))}
        </Accordion>
      </div>
    </div>
  );
}


// This component renders the pricing plans for different subscription tiers.
// It utilizes the <RadioGroup> from HeadlessUI to toggle between 'monthly' and 'annually' payment frequencies.
// Tiers data is mapped to display each plan with its respective price, features, and a call-to-action.

"use client";

import BoldRightIcon from "@/assets/landing-page-2/icons/BoldRightIcon";
import OrangeArrowIcon from "@/assets/landing-page-2/icons/OrangeArrowIcon";
import { cn } from "@/lib/utils";

const tiers = [
  {
    name: "Free",
    id: "free",
    sellingPrice: { monthly: "$0" },
    features: ["NextJS Boilerplate", "AI Models", "5 Demo Apps"],
  },
  {
    name: "Pro",
    id: "pro",
    sellingPrice: { monthly: "$149" },
    features: [
      "NextJS Boilerplate",
      "AI Models",
      "5 Demo Apps",
      "GAuth & Magic Link",
      "Stripe & Lemon Squeezy Payments",
      "Privacy Policy & ToS",
    ],
  },
  {
    name: "Ultimate",
    id: "ultimate",
    sellingPrice: { monthly: "$199" },
    features: [
      "NextJS Boilerplate",
      "AI Models",
      "5 Demo Apps",
      "GAuth & Magic Link",
      "Stripe & Lemon Squeezy Payments",
      "Privacy Policy & ToS",
      "Supabase",
      "Email integration",
      "SEO",
      "App Admin Dashboard",
      "Advanced API Set Up on Digital Ocean",
    ],
  },
];

// Each plan might have different components rendered based on its type (e.g., Trial vs. Standard vs. Premium).
// It uses internal state to manage the selected frequency of payments (monthly/annually).
// This component dynamically renders plan details and pricing based on the selected frequency.
export default function Plans() {
  return (
    <>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 md:gap-6 mt-16">
        {tiers.map((tier) => (
          // Card for each plan with its respective details and pricing.
          <div
            key={tier.id}
            className="w-full h-fit md:max-w-sm border-[#171717] bg-[#0D0D0D] shadow-sm text-white rounded-2xl p-4 sm:p-6 mx-auto mt-3"
          >
            <div className="text-center w-full mt-4">
              {tier.name === "Pro" && (
                <div className="w-1/2 h-8 flex items-center justify-center gap-3 rounded-md mx-auto text-xs font-medium text-lp2-primary bg-[#FCF9F712]">
                  <span className="size-1.5 text-center bg-lp2-primary rounded-full block" />{" "}
                  MOST POPULAR
                </div>
              )}
              <p className="text-lg font-semibold mt-2">
                {tier.name.toUpperCase()}
              </p>

              <p className="font-medium leading-loose text-4xl">
                <span>{tier.sellingPrice.monthly}</span>
                <span className="text-[#9CA3AF]">/mo</span>
              </p>
            </div>
            <ul role="list" className="space-y-5 mt-5 ">
              {tier.features.map((feature) => (
                <li
                  key={feature}
                  className="flex items-start leading-relaxed gap-3 font-medium"
                >
                  <OrangeArrowIcon /> <span>{feature}</span>
                </li>
              ))}
            </ul>

            {/* CTA button for the specific plan. */}
            <button
              className={cn(
                "w-full h-12 md:h-14 flex items-center justify-center gap-2 rounded-full mt-12 text-sm",
                tier.name === "Pro"
                  ? "bg-gradient-to-t from-lp2-primary to-lp2-primary/80 hover:bg-lp2-primary hover:text-white text-white"
                  : "bg-[#262626] hover:bg-[#262626]/90"
              )}
            >
              Get Now <BoldRightIcon />
            </button>
          </div>
        ))}
      </div>
    </>
  );
}


// This is the Pricing component of the landing page.

import Plans from '@/components/landing-pages/landing-page-5/pricing/Plans';

export default async function Pricing() {
  return (
    <div id='pricing' className='max-w-6xl mx-auto px-4 py-28'>
      <div className='flex  flex-col items-center justify-center'>
        <h4 className='font-semibold text-white max-w-md leading-[44px] text-4xl max-sm:text-3xl text-center'>
          Start making
          <span className='text-lp2-primary'> smarter decisions</span>, Choose a plan
        </h4>

        <Plans />
      </div>
    </div>
  );
}


// This component responsible for handling payment actions for different plans and frequencies.
// Optional discounts are applied automatically for annual subscriptions when paying via Stripe.
// If the user is not logged in, they are redirected to the login page.
// Otherwise, the payment URL is constructed based on the selected provider, plan, and frequency, with potential discounts applied.
// The button's appearance and behavior change based on the payment provider (Stripe or Lemon Squeezy).

import { FC } from "react";
import { Button } from "@/components/ui/button";
import { supabaseBrowserClient } from "@/utils/supabase/client";
import { useRouter } from "next/navigation";
import config from "@/config";
import { getPaymentUrl } from "@/lib/utils";
import {
  TypeSubscriptionInterval,
  TypePaymentGatwayProvider,
  TypeSubscriptionPlan,
} from "@/types/types";

interface ButtonPaymentProps {
  provider: TypePaymentGatwayProvider;
  tier: TypeSubscriptionPlan;
  frequency: TypeSubscriptionInterval;
}

const ButtonPayment: FC<ButtonPaymentProps> = ({
  provider,
  tier,
  frequency,
}) => {
  const router = useRouter();

  // Optional: If you want to add discount code by default
  const discount =
    provider === "stripe" && frequency === "annually" ? "8JDToQd0" : undefined;

  // This function handles the redirection logic based on the user's authentication status and subscription choice.
  // If the user is logged in, it constructs a specific URL for the payment gateway, optionally adding a discount code for annual payments via Stripe.
  const goToPaymentPage = async () => {
    const supabase = supabaseBrowserClient();

    const {
      data: { user },
    } = await supabase.auth.getUser();

    let url = "/admin-dashboard";
    if (user == null) {
      url = "/login";
    } else if (tier !== "trial") {
      const variantId = config[provider].variant[tier][frequency];
      url = getPaymentUrl(provider, variantId, user.email!, discount);
    }

    router.push(url);
  };

  return (
    <>
      <Button
        variant={provider === "stripe" ? "default" : "outline"}
        size="lg"
        onClick={goToPaymentPage}
        className="w-full"
      >
        Pay with {provider === "stripe" ? "Stripe" : "Lemon Squeezy"}
      </Button>
    </>
  );
};

export default ButtonPayment;


import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


import React from 'react';

const PlusIcon = () => {
  return (
    <svg xmlns='http://www.w3.org/2000/svg' width='26' height='25' viewBox='0 0 29 28' fill='none'>
      <path
        fillRule='evenodd'
        clipRule='evenodd'
        d='M14.4999 0.00390625C6.78067 0.00390625 0.5 6.28372 0.5 14.0043C0.5 21.7241 6.78067 28.0039 14.4999 28.0039C22.2193 28.0039 28.5 21.7241 28.5 14.0043C28.5 6.28372 22.2193 0.00390625 14.4999 0.00390625ZM21.2309 15.0806H15.5772V21.0037C15.5772 21.5991 15.0947 22.0816 14.5002 22.0816C13.9058 22.0816 13.4234 21.5991 13.4234 21.0037V15.0806H7.76948C7.17506 15.0806 6.69248 14.5981 6.69248 14.0043C6.69248 13.4089 7.17506 12.9279 7.76948 12.9279H13.4234V7.5415C13.4234 6.94762 13.9058 6.46512 14.5002 6.46512C15.0947 6.46512 15.5772 6.94762 15.5772 7.5415V12.9279H21.2309C21.8255 12.9279 22.3079 13.4089 22.3079 14.0043C22.3079 14.5981 21.8255 15.0806 21.2309 15.0806Z'
        fill='#2AA875'
      />
    </svg>
  );
};

export default PlusIcon;


import React from 'react';

const FlickIcon = () => {
  return (
    <svg xmlns='http://www.w3.org/2000/svg' width='40' height='40' viewBox='0 0 24 44' fill='none'>
      <path d='M24 2L26.9697 11.7016' stroke='white' strokeWidth='3' strokeLinecap='round' />
      <path d='M6 38.9343L15.8553 38' stroke='white' strokeWidth='3' strokeLinecap='round' />
      <path d='M2 12L20.059 27.1681' stroke='white' strokeWidth='3' strokeLinecap='round' />
    </svg>
  );
};

export default FlickIcon;


import React from 'react';

const GreenBadge = () => {
  return (
    <svg
      xmlns='http://www.w3.org/2000/svg'
      className='absolute top-[-66px] left-1/2 -translate-x-1/2'
      width='207'
      height='34'
      viewBox='0 0 207 34'
      fill='none'>
      <path
        d='M32.6055 14C32.6055 6.26801 38.8735 0 46.6055 0H156.605C164.337 0 170.605 6.26801 170.605 14V16.1931C170.605 23.8493 176.756 30.0854 184.411 30.1917L206.605 30.5C206.605 32.433 205.038 34 203.105 34H2.60547C1.5009 34 0.605469 33.1046 0.605469 32C0.605469 30.8954 1.5009 30 2.60547 30H18.6055C26.3375 30 32.6055 23.732 32.6055 16V14Z'
        fill='#26AB75'
      />
    </svg>
  );
};

export default GreenBadge;


import React from 'react';

const MinusIcon = () => {
  return (
    <svg xmlns='http://www.w3.org/2000/svg' width='26' height='25' viewBox='0 0 29 28' fill='none'>
      <path
        fillRule='evenodd'
        clipRule='evenodd'
        d='M14.5 0.00390625C6.78054 0.00390625 0.5 6.28376 0.5 14.0043C0.5 21.7241 6.78054 28.0039 14.5 28.0039C22.2195 28.0039 28.5 21.7241 28.5 14.0043C28.5 6.28376 22.2195 0.00390625 14.5 0.00390625ZM21.2308 15.0814H7.76924C7.1747 15.0814 6.69228 14.5989 6.69228 14.0043C6.69228 13.4104 7.1747 12.9272 7.76924 12.9272H21.2308C21.8253 12.9272 22.3078 13.4104 22.3078 14.0043C22.3078 14.5989 21.8253 15.0814 21.2308 15.0814Z'
        fill='#2AA875'
      />
    </svg>
  );
};

export default MinusIcon;


import React from 'react';

const CheckedIcon = () => {
  return (
    <svg xmlns='http://www.w3.org/2000/svg' width='24' height='25' viewBox='0 0 24 25' fill='none'>
      <path
        opacity='0.32'
        d='M12 2.09375C6.06294 2.09375 1.25 6.90669 1.25 12.8438C1.25 18.7808 6.06294 23.5938 12 23.5938C17.9371 23.5938 22.75 18.7808 22.75 12.8438C22.75 6.90669 17.9371 2.09375 12 2.09375Z'
        fill='#26AB75'
      />
      <path
        fillRule='evenodd'
        clipRule='evenodd'
        d='M17.0303 9.81342C17.3232 10.1063 17.3232 10.5812 17.0303 10.874L11.5303 16.374C11.3897 16.5147 11.1989 16.5937 11 16.5937C10.8011 16.5937 10.6103 16.5147 10.4697 16.374L7.96967 13.874C7.67678 13.5811 7.67678 13.1063 7.96967 12.8134C8.26256 12.5205 8.73744 12.5205 9.03033 12.8134L11 14.783L15.9697 9.81342C16.2626 9.52053 16.7374 9.52053 17.0303 9.81342Z'
        fill='#26AB75'
      />
    </svg>
  );
};

export default CheckedIcon;


import React from 'react';

const TickIcon = () => {
  return (
    <svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        d='M12 2C6.49 2 2 6.49 2 12C2 17.51 6.49 22 12 22C17.51 22 22 17.51 22 12C22 6.49 17.51 2 12 2ZM16.78 9.7L11.11 15.37C10.97 15.51 10.78 15.59 10.58 15.59C10.38 15.59 10.19 15.51 10.05 15.37L7.22 12.54C6.93 12.25 6.93 11.77 7.22 11.48C7.51 11.19 7.99 11.19 8.28 11.48L10.58 13.78L15.72 8.64C16.01 8.35 16.49 8.35 16.78 8.64C17.07 8.93 17.07 9.4 16.78 9.7Z'
        fill='#0B3721'
      />
    </svg>
  );
};

export default TickIcon;


import React from 'react';

const LightningIcon = () => {
  return (
    <svg width='18' height='18' viewBox='0 0 18 18' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        d='M15.1726 8.30894C15.1513 8.21879 15.1081 8.13529 15.0468 8.06586C14.9854 7.99643 14.9079 7.94323 14.8211 7.91097L10.7704 6.39152L11.8012 1.2355C11.8245 1.1157 11.8082 0.991566 11.7548 0.881818C11.7014 0.77207 11.6138 0.682668 11.5051 0.627104C11.3964 0.571539 11.2727 0.552826 11.1524 0.57379C11.0322 0.594753 10.922 0.654254 10.8386 0.743315L2.96357 9.18082C2.89961 9.24821 2.85334 9.3304 2.8289 9.42004C2.80445 9.50968 2.80259 9.60398 2.82349 9.69451C2.84438 9.78505 2.88737 9.869 2.94863 9.93886C3.00988 10.0087 3.08749 10.0623 3.17451 10.0949L7.22662 11.6143L6.19865 16.7647C6.17531 16.8845 6.19157 17.0087 6.24497 17.1184C6.29837 17.2282 6.38602 17.3176 6.49469 17.3731C6.60335 17.4287 6.72715 17.4474 6.84738 17.4264C6.96762 17.4055 7.07778 17.346 7.16123 17.2569L15.0362 8.81941C15.099 8.752 15.1443 8.6702 15.1681 8.58119C15.1919 8.49218 15.1934 8.39869 15.1726 8.30894ZM7.68998 15.047L8.42615 11.364C8.4525 11.2334 8.43162 11.0977 8.36724 10.981C8.30285 10.8643 8.19915 10.7743 8.07459 10.727L4.35928 9.33128L10.3091 2.95675L9.57365 6.63972C9.5473 6.77034 9.56818 6.90607 9.63256 7.02273C9.69695 7.1394 9.80066 7.22941 9.92521 7.27675L13.6377 8.66894L7.68998 15.047Z'
        fill='#0B3721'
      />
    </svg>
  );
};

export default LightningIcon;


import React from 'react';

const ArrowRightMd = () => {
  return (
    <svg width='21' height='20' viewBox='0 0 21 20' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        d='M4.66675 10H16.3334'
        stroke='white'
        strokeWidth='1.6'
        strokeLinecap='round'
        strokeLinejoin='round'
      />
      <path
        d='M10.5 4.16675L16.3333 10.0001L10.5 15.8334'
        stroke='white'
        strokeWidth='1.6'
        strokeLinecap='round'
        strokeLinejoin='round'
      />
    </svg>
  );
};

export default ArrowRightMd;


import React from 'react';

const HeroBG = ({ className }: { className: string }) => {
  return (
    <svg
      className={className}
      width='1346'
      height='559'
      viewBox='0 0 1346 559'
      fill='none'
      xmlns='http://www.w3.org/2000/svg'>
      <circle
        opacity='0.4'
        cx='83.3455'
        cy='555.171'
        r='2.87395'
        transform='rotate(180 83.3455 555.171)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='2.8741'
        cy='441.651'
        r='2.87395'
        transform='rotate(180 2.8741 441.651)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='158.071'
        cy='434.465'
        r='2.87395'
        transform='rotate(180 158.071 434.465)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='380.799'
        cy='454.583'
        r='2.87395'
        transform='rotate(180 380.799 454.583)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='527.371'
        cy='527.869'
        r='2.87395'
        transform='rotate(180 527.371 527.869)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='501.507'
        cy='371.238'
        r='2.87395'
        transform='rotate(180 501.507 371.238)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='495.761'
        cy='260.591'
        r='2.87395'
        transform='rotate(180 495.761 260.591)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='626.524'
        cy='129.827'
        r='2.87395'
        transform='rotate(180 626.524 129.827)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='454.088'
        cy='171.498'
        r='2.87395'
        transform='rotate(180 454.088 171.498)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='428.224'
        cy='3.37336'
        r='2.87395'
        transform='rotate(180 428.224 3.37336)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='303.207'
        cy='69.4735'
        r='2.87395'
        transform='rotate(180 303.207 69.4735)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='186.809'
        cy='19.1802'
        r='2.87395'
        transform='rotate(180 186.809 19.1802)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='89.0977'
        cy='86.7169'
        r='2.87395'
        transform='rotate(180 89.0977 86.7169)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='8.62617'
        cy='63.7257'
        r='2.87395'
        transform='rotate(180 8.62617 63.7257)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='77.5997'
        cy='263.466'
        r='2.87395'
        transform='rotate(180 77.5997 263.466)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='799.003'
        cy='555.171'
        r='2.87395'
        transform='rotate(180 799.003 555.171)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='718.531'
        cy='441.651'
        r='2.87395'
        transform='rotate(180 718.531 441.651)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='873.729'
        cy='434.465'
        r='2.87395'
        transform='rotate(180 873.729 434.465)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='1096.46'
        cy='454.583'
        r='2.87395'
        transform='rotate(180 1096.46 454.583)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='1243.03'
        cy='527.869'
        r='2.87395'
        transform='rotate(180 1243.03 527.869)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='1217.16'
        cy='371.238'
        r='2.87395'
        transform='rotate(180 1217.16 371.238)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='1211.42'
        cy='260.591'
        r='2.87395'
        transform='rotate(180 1211.42 260.591)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='1342.18'
        cy='129.827'
        r='2.87395'
        transform='rotate(180 1342.18 129.827)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='1169.75'
        cy='171.498'
        r='2.87395'
        transform='rotate(180 1169.75 171.498)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='1143.88'
        cy='3.37336'
        r='2.87395'
        transform='rotate(180 1143.88 3.37336)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='1018.86'
        cy='69.4735'
        r='2.87395'
        transform='rotate(180 1018.86 69.4735)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='902.466'
        cy='19.1802'
        r='2.87395'
        transform='rotate(180 902.466 19.1802)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='804.756'
        cy='86.7169'
        r='2.87395'
        transform='rotate(180 804.756 86.7169)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='724.283'
        cy='63.7257'
        r='2.87395'
        transform='rotate(180 724.283 63.7257)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='793.257'
        cy='263.466'
        r='2.87395'
        transform='rotate(180 793.257 263.466)'
        fill='#D9D9D9'
      />
    </svg>
  );
};

export default HeroBG;


import React from 'react';

const DesingerIcon = () => {
  return (
    <svg viewBox='0 0 384 384' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <rect width='384' height='384' fill='#F1F9F3' fillOpacity='0.19' />
      <path
        d='M256.523 118.465C258.866 119.941 260.723 122.074 261.863 124.598C263.392 128.179 264.468 131.936 265.067 135.783C264.182 135.806 263.302 135.917 262.44 136.115C262.339 136.115 261.762 136.418 261.661 136.735C261.198 138.335 260.846 139.965 260.607 141.613L231.744 141.787C231.412 141.787 231.455 142.176 231.744 142.191C231.744 142.191 258.096 142.595 260.607 142.609C259.972 147.862 260.506 153.635 264.23 157.358C267.736 160.822 279.657 161.313 284.088 158.008C287.768 155.251 288.677 147.285 288.417 142.609C289.283 142.609 308.795 142.263 310.729 142.191C310.782 142.191 310.834 142.169 310.872 142.131C310.91 142.094 310.931 142.042 310.931 141.989C310.931 141.935 310.91 141.884 310.872 141.846C310.834 141.808 310.782 141.787 310.729 141.787C307.438 141.787 288.374 141.642 288.374 141.642C287.984 137.313 286.931 136.88 286.931 136.678C286.919 136.544 286.865 136.418 286.777 136.316C286.689 136.215 286.571 136.145 286.44 136.115C285.185 135.869 283.909 135.739 282.63 135.725C284.65 132.478 286.382 123.646 289.557 117.729C294.262 108.911 311.97 117.31 311.681 109.517C311.335 100.858 301.723 95.9944 291.405 100.584C281.605 104.913 279.051 125.118 278.878 135.667C275.919 135.667 277.348 135.754 273.105 135.667C276.814 130.732 281.533 114.28 280.711 102.777C279.768 95.1441 276.556 87.9696 271.489 82.1832C267.044 77.2043 261.834 75.0972 257.908 79.0948C252.136 84.8675 257.447 91.3185 262.382 97.8561C267.809 105.072 269.843 108.666 270.579 118.941C270.924 124.516 270.818 130.11 270.262 135.667H268.66C269.901 131.612 268.299 122.679 267.13 118.479C265.456 112.548 262.599 106.573 258.067 102.46C252.714 97.8375 246.203 94.7593 239.234 93.5555C234.976 92.8339 231.339 93.1081 229.362 94.2915C228.635 94.6697 228.074 95.3034 227.786 96.0708C227.498 96.8382 227.505 97.6849 227.804 98.4479C230.199 106.284 247.142 112.692 256.523 118.465ZM291.693 101.507C301.348 97.1779 310.238 101.724 310.541 109.575C310.772 115.593 293.411 108.132 288.677 117.353C285.387 123.732 283.929 132.651 281.937 135.74H280.913C282.356 129.375 285.892 115.218 290.048 110.21C295.359 103.73 304.61 107.511 305.014 107.41C305.172 107.41 305.331 107.15 304.855 106.977C299.082 104.884 293.209 104.928 289.283 109.575C284.564 115.145 281.591 128.567 280.35 135.783H279.109C279.498 125.681 282.327 105.62 291.693 101.507ZM271.316 118.927C270.738 108.738 268.862 105 263.162 97.2789C258.486 91.001 253.478 85.0119 258.644 79.7731C262.166 76.194 266.755 78.3299 270.738 82.8327C275.616 88.4786 278.692 95.455 279.571 102.864C280.509 114.554 275.746 131.338 272.355 135.682H271.59C273.133 129.074 274.133 122.35 274.577 115.578C274.909 109.806 274.808 105.794 273.134 100.771C271.759 96.9475 269.849 93.3374 267.462 90.0485C266.323 88.4263 265.069 86.8878 263.71 85.4448C263.676 85.4027 263.626 85.376 263.572 85.3706C263.518 85.3652 263.463 85.3815 263.421 85.4159C263.379 85.4504 263.353 85.5002 263.347 85.5543C263.342 85.6084 263.358 85.6625 263.392 85.7046C263.754 86.0823 264.091 86.4824 264.403 86.9024C268.905 92.6751 273.35 101.103 273.697 108.55C274.043 115.997 272.557 128.423 271.186 135.783H270.782C271.419 130.188 271.598 124.55 271.316 118.927ZM286.022 137.342C288.403 139.521 287.652 153.996 283.337 157.229C279.022 160.461 267.78 159.696 264.72 156.738C259.9 152.105 260.391 143.432 262.036 136.995C262.138 137.13 262.279 137.231 262.44 137.284C263.549 137.54 264.68 137.694 265.817 137.746C264.404 142.983 264.651 148.53 266.524 153.621C266.593 153.766 266.717 153.878 266.868 153.932C267.02 153.986 267.187 153.978 267.332 153.909C267.478 153.84 267.59 153.716 267.644 153.565C267.698 153.413 267.69 153.246 267.621 153.101C265.803 149.464 265.312 141.382 266.365 137.847C270.868 138.049 282.919 138.135 286.022 137.342ZM257.447 103.196C267.231 111.855 269.742 131.035 268.227 135.711H267.332C267.127 131.7 266.429 127.731 265.254 123.891C262.137 113.789 256.913 107.583 248.903 102.907C244.719 100.514 240.241 98.6753 235.582 97.4376C235.529 97.4242 235.472 97.4327 235.425 97.4611C235.377 97.4895 235.343 97.5356 235.33 97.5892C235.316 97.6427 235.325 97.6995 235.353 97.7468C235.382 97.7942 235.428 97.8283 235.481 97.8417C240.92 99.5661 246.082 102.064 250.808 105.26C256.049 108.749 260.141 113.71 262.57 119.518C264.874 124.653 266.336 130.125 266.899 135.725H265.543C265.009 131.764 263.981 127.885 262.483 124.18C261.313 121.515 259.392 119.248 256.956 117.657C247.416 111.783 230.979 105.346 228.785 98.1304C226.75 91.5062 246.363 93.2668 257.447 103.196ZM132.655 177.505C113.432 170.823 96.2002 167.836 85.4774 165.137C85.3446 165.1 85.2056 165.09 85.0688 165.107C84.932 165.125 84.8002 165.17 84.6813 165.24C84.5623 165.31 84.4587 165.403 84.3766 165.514C84.2946 165.625 84.2357 165.751 84.2036 165.885C84.1716 166.019 84.1669 166.159 84.1899 166.295C84.213 166.431 84.2632 166.561 84.3377 166.677C84.4122 166.793 84.5093 166.893 84.6233 166.97C84.7373 167.048 84.8658 167.102 85.0011 167.129C91.8995 168.788 102.319 170.693 113.591 173.306C132.208 177.635 132.612 178.92 132.915 178.025C132.947 177.921 132.938 177.809 132.89 177.713C132.841 177.616 132.757 177.541 132.655 177.505ZM284.982 189.181C284.982 189.146 284.976 189.113 284.963 189.081C284.95 189.05 284.93 189.021 284.906 188.997C284.882 188.973 284.854 188.954 284.822 188.941C284.791 188.927 284.757 188.921 284.723 188.921C272.066 188.921 259.756 191.807 252.785 192.457C252.7 192.464 252.618 192.488 252.542 192.528C252.467 192.567 252.4 192.622 252.347 192.688C252.293 192.754 252.253 192.83 252.229 192.912C252.205 192.993 252.198 193.079 252.208 193.164C252.215 193.249 252.239 193.332 252.279 193.408C252.318 193.484 252.372 193.552 252.438 193.607C252.504 193.662 252.58 193.703 252.662 193.729C252.744 193.754 252.83 193.763 252.915 193.755C258.024 193.25 266.871 191.316 275.154 190.248C284.347 189.181 284.997 189.83 284.982 189.181ZM241.384 219.213C241.396 219.189 241.404 219.164 241.407 219.137C241.409 219.11 241.406 219.083 241.398 219.058C241.39 219.032 241.377 219.009 241.36 218.988C241.342 218.968 241.321 218.951 241.297 218.939L240.937 218.751L240.85 219.184C241.095 219.3 241.283 219.487 241.384 219.213Z'
        fill='#0B3721'
      />
      <path
        d='M329.043 222.821C325.334 222.056 316.17 222.359 312.389 222.691C315.506 212.041 318.724 198.157 320.023 190.508C320.494 188.392 320.697 186.225 320.629 184.057C320.582 183.863 320.495 183.68 320.373 183.521C320.251 183.362 320.098 183.23 319.922 183.134C314.149 179.511 253.666 187.463 249.452 189.556C248.196 190.176 247.07 193.308 246.565 194.722C242.827 188.575 243.217 187.117 239.046 177.404C236.447 171.078 233.151 165.061 229.218 159.466C229.319 158.701 233.317 128.841 229.031 120.861C226.144 115.521 210.515 113.645 204.497 113.14C204.497 112.822 203.746 107.367 203.429 104.899C208.509 100.656 210.645 92.8485 205.132 91.5352C201.221 90.6115 185.779 87.6675 174.276 90.6404C167.061 92.5165 161.288 96.7306 160.797 105.072C160.603 108.24 160.797 111.419 161.374 114.539C153.913 115.362 141.069 116.589 134.517 119.057C126.089 122.232 129.639 159.105 130.534 162.092C130.043 163.304 129.581 164.531 129.163 165.671C108.164 160.317 61.1601 150.33 59.0675 150.518C58.5224 150.511 57.9842 150.64 57.5007 150.891C57.0173 151.143 56.6036 151.511 56.2966 151.961C55.7338 152.091 55.5317 152.885 55.4307 153.404C53.9875 161.082 56.5997 206.932 57.0615 214.711C57.8264 217.51 80.0658 223.586 82.9521 224.38C83.0964 228.175 83.8613 247.023 84.0201 250.891C82.7645 250.662 81.5217 250.368 80.2967 250.011C77.7278 248.957 67.8853 258.54 68.7512 257.746C64.9845 261.094 105.971 272.106 109.247 271.182C112.523 270.258 119.003 264.067 117.906 260.618C117.603 260.004 117.091 259.518 116.463 259.247C113.36 257.616 105.148 255.61 101.728 254.788C102.06 247.803 102.06 236.344 102.045 229.388C106.101 230.398 129.119 235.969 133.276 235.896C133.574 235.901 133.867 235.826 134.127 235.68C135.455 235.492 137.014 235.16 137.143 233.804C137.143 233.4 137.475 229.878 137.894 224.654C148.068 228.536 160.408 228.248 162.601 227.353C163.193 227.068 163.692 226.623 164.044 226.068C164.145 226.198 164.189 226.169 164.954 226.285C167.84 226.747 172.458 227.18 175.056 225.823C178.736 226.415 189.401 227.266 190.195 223.702C190.296 223.225 190.44 222.258 190.584 221.089C201.264 221.667 239.191 221.407 239.335 221.407L238.455 225.376C238.432 225.343 238.402 225.316 238.367 225.299C238.331 225.281 238.292 225.273 238.253 225.275C238.253 225.159 238.253 225.188 238.253 225.275C232.343 224.809 226.413 224.655 220.487 224.813C218.38 224.914 212.824 225.174 212.723 227.223C211.985 228.965 211.878 230.909 212.42 232.721C212.737 233.861 215.421 235.709 216.417 236.387C210.774 235.824 207.484 236.041 205.781 236.647C205.376 236.717 204.999 236.899 204.691 237.171C204.383 237.444 204.156 237.796 204.036 238.19C203.917 238.583 203.909 239.002 204.013 239.399C204.117 239.797 204.329 240.158 204.627 240.442C206.56 243.098 210.587 243.993 211.02 247.471C211.842 254.066 195.073 261.527 188.954 264.139C192.028 260.098 200.268 247.384 196.271 244.31C191.826 240.89 153.711 239.389 150.204 240.284C147.736 240.919 129.596 254.326 129.928 259.045C130.158 262.119 148.011 265.135 151.33 265.712C155.068 266.347 181.738 270.504 184.927 268.469C185.604 268.196 186.218 267.79 186.734 267.274C187.25 266.758 187.656 266.144 187.929 265.467C193.455 263.567 198.774 261.111 203.804 258.136C211.741 253.215 216.186 247.124 208.335 242.001C207.397 241.395 204.829 239.548 205.204 238.509C206.012 236.214 217.168 237.065 217.326 237.065C222.508 240.442 232.422 245.652 238.267 247.168C244.444 248.798 273.307 245.638 280.278 244.757C281.072 247.644 281.837 250.328 282.342 251.973C281.259 252.06 278.171 252.334 277.305 253.012C276.829 253.388 276.843 254.023 277.608 254.456C277.608 259.29 277.016 273.751 278.46 280.274C279.008 282.713 279.643 283.723 282.168 284.604C286.945 286.148 296.124 285.599 300.93 284.315C303.917 283.507 304.307 282.872 304.783 281.284C306.428 275.887 306.342 259.954 306.226 254.297C306.319 254.23 306.394 254.142 306.446 254.041C306.498 253.939 306.525 253.826 306.525 253.712C306.525 253.598 306.498 253.486 306.446 253.384C306.394 253.283 306.319 253.195 306.226 253.128C305.159 252.633 304.009 252.339 302.835 252.262C303.037 250.646 304.119 241.611 304.278 240.024C305.032 239.571 305.705 238.996 306.27 238.321C307.152 237.249 307.726 235.957 307.929 234.583C309.372 232.693 311.451 225.635 312.129 223.326C318.565 223.6 328.004 223.225 328.884 223.326C328.951 223.347 329.024 223.341 329.086 223.308C329.148 223.276 329.195 223.22 329.216 223.153C329.237 223.086 329.231 223.014 329.198 222.951C329.166 222.889 329.11 222.842 329.043 222.821ZM133.968 253.965C134.935 252.897 136.076 251.786 137.288 250.66C142.44 245.898 148.992 241.106 150.421 240.745C153.884 239.851 191.927 242.189 195.794 245.075C196.444 245.566 196.574 246.518 196.444 247.658C195.924 252.19 191.191 259.666 188.434 263.317C185.317 260.632 138.096 254.528 133.968 253.965ZM204.684 114.179C210.197 114.698 225.654 116.473 228.309 121.294C232.061 128.076 229.752 151.211 228.829 158.816C228.02 157.734 227.183 156.709 226.332 155.771C221.44 150.402 213.04 147.704 205.925 146.333C201.355 145.537 196.744 144.992 192.114 144.702C191.97 144.702 192.201 144.918 191.061 142.58C189.358 139.073 189.257 139.131 189.43 139.03C191.322 138.929 193.196 138.61 195.015 138.078C199.893 136.635 202.794 133.748 204.165 126.734C204.909 122.577 205.065 118.336 204.627 114.135L204.684 114.179ZM192.258 145.149C193.168 145.279 193.413 145.265 193.485 145.308C193.485 145.669 196.646 162.626 185.822 163.405C176.874 164.142 170.986 151.586 167.811 143.201C168.966 143.013 169.889 142.883 170.51 142.797C170.813 149.378 180.28 161.313 185.533 160.476C191.436 159.509 194.337 150.532 192.258 145.149ZM170.712 118.595C170.841 117.951 171.129 117.35 171.55 116.846C171.971 116.341 172.511 115.951 173.122 115.708C176.008 115.001 176.008 118.595 178.303 118.393C181.189 118.205 177.971 111.509 180.453 107.425C183.152 102.922 194.091 112.028 202.938 105.274C204.006 112.88 205.175 118.797 203.544 126.561C202.101 133.373 199.417 135.884 194.784 137.241C192.88 137.679 190.953 138.007 189.011 138.222C188.856 138.31 188.726 138.435 188.633 138.586C188.54 138.738 188.486 138.91 188.477 139.088C188.477 139.593 189.921 142.176 191.263 145.193C193.269 149.926 190.657 158.528 185.375 159.35C181.622 159.942 174.276 151.528 172.184 145.582C171.26 142.956 171.534 142.855 173.165 132.594C175.46 132.752 175.936 128.264 176.052 125.941C176.075 125.448 175.904 124.966 175.575 124.598C174.536 123.458 173.685 124.786 171.664 122.26C171.223 121.77 170.907 121.182 170.741 120.544C170.575 119.906 170.565 119.237 170.712 118.595ZM161.576 115.579C163.51 124.411 168.59 130.544 172.083 132.247C171.448 136.303 170.726 140.82 170.539 142.191C162.211 142.608 153.999 144.312 146.192 147.242C142.726 148.569 139.495 150.445 136.624 152.798C135.036 144.572 139.121 128.495 138.616 123.935C138.385 122.001 137.836 119.951 135.946 119.533C142.411 117.498 154.389 116.343 161.576 115.579ZM135.08 119.908C135.425 119.92 135.764 120.001 136.076 120.148C136.389 120.294 136.668 120.502 136.898 120.76C137.549 121.741 137.877 122.902 137.836 124.079C138.154 128.408 133.665 144.37 136.191 153.217C133.758 155.498 131.916 158.336 130.822 161.486C129.668 154.458 127.748 122.463 135.08 119.908ZM83.2263 185.659C83.3418 184.981 84.5829 184.678 85.2612 184.562C90.269 183.74 100.674 186.597 100.443 190.075C100.097 195.228 101.685 257.66 100.328 259.954C98.7116 262.711 89.8794 261.181 86.358 258.727C84.7561 257.616 84.7849 256.664 84.8282 256.851C83.6015 207.711 83.0243 186.785 83.2263 185.659ZM116.679 261.094C117.415 263.548 111.628 269.191 108.944 269.941C106.259 270.691 66.6875 260.445 69.2708 258.107C68.0729 259.189 75.7074 252.161 79.07 251.035C79.338 250.902 79.6443 250.866 79.9359 250.934C80.3255 251.107 81.8553 251.497 84.0634 252.017C84.1932 255.062 84.2798 256.866 84.2798 256.866C85.1313 261.109 98.7116 264.313 101.078 260.402C101.441 259.016 101.635 257.591 101.656 256.159C103.864 256.707 115.193 259.463 116.679 261.094ZM133.276 234.67C129.48 234.814 105.855 229.272 102.045 228.377C101.973 211.463 101.627 192.5 101.8 190.162C102.146 184.851 88.6382 181.965 83.8757 183.523C83.4038 183.627 82.9701 183.86 82.6234 184.197C82.2766 184.533 82.0306 184.96 81.913 185.428C81.5955 187.348 82.8367 221.508 82.9088 223.557C80.5564 222.922 58.5191 217.048 57.6099 214.696C57.3646 209.385 55.0122 158.037 56.6863 153.173C64.5371 155.136 131.587 168.659 136.306 171.935C137.49 175.182 134.791 230.08 133.276 234.67ZM136.667 233.818C136.667 234.785 135.383 235.117 134.43 235.261C135.989 231.524 139.092 174.648 137.504 171.3C135.917 167.951 63.5125 153.881 56.744 151.99C57.045 151.664 57.4115 151.406 57.8194 151.232C58.2273 151.058 58.6674 150.972 59.1108 150.98C61.1168 150.835 135.152 167.374 139.453 169.741C140.174 171.819 139.453 186.294 139.352 188.676C139.092 194.419 136.725 233.039 136.667 233.818ZM175.633 224.048C173.945 226.299 167.955 226.025 165.141 225.765H164.448C165.732 223.184 166.46 220.362 166.584 217.481C168.027 217.077 173.31 215.851 174.118 217.149C174.363 217.525 173.584 217.972 173.18 218.189C172.113 218.684 170.995 219.061 169.846 219.314C169.676 219.347 169.525 219.446 169.428 219.589C169.33 219.733 169.294 219.909 169.326 220.079C169.359 220.249 169.458 220.4 169.601 220.497C169.745 220.595 169.921 220.631 170.091 220.599C171.534 220.397 175.474 219.848 176.874 220.324C176.297 221.125 175.469 221.709 174.522 221.984C173.172 221.975 171.825 222.086 170.495 222.316C170.304 222.352 170.132 222.458 170.013 222.612C169.895 222.767 169.837 222.96 169.851 223.154C169.865 223.349 169.951 223.531 170.091 223.666C170.231 223.802 170.416 223.881 170.611 223.889C172.077 223.932 173.54 223.732 174.94 223.297C175.305 223.313 175.664 223.401 175.994 223.557C175.901 223.751 175.763 223.92 175.59 224.048H175.633ZM189.286 223.543C189.224 223.768 189.11 223.974 188.952 224.145C188.793 224.316 188.596 224.446 188.376 224.524C185.706 225.967 178.967 225.708 175.965 225.404C177.076 224.553 177.726 223.168 176.6 222.403C178.822 220.959 178.592 219.415 177.134 218.968C176.19 218.739 175.214 218.671 174.248 218.766C175.157 218.088 175.489 217.323 174.94 216.5C174.147 215.374 172.054 215.519 170.755 215.735C170.137 210.022 169.819 204.279 169.803 198.532C173.656 201.332 186.428 201.419 190.887 198.763C191.104 203.612 189.646 221.436 189.228 223.543H189.286ZM176.903 220.267C176.903 220.267 176.86 220.296 176.86 220.267H176.903ZM207.874 220.584C210.544 212.777 210.919 196.238 210.76 187.968C212.997 191.562 225.192 208.793 225.278 208.938C225.575 209.391 225.923 209.808 226.317 210.179C229.225 212.836 232.49 215.076 236.016 216.832C239.782 218.824 240.085 218.723 240.057 218.881L239.551 221.046C239.306 221.032 210.082 220.584 207.83 220.584H207.874ZM214.094 227.064C217.197 224.899 238.296 225.881 238.527 225.736V225.895C236.506 235.564 235.727 239.057 235.482 240.327C235.612 239.764 236.405 235.997 237.315 231.827C237.95 228.767 238.758 225.13 239.58 221.277C239.956 219.516 240.201 218.391 240.215 218.304C236.261 216.211 230.229 212.603 227.068 209.414C226.274 208.606 210.933 187.348 210.789 187.102C210.645 186.857 210.645 180.522 210.486 180.233C210.456 180.2 210.416 180.178 210.372 180.168C210.329 180.159 210.283 180.163 210.242 180.18C210.201 180.198 210.167 180.227 210.143 180.265C210.119 180.303 210.108 180.347 210.111 180.392C209.966 180.392 210.111 211.247 207.441 220.541L190.815 220.7C190.916 219.892 191.017 218.953 191.133 217.943C197.829 218.795 200.874 211.449 199.099 205.46C198.046 202.169 195.332 201.664 192.23 203.252C192.374 201.33 192.374 199.4 192.23 197.479C192.363 197.147 192.387 196.781 192.296 196.435C192.205 196.09 192.004 195.782 191.725 195.56C189.574 193.539 183.556 193.323 180.626 193.323C177.697 193.323 171.664 193.553 169.528 195.56C169.341 195.704 169.193 195.892 169.095 196.108C167.999 198.085 170.106 215.418 170.365 215.793C169.109 216.043 167.87 216.376 166.656 216.789V214.48C166.57 209.443 150.464 206.643 149.916 203.771C149.728 202.79 149.425 200.596 149.079 197.998C147.13 183.74 147.419 184.288 147.101 184.288C147.048 184.288 146.996 184.31 146.959 184.347C146.921 184.385 146.899 184.437 146.899 184.49C146.899 184.88 148.458 200.582 149.021 203.916C149.584 207.249 165.574 210.482 165.646 214.48C165.646 217.597 164.954 225.332 162.255 226.444C160.624 227.136 148.011 227.771 137.952 224.235C138.168 221.436 142.18 171.314 140.246 169.092C139.51 168.24 130.866 166.075 129.769 165.801C134.098 155.988 137.302 147.906 167.407 143.187C168.243 145.989 169.265 148.732 170.466 151.398C173.526 157.936 178.707 164.993 185.88 164.387C194.12 163.68 195.448 154.746 194.135 146.592C194.048 146.015 193.961 145.64 193.889 145.308C197.849 145.704 201.785 146.311 205.68 147.126C212.477 148.57 220.833 151.312 225.495 156.478C230.532 162.02 234.933 170.578 238.022 177.419C242.467 187.261 242.438 189.801 246.262 195.473C243.573 203.959 241.319 212.576 239.508 221.291C238.931 223.99 238.065 228.103 237.242 231.841C236.045 237.614 235.323 241.265 235.395 240.5C235.265 241.279 235.395 241.251 235.395 241.438C230.69 239.34 226.151 236.889 221.815 234.107C220.299 233.097 212.564 228.146 214.094 227.035V227.064ZM192.114 206.196C192.114 205.445 192.201 204.753 192.23 204.031C194.842 202.977 197.165 203.136 197.872 205.864C199.316 210.814 197.035 217.409 191.219 217.409C191.219 216.717 191.465 214.739 191.494 214.523C198.132 215.418 198.089 203.266 192.114 206.196ZM191.551 213.902C191.753 211.622 191.927 209.212 192.071 206.946C192.762 206.733 193.501 206.733 194.192 206.946C195.91 207.567 195.636 213.527 191.479 213.902H191.551ZM238.758 245.926C233.204 244.11 227.832 241.781 222.71 238.97C221.266 238.205 213.791 234.136 213.286 232.563C212.849 231.158 212.804 229.661 213.156 228.233C215.09 232 227.357 238.335 231.296 240.197C233.1 241.048 234.962 241.772 236.867 242.362C243.535 244.743 272.138 240.919 279.167 240.053C279.253 240.356 279.859 242.679 280.09 243.516C273.971 244.223 244.502 247.442 238.686 245.926H238.758ZM303.239 282.222C301.132 284.012 288.49 285.513 282.529 283.666C280.365 282.987 279.932 282.295 279.412 280.101C278.939 277.721 278.64 275.309 278.517 272.885C281.476 274.703 286.902 275.165 290.38 275.266C295.619 275.382 300.771 275.266 304.985 272.885C304.899 274.415 304.408 281.227 303.239 282.222ZM305.028 272.322C302.182 273.54 299.119 274.173 296.023 274.184C291.896 274.386 282.226 274.357 278.488 272.365C278.33 269.652 278.229 266.752 278.185 264.053C279.629 265.785 287.321 266.564 290.395 266.665C295.879 266.78 300.973 266.665 305.36 264.067C305.36 263.923 305.317 267.343 305.043 272.322H305.028ZM305.36 263.562C298.144 267.199 280.235 265.554 278.171 263.562V254.687C282.76 256.317 300.901 256.202 305.447 254.687C305.418 256.346 305.433 259.723 305.375 263.562H305.36ZM302.474 253.85C302.526 253.864 302.581 253.859 302.629 253.835C302.677 253.811 302.714 253.77 302.734 253.72C302.734 253.72 302.734 253.46 302.82 252.998C303.751 253.126 304.668 253.334 305.562 253.619C302.402 255.062 283.381 255.192 278.633 253.792C278.6 253.782 278.572 253.762 278.552 253.734C278.532 253.707 278.521 253.674 278.521 253.64C278.521 253.606 278.532 253.573 278.552 253.546C278.572 253.519 278.6 253.499 278.633 253.489C279.956 253.129 281.308 252.888 282.674 252.767C282.769 253.169 282.915 253.556 283.107 253.922C283.222 254.037 283.41 254.052 283.395 253.763C283.381 253.474 278.647 234.785 277.926 230.672C278.664 230.918 279.451 230.98 280.218 230.852C280.985 230.723 281.709 230.409 282.327 229.936C283.915 234.381 288.98 254.383 289.283 254.383C289.338 254.38 289.39 254.355 289.427 254.315C289.465 254.275 289.486 254.222 289.485 254.167L289.067 252.219H291.058C291.058 252.493 291.217 253.893 291.232 253.994C291.246 254.095 291.665 254.34 291.636 253.806C291.636 252.507 290.423 230.99 290.395 230.6C290.602 230.5 290.82 230.422 291.044 230.369C291.203 231.148 296.283 251.728 296.672 253.33C296.672 253.474 296.672 253.72 296.947 253.662C297.221 253.604 297.105 253.344 296.947 252.406L299.155 252.565V252.81C299.155 253.041 299.516 252.984 299.559 252.81C299.559 252.969 302.243 225.275 302.445 223.067C302.826 223.355 303.263 223.559 303.728 223.666C304.193 223.773 304.676 223.78 305.144 223.687C305.115 223.904 302.157 253.748 302.46 253.85H302.474ZM289.485 225.159C289.314 223.771 288.708 222.473 287.754 221.45C289.731 222.042 290.149 222.475 290.64 223.831C291.03 224.912 291.135 226.075 290.943 227.208C290.748 227.922 290.748 228.674 290.943 229.388C290.707 229.442 290.475 229.514 290.25 229.604C289.356 227.05 287.364 227.079 287.364 224.51C287.361 223.581 287.225 222.658 286.96 221.768C287.659 223.034 288.425 224.263 289.255 225.448C289.399 225.635 289.673 225.361 289.5 225.159H289.485ZM290.207 243.372C290.279 244.079 290.842 250.213 290.986 251.771H288.923C288.49 249.823 287.84 246.937 287.104 243.848L290.207 243.372ZM290.12 242.261L286.83 242.694C286.541 241.496 286.238 240.284 285.935 239.086C287.263 238.898 288.562 238.696 289.817 238.494C289.875 239.115 290.077 241.626 290.135 242.261H290.12ZM294.609 241.597C294.378 240.5 293.815 238.018 293.772 237.874C295.027 237.657 299.299 236.921 300.179 236.748C300.179 237.368 299.934 239.995 299.876 240.659C298.476 240.962 296.687 241.279 294.58 241.597H294.609ZM299.819 241.597C299.559 245.335 299.155 251.584 299.14 251.93C298.39 251.93 297.596 251.901 296.759 251.843C296.413 250.097 294.926 243.098 294.825 242.622C296.773 242.232 298.448 241.886 299.833 241.554L299.819 241.597ZM302.575 221.869C302.751 220.04 303.035 218.223 303.427 216.428C303.812 216.312 304.218 216.285 304.615 216.347C305.012 216.41 305.39 216.561 305.721 216.789C305.635 218.602 305.442 220.409 305.144 222.201C305.014 222.706 304.985 222.836 304.653 222.879C304.004 222.922 302.691 222.374 302.589 221.825L302.575 221.869ZM304.466 239.071C304.596 238.003 304.725 236.921 304.841 235.839C305.696 235.659 306.535 235.413 307.352 235.103C306.897 236.714 305.878 238.107 304.48 239.028L304.466 239.071ZM306.876 233.905C306.267 234.147 305.639 234.34 305 234.482C305.259 232.058 306.789 217.943 306.789 216.947C306.789 215.504 304.22 214.97 302.893 215.504C302.445 215.706 302.315 216.558 302.185 217.308C301.464 221.335 300.612 231.379 300.28 235.463L293.512 236.705C291.823 229.344 291.968 229.748 291.78 229.561C291.651 229.438 291.482 229.366 291.304 229.359C291.17 228.716 291.205 228.05 291.405 227.425C291.703 226.177 291.663 224.871 291.289 223.644C291.097 222.751 290.584 221.96 289.846 221.421C288.672 220.799 287.405 220.37 286.094 220.151C286.025 220.133 285.953 220.131 285.883 220.146C285.814 220.161 285.749 220.192 285.694 220.237C285.639 220.283 285.595 220.34 285.567 220.406C285.539 220.471 285.526 220.542 285.531 220.613C285.562 220.736 285.601 220.856 285.647 220.974C286.772 223.658 285.993 224.885 286.772 226.487C287.552 228.089 288.865 228.334 289.341 230.181C289.341 230.326 289.745 236.993 289.76 237.397L285.675 238.047C285.387 236.95 283.41 229.142 282.63 228.377C281.187 226.934 277.06 228.551 276.858 229.821C276.728 230.542 278.705 238.278 278.892 239.014C271.46 240.096 263.58 241.077 256.61 241.727C253.565 242.001 234.962 243.704 236.001 240.659C237.444 233.991 240.331 221.753 240.908 219.184V218.982C240.908 218.766 241.009 218.549 240.908 219.184C240.908 218.968 240.995 218.838 241.023 218.766L244.631 204.81C245.108 203.093 248.384 191.418 250.043 190.595C253.723 188.777 314.207 180.955 319.316 184.375C320.182 188.084 309.546 232.144 306.89 233.919L306.876 233.905Z'
        fill='#0B3721'
      />
      <path
        d='M189.964 117.83V116.719C189.964 116.539 189.892 116.366 189.765 116.239C189.638 116.112 189.465 116.04 189.286 116.04C189.104 116.04 188.93 116.111 188.801 116.238C188.671 116.365 188.597 116.537 188.593 116.719V118.017C188.625 118.189 188.722 118.342 188.863 118.444C189.005 118.546 189.181 118.589 189.354 118.565C189.526 118.541 189.683 118.451 189.792 118.314C189.9 118.177 189.951 118.004 189.935 117.83H189.964ZM282.197 206.643C281.779 206.239 281.187 205.763 280.639 205.936C279.73 206.224 278.82 208.534 278.431 209.486C277.336 212.328 276.468 215.253 275.833 218.232C276.425 219.761 286.412 217.755 287.768 217.092C288.201 216.89 288.143 216.37 287.999 215.908C286.571 212.531 284.612 209.403 282.197 206.643ZM276.223 218.044C276.482 216.846 279.773 207.668 280.899 206.831C282.645 207.826 286.152 213.945 287.09 216.255C285.791 216.774 276.973 219.011 276.223 218.044ZM158.719 248.654C158.575 248.755 155.429 250.747 155.284 250.891C155.25 250.905 155.221 250.929 155.2 250.96C155.18 250.991 155.169 251.027 155.169 251.064C155.169 251.101 155.18 251.137 155.2 251.168C155.221 251.199 155.25 251.223 155.284 251.237C156.092 251.468 158.791 251.771 159.614 251.858C179.357 246.908 179.486 246.908 179.241 246.908C179.374 246.89 179.494 246.821 179.578 246.716C179.661 246.611 179.701 246.478 179.688 246.345C179.688 246.099 179.299 244.397 179.183 243.877L158.719 248.654ZM196.963 111.797C197.367 111.797 198.161 111.985 198.32 111.999C199.196 112.09 200.064 112.245 200.918 112.461L202.216 112.692C202.266 112.704 202.318 112.699 202.364 112.677C202.41 112.654 202.446 112.616 202.467 112.57C202.487 112.523 202.491 112.471 202.477 112.422C202.463 112.373 202.432 112.331 202.39 112.302C201.637 111.664 200.723 111.245 199.749 111.09C198.784 110.883 197.779 110.969 196.862 111.335C196.832 111.342 196.803 111.355 196.778 111.372C196.752 111.39 196.731 111.413 196.714 111.439C196.697 111.465 196.686 111.494 196.68 111.525C196.675 111.555 196.675 111.587 196.682 111.617C196.688 111.647 196.701 111.676 196.719 111.701C196.737 111.727 196.759 111.749 196.785 111.765C196.811 111.782 196.841 111.794 196.871 111.799C196.902 111.804 196.933 111.804 196.963 111.797ZM185.533 113.067C185.923 112.981 186.76 112.851 186.976 112.822C187.851 112.631 188.739 112.506 189.632 112.447L191.075 112.288C191.133 112.288 191.188 112.265 191.228 112.225C191.269 112.184 191.292 112.129 191.292 112.071C191.292 112.014 191.269 111.959 191.228 111.918C191.188 111.878 191.133 111.855 191.075 111.855C190.145 111.461 189.124 111.329 188.124 111.474C187.124 111.619 186.183 112.035 185.403 112.678C185.369 112.678 185.335 112.686 185.305 112.701C185.274 112.717 185.248 112.74 185.228 112.768C185.208 112.795 185.195 112.828 185.189 112.861C185.184 112.895 185.187 112.93 185.198 112.963C185.209 112.995 185.227 113.025 185.252 113.049C185.276 113.073 185.306 113.09 185.339 113.101C185.372 113.111 185.406 113.113 185.44 113.107C185.474 113.102 185.506 113.088 185.533 113.067ZM199.965 115.578C199.785 115.578 199.613 115.65 199.485 115.777C199.358 115.904 199.287 116.077 199.287 116.257V117.556C199.312 117.735 199.407 117.898 199.552 118.008C199.697 118.117 199.879 118.165 200.059 118.14C200.239 118.115 200.401 118.02 200.511 117.875C200.621 117.73 200.668 117.548 200.643 117.368V116.257C200.645 116.167 200.629 116.078 200.596 115.995C200.562 115.912 200.512 115.836 200.449 115.773C200.386 115.709 200.31 115.659 200.227 115.626C200.144 115.593 200.055 115.576 199.965 115.578ZM87.96 240.875C89.966 241.525 94.6419 243.271 96.7922 243.011C97.052 243.011 97.3406 242.751 97.5282 242.289C98.9714 239.042 97.9323 222.532 97.4128 219.343C97.052 217.048 88.7537 214.205 86.7477 215.836C85.4488 216.89 86.0983 229.113 86.2426 230.816C86.6178 234.929 86.2282 240.312 87.96 240.875ZM87.3971 216.601C88.9558 215.475 96.1861 218.145 96.417 219.487C96.7778 221.753 98.12 240.803 96.6768 242.289C94.8151 242.564 89.8794 241.048 88.0177 240.471C86.7044 240.038 87.1518 234.294 86.9353 230.744C86.8343 228.348 86.6755 218.838 87.3971 216.601ZM189.949 126.474C189.914 126.457 189.874 126.447 189.834 126.447C189.794 126.447 189.754 126.457 189.719 126.474C189.358 126.604 189.141 127.008 189.084 127.6C189.037 129.129 189.55 130.622 190.527 131.8C190.756 132.112 191.045 132.375 191.378 132.574C191.711 132.772 192.08 132.901 192.464 132.954C192.848 133.006 193.238 132.981 193.612 132.879C193.986 132.778 194.335 132.602 194.64 132.363C195.51 131.647 196.193 130.731 196.631 129.693C196.671 129.612 196.691 129.523 196.691 129.433C196.691 129.343 196.671 129.254 196.631 129.173C196.184 128.48 195.116 129.462 189.949 126.474ZM189.82 126.965C191.387 128.3 193.223 129.284 195.203 129.851C192.114 135.105 189.011 128.019 189.82 126.965ZM193.355 123.574C194.279 123.747 196.833 123.429 197.382 122.491C197.656 122.044 197.382 121.9 196.776 120.052C196.229 118.447 195.589 116.876 194.856 115.347C194.596 114.943 194.265 115.347 194.452 115.593C194.853 117.805 195.492 119.968 196.357 122.044C195.313 122.533 194.243 122.966 193.153 123.343C193.151 123.371 193.155 123.4 193.164 123.427C193.173 123.454 193.188 123.479 193.206 123.5C193.225 123.522 193.248 123.539 193.274 123.552C193.299 123.564 193.327 123.572 193.355 123.574ZM246.58 273.65C251.992 270.215 247.778 267.054 244.199 268.555C243.318 266.953 243.116 266.824 241.312 266.91C231.946 267.386 189.646 277.171 189.242 277.33C187.106 278.21 192.533 290.953 194.683 292.628C195.174 293.003 195.015 293.075 200.311 292.036C200.658 295.182 202.029 300.695 205.233 300.868C206.726 300.595 208.18 300.139 209.562 299.512C212.239 302.174 215.088 304.657 218.091 306.944C221.411 309.166 242.625 284.387 245.8 281.501C246.71 281.198 247.518 280.996 247.417 278.744C250.159 278.239 252.28 276.551 250.823 274.126C249.841 272.654 248.138 272.885 246.58 273.65ZM247.085 269.724C247.677 269.941 247.98 270.172 247.792 270.763C247.403 271.668 246.834 272.483 246.118 273.159C245.735 271.985 245.287 270.834 244.776 269.71C245.523 269.441 246.341 269.446 247.085 269.724ZM231.729 269.248C232.263 271.774 232.624 273.145 233.303 275.468L223.301 277.359C222.726 275.271 222.057 273.21 221.295 271.182C223.186 270.821 230.185 269.508 231.729 269.248ZM216.937 288.515C217.466 290.328 218.248 292.057 219.26 293.652C216.489 294.994 213.877 296.221 211.655 297.231C210.857 294.811 209.736 292.51 208.321 290.391L216.937 288.515ZM212.853 288.515C212.365 286.007 211.748 283.526 211.005 281.082L222.551 278.585C223.181 281.03 223.942 283.439 224.831 285.801C220.862 286.638 216.72 287.576 212.853 288.457V288.515ZM217.658 288.587C217.5 288.356 216.518 288.702 227.14 286.263C227.328 287.336 227.725 288.361 228.309 289.279L219.852 293.421C219.35 291.697 218.612 290.051 217.658 288.529V288.587ZM227.761 286.104C233.245 284.834 238.281 283.622 241.76 282.699L229.016 288.919C228.78 287.894 228.36 286.921 227.775 286.047L227.761 286.104ZM225.322 285.657C224.859 283.195 224.271 280.757 223.561 278.355L233.418 275.93C233.418 276.002 234.082 278.225 234.385 279.177C234.529 279.61 235.756 283.103 235.828 283.16C232.841 283.824 225.553 285.542 225.307 285.599L225.322 285.657ZM220.862 271.326C221.339 273.953 221.786 275.656 222.306 277.618L210.76 280.158C210.082 277.864 209.62 276.363 208.624 273.765C210.876 273.246 219.131 271.6 220.877 271.269L220.862 271.326ZM208.148 273.852C208.711 276.738 209.129 278.253 209.735 280.389C208.768 280.606 200.874 282.583 200.874 282.583C200.586 282.583 200.701 283.03 200.99 282.973C200.99 282.973 209.548 281.385 209.981 281.284C209.981 281.284 210.601 283.766 212.376 288.63L203.068 290.708C201.736 285.674 200.063 280.736 198.06 275.93L208.148 273.852ZM195.087 292.137C192.894 290.492 187.871 278.369 189.387 277.705C189.387 277.705 192.691 276.984 197.656 275.944C198.893 281.002 200.544 285.95 202.592 290.737C195.001 292.44 195.332 292.267 195.102 292.079L195.087 292.137ZM205.189 299.815C202.75 299.815 201.293 294.547 200.86 292.151C200.86 291.877 200.095 292.151 207.643 290.578C208.018 290.506 207.426 290.405 209.23 294.157C209.748 295.336 210.386 296.458 211.135 297.506C209.237 298.415 207.268 299.168 205.247 299.757L205.189 299.815ZM218.64 305.991C215.706 303.935 212.887 301.719 210.197 299.353C212.68 298.328 215.494 297.015 217.918 295.86C219.816 298.067 221.967 300.043 224.326 301.748C223.345 302.585 220.011 305.674 218.698 305.934L218.64 305.991ZM224.744 301.315C222.838 299.188 220.704 297.276 218.38 295.615L227.443 291.156C228.706 292.452 230.168 293.538 231.773 294.374C229.503 296.722 227.179 299.018 224.802 301.258L224.744 301.315ZM232.263 293.912C231.06 292.683 229.69 291.629 228.194 290.78C234.399 287.649 237.964 285.744 243.751 282.54C241.182 284.806 234.659 291.473 232.321 293.854L232.263 293.912ZM246.031 280.346C245.411 280.794 236.91 282.872 236.174 283.045C235.255 278.323 233.908 273.696 232.148 269.219C234.948 268.743 240.49 267.776 242.553 268.007C242.832 268.335 243.074 268.693 243.275 269.075C242.29 269.744 241.475 270.633 240.894 271.673C240.749 272.033 241.125 272.221 241.312 272.048C242.034 271.284 242.878 270.645 243.809 270.157C244.464 271.51 245.032 272.903 245.512 274.328C244.23 275.205 243.074 276.254 242.077 277.445C241.889 277.676 241.947 277.849 242.077 277.922C242.423 278.124 242.452 277.604 245.858 275.584C246.202 276.752 246.396 277.96 246.435 279.177C246.363 279.437 246.32 280.101 246.089 280.288L246.031 280.346ZM249.625 276.478C248.98 277.217 248.169 277.791 247.258 278.152C247.125 277.124 246.918 276.106 246.637 275.107C247.576 274.631 249.033 274.025 249.524 274.905C249.709 275.108 249.824 275.364 249.852 275.637C249.881 275.91 249.821 276.184 249.683 276.421L249.625 276.478Z'
        fill='#0B3721'
      />
    </svg>
  );
};

export default DesingerIcon;


import React from 'react';

const ArrowRightSm = () => {
  return (
    <svg width='12' height='12' viewBox='0 0 12 12' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path d='M2.5 6H9.5' stroke='black' strokeWidth='1.2' strokeLinecap='round' strokeLinejoin='round' />
      <path
        d='M6 2.5L9.5 6L6 9.5'
        stroke='black'
        strokeWidth='1.2'
        strokeLinecap='round'
        strokeLinejoin='round'
      />
    </svg>
  );
};

export default ArrowRightSm;


import React from 'react';

const TickIcon = () => {
  return (
    <svg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        d='M12 2C6.49 2 2 6.49 2 12C2 17.51 6.49 22 12 22C17.51 22 22 17.51 22 12C22 6.49 17.51 2 12 2ZM16.78 9.7L11.11 15.37C10.97 15.51 10.78 15.59 10.58 15.59C10.38 15.59 10.19 15.51 10.05 15.37L7.22 12.54C6.93 12.25 6.93 11.77 7.22 11.48C7.51 11.19 7.99 11.19 8.28 11.48L10.58 13.78L15.72 8.64C16.01 8.35 16.49 8.35 16.78 8.64C17.07 8.93 17.07 9.4 16.78 9.7Z'
        fill='#227BFF'
      />
    </svg>
  );
};

export default TickIcon;


import React from 'react';

const ArrowWhite = () => {
  return (
    <svg width='16' height='16' viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        d='M3.3335 8H12.6668'
        stroke='white'
        strokeWidth='1.6'
        strokeLinecap='round'
        strokeLinejoin='round'
      />
      <path
        d='M8 3.33333L12.6667 8L8 12.6667'
        stroke='white'
        strokeWidth='1.6'
        strokeLinecap='round'
        strokeLinejoin='round'
      />
    </svg>
  );
};

export default ArrowWhite;


import React from 'react';

const LightningIcon = () => {
  return (
    <svg width='34' height='34' viewBox='0 0 34 34' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <rect width='34' height='34' rx='8' fill='#227BFF' />
      <path
        d='M23.1726 16.3088C23.1513 16.2187 23.1081 16.1352 23.0468 16.0657C22.9854 15.9963 22.9079 15.9431 22.8211 15.9108L18.7704 14.3914L19.8012 9.23538C19.8245 9.11558 19.8082 8.99144 19.7548 8.8817C19.7014 8.77195 19.6138 8.68255 19.5051 8.62698C19.3964 8.57142 19.2727 8.5527 19.1524 8.57367C19.0322 8.59463 18.922 8.65413 18.8386 8.74319L10.9636 17.1807C10.8996 17.2481 10.8533 17.3303 10.8289 17.4199C10.8045 17.5096 10.8026 17.6039 10.8235 17.6944C10.8444 17.7849 10.8874 17.8689 10.9486 17.9387C11.0099 18.0086 11.0875 18.0622 11.1745 18.0948L15.2266 19.6142L14.1987 24.7646C14.1753 24.8844 14.1916 25.0085 14.245 25.1183C14.2984 25.228 14.386 25.3174 14.4947 25.373C14.6034 25.4286 14.7271 25.4473 14.8474 25.4263C14.9676 25.4053 15.0778 25.3458 15.1612 25.2568L23.0362 16.8193C23.099 16.7519 23.1443 16.6701 23.1681 16.5811C23.1919 16.4921 23.1934 16.3986 23.1726 16.3088ZM15.69 23.0469L16.4262 19.3639C16.4525 19.2333 16.4316 19.0975 16.3672 18.9809C16.3029 18.8642 16.1991 18.7742 16.0746 18.7269L12.3593 17.3312L18.3091 10.9566L17.5737 14.6396C17.5473 14.7702 17.5682 14.9059 17.6326 15.0226C17.6969 15.1393 17.8007 15.2293 17.9252 15.2766L21.6377 16.6688L15.69 23.0469Z'
        fill='white'
      />
    </svg>
  );
};

export default LightningIcon;


import React from 'react';

const ArrowRightMd = () => {
  return (
    <svg width='16' height='16' viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        d='M3.3335 8H12.6668'
        stroke='white'
        strokeWidth='1.6'
        strokeLinecap='round'
        strokeLinejoin='round'
      />
      <path
        d='M8 3.33333L12.6667 8L8 12.6667'
        stroke='white'
        strokeWidth='1.6'
        strokeLinecap='round'
        strokeLinejoin='round'
      />
    </svg>
  );
};

export default ArrowRightMd;


import React from 'react';

const ArrowBlack = () => {
  return (
    <svg width='21' height='20' viewBox='0 0 21 20' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        d='M4.66602 10H16.3327'
        stroke='#030712'
        strokeWidth='2'
        strokeLinecap='round'
        strokeLinejoin='round'
      />
      <path
        d='M10.5 4.16675L16.3333 10.0001L10.5 15.8334'
        stroke='#030712'
        strokeWidth='2'
        strokeLinecap='round'
        strokeLinejoin='round'
      />
    </svg>
  );
};

export default ArrowBlack;


import React from 'react';

const ArrowRightSm = () => {
  return (
    <svg width='12' height='12' viewBox='0 0 12 12' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path d='M2.5 6H9.5' stroke='white' strokeWidth='1.2' strokeLinecap='round' strokeLinejoin='round' />
      <path
        d='M6 2.5L9.5 6L6 9.5'
        stroke='white'
        strokeWidth='1.2'
        strokeLinecap='round'
        strokeLinejoin='round'
      />
    </svg>
  );
};

export default ArrowRightSm;


import React from 'react';

const DesignerIcon = () => {
  return (
    <svg viewBox='0 0 386 387' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <g clipPath='url(#clip0_216_669)'>
        <rect x='1' y='1' width='384' height='385' rx='8' fill='white' />
        <path
          d='M257.523 119.965C259.866 121.441 261.723 123.574 262.862 126.098C264.391 129.679 265.468 133.436 266.066 137.283C265.182 137.306 264.302 137.417 263.44 137.615C263.339 137.615 262.761 137.918 262.66 138.235C262.198 139.835 261.846 141.465 261.607 143.113L232.743 143.287C232.411 143.287 232.455 143.676 232.743 143.691C232.743 143.691 259.096 144.095 261.607 144.109C260.972 149.362 261.506 155.135 265.229 158.858C268.736 162.322 280.657 162.813 285.087 159.508C288.768 156.751 289.677 148.785 289.417 144.109C290.283 144.109 309.795 143.763 311.728 143.691C311.782 143.691 311.833 143.669 311.871 143.631C311.909 143.594 311.931 143.542 311.931 143.489C311.931 143.435 311.909 143.384 311.871 143.346C311.833 143.308 311.782 143.287 311.728 143.287C308.438 143.287 289.374 143.142 289.374 143.142C288.984 138.813 287.93 138.38 287.93 138.178C287.919 138.044 287.865 137.918 287.777 137.816C287.688 137.715 287.571 137.645 287.44 137.615C286.184 137.369 284.909 137.239 283.63 137.225C285.65 133.978 287.382 125.146 290.557 119.229C295.262 110.411 312.97 118.81 312.681 111.017C312.335 102.358 302.723 97.4944 292.404 102.084C282.605 106.413 280.051 126.618 279.878 137.167C276.919 137.167 278.348 137.254 274.105 137.167C277.814 132.232 282.533 115.78 281.71 104.277C280.768 96.6441 277.555 89.4696 272.488 83.6832C268.043 78.7043 262.834 76.5972 258.908 80.5948C253.135 86.3675 258.446 92.8185 263.382 99.3561C268.808 106.572 270.843 110.166 271.579 120.441C271.924 126.016 271.818 131.61 271.262 137.167H269.66C270.901 133.112 269.299 124.179 268.13 119.979C266.456 114.048 263.598 108.073 259.067 103.96C253.714 99.3375 247.203 96.2593 240.233 95.0555C235.976 94.3339 232.339 94.6081 230.362 95.7915C229.635 96.1697 229.074 96.8034 228.786 97.5708C228.498 98.3382 228.504 99.1849 228.803 99.9479C231.199 107.784 248.142 114.192 257.523 119.965ZM292.693 103.007C302.348 98.6779 311.238 103.224 311.541 111.075C311.772 117.093 294.41 109.632 289.677 118.853C286.386 125.232 284.929 134.151 282.937 137.24H281.912C283.356 130.875 286.891 116.718 291.048 111.71C296.359 105.23 305.609 109.011 306.013 108.91C306.172 108.91 306.331 108.65 305.855 108.477C300.082 106.384 294.208 106.428 290.283 111.075C285.564 116.645 282.591 130.067 281.35 137.283H280.108C280.498 127.181 283.327 107.12 292.693 103.007ZM272.315 120.427C271.738 110.238 269.862 106.5 264.161 98.7789C259.485 92.501 254.478 86.5119 259.644 81.2731C263.166 77.694 267.755 79.8299 271.738 84.3327C276.615 89.9786 279.691 96.955 280.57 104.364C281.508 116.054 276.746 132.838 273.354 137.182H272.589C274.133 130.574 275.132 123.85 275.577 117.078C275.909 111.306 275.808 107.294 274.134 102.271C272.758 98.4475 270.849 94.8374 268.462 91.5485C267.323 89.9263 266.069 88.3878 264.71 86.9448C264.675 86.9027 264.626 86.876 264.571 86.8706C264.517 86.8652 264.463 86.8815 264.421 86.9159C264.379 86.9504 264.352 87.0002 264.347 87.0543C264.341 87.1084 264.358 87.1625 264.392 87.2046C264.754 87.5823 265.091 87.9824 265.402 88.4024C269.905 94.1751 274.35 102.603 274.697 110.05C275.043 117.497 273.556 129.923 272.185 137.283H271.781C272.419 131.688 272.597 126.05 272.315 120.427ZM287.021 138.842C289.403 141.021 288.652 155.496 284.337 158.729C280.022 161.961 268.779 161.196 265.72 158.238C260.9 153.605 261.39 144.932 263.036 138.495C263.138 138.63 263.279 138.731 263.44 138.784C264.549 139.04 265.679 139.194 266.817 139.246C265.404 144.483 265.651 150.03 267.524 155.121C267.593 155.266 267.717 155.378 267.868 155.432C268.02 155.486 268.187 155.478 268.332 155.409C268.478 155.34 268.59 155.216 268.644 155.065C268.698 154.913 268.69 154.746 268.621 154.601C266.802 150.964 266.312 142.882 267.365 139.347C271.868 139.549 283.918 139.635 287.021 138.842ZM258.446 104.696C268.231 113.355 270.742 132.535 269.227 137.211H268.332C268.127 133.2 267.429 129.231 266.254 125.391C263.137 115.289 257.912 109.083 249.903 104.407C245.719 102.014 241.241 100.175 236.582 98.9376C236.529 98.9242 236.472 98.9327 236.425 98.9611C236.377 98.9895 236.343 99.0356 236.33 99.0892C236.316 99.1427 236.325 99.1995 236.353 99.2468C236.382 99.2942 236.428 99.3283 236.481 99.3417C241.92 101.066 247.081 103.564 251.808 106.76C257.049 110.249 261.141 115.21 263.57 121.018C265.874 126.153 267.336 131.625 267.899 137.225H266.543C266.009 133.264 264.981 129.385 263.483 125.68C262.313 123.015 260.392 120.748 257.956 119.157C248.416 113.283 231.978 106.846 229.785 99.6304C227.75 93.0062 247.363 94.7668 258.446 104.696ZM133.655 179.005C114.432 172.323 97.2 169.336 86.4771 166.637C86.3444 166.6 86.2054 166.59 86.0686 166.607C85.9318 166.625 85.8 166.67 85.681 166.74C85.5621 166.81 85.4585 166.903 85.3764 167.014C85.2943 167.125 85.2355 167.251 85.2034 167.385C85.1713 167.519 85.1666 167.659 85.1897 167.795C85.2127 167.931 85.263 168.061 85.3374 168.177C85.4119 168.293 85.5091 168.393 85.6231 168.47C85.7371 168.548 85.8656 168.602 86.0009 168.629C92.8993 170.288 103.319 172.193 114.59 174.806C133.207 179.135 133.611 180.42 133.914 179.525C133.947 179.421 133.938 179.309 133.889 179.213C133.841 179.116 133.757 179.041 133.655 179.005ZM285.982 190.681C285.982 190.646 285.975 190.613 285.962 190.581C285.949 190.55 285.93 190.521 285.906 190.497C285.882 190.473 285.853 190.454 285.822 190.441C285.79 190.427 285.757 190.421 285.722 190.421C273.066 190.421 260.755 193.307 253.785 193.957C253.7 193.964 253.617 193.988 253.542 194.028C253.467 194.067 253.4 194.122 253.346 194.188C253.292 194.254 253.252 194.33 253.229 194.412C253.205 194.493 253.198 194.579 253.208 194.664C253.215 194.749 253.239 194.832 253.278 194.908C253.318 194.984 253.372 195.052 253.438 195.107C253.504 195.162 253.58 195.203 253.661 195.229C253.743 195.254 253.829 195.263 253.915 195.255C259.024 194.75 267.87 192.816 276.154 191.748C285.347 190.681 285.997 191.33 285.982 190.681ZM242.384 220.713C242.396 220.689 242.404 220.664 242.406 220.637C242.409 220.61 242.406 220.583 242.398 220.558C242.39 220.532 242.377 220.509 242.359 220.488C242.342 220.468 242.321 220.451 242.297 220.439L241.936 220.251L241.85 220.684C242.095 220.8 242.283 220.987 242.384 220.713Z'
          fill='#227BFF'
        />
        <path
          d='M330.042 224.321C326.333 223.556 317.169 223.859 313.388 224.191C316.505 213.541 319.724 199.657 321.023 192.008C321.493 189.892 321.697 187.725 321.629 185.557C321.581 185.363 321.494 185.18 321.372 185.021C321.251 184.862 321.097 184.73 320.922 184.634C315.149 181.011 254.665 188.963 250.451 191.056C249.196 191.676 248.07 194.808 247.565 196.222C243.827 190.075 244.217 188.617 240.046 178.904C237.447 172.578 234.15 166.561 230.218 160.966C230.319 160.201 234.316 130.341 230.03 122.361C227.144 117.021 211.514 115.145 205.496 114.64C205.496 114.322 204.746 108.867 204.428 106.399C209.508 102.156 211.644 94.3485 206.131 93.0352C202.22 92.1115 186.778 89.1675 175.276 92.1404C168.06 94.0165 162.287 98.2306 161.797 106.572C161.603 109.74 161.797 112.919 162.374 116.039C154.913 116.862 142.068 118.089 135.516 120.557C127.088 123.732 130.638 160.605 131.533 163.592C131.043 164.804 130.581 166.031 130.162 167.171C109.164 161.817 62.1596 151.83 60.067 152.018C59.522 152.011 58.9837 152.14 58.5003 152.391C58.0168 152.643 57.6031 153.011 57.2961 153.461C56.7333 153.591 56.5312 154.385 56.4302 154.904C54.987 162.582 57.5992 208.432 58.061 216.211C58.8259 219.01 81.0653 225.086 83.9516 225.88C84.0959 229.675 84.8608 248.523 85.0196 252.391C83.764 252.162 82.5212 251.868 81.2962 251.511C78.7273 250.457 68.8848 260.04 69.7507 259.246C65.984 262.594 106.97 273.606 110.246 272.682C113.522 271.758 120.002 265.567 118.905 262.118C118.602 261.504 118.091 261.018 117.462 260.747C114.359 259.116 106.148 257.11 102.727 256.288C103.059 249.303 103.059 237.844 103.045 230.888C107.1 231.898 130.119 237.469 134.275 237.396C134.573 237.401 134.867 237.326 135.127 237.18C136.454 236.992 138.013 236.66 138.143 235.304C138.143 234.9 138.475 231.378 138.893 226.154C149.068 230.036 161.407 229.748 163.601 228.853C164.192 228.568 164.692 228.123 165.044 227.568C165.145 227.698 165.188 227.669 165.953 227.785C168.839 228.247 173.458 228.68 176.055 227.323C179.735 227.915 190.4 228.766 191.194 225.202C191.295 224.725 191.44 223.758 191.584 222.589C202.263 223.167 240.19 222.907 240.334 222.907L239.454 226.876C239.432 226.843 239.402 226.816 239.366 226.799C239.331 226.781 239.292 226.773 239.252 226.775C239.252 226.659 239.252 226.688 239.252 226.775C233.342 226.309 227.412 226.155 221.487 226.313C219.38 226.414 213.823 226.674 213.722 228.723C212.984 230.465 212.877 232.409 213.419 234.221C213.737 235.361 216.421 237.209 217.417 237.887C211.774 237.324 208.484 237.541 206.781 238.147C206.376 238.217 205.998 238.399 205.69 238.671C205.382 238.944 205.156 239.296 205.036 239.69C204.916 240.083 204.908 240.502 205.012 240.899C205.116 241.297 205.329 241.658 205.626 241.942C207.56 244.598 211.586 245.493 212.019 248.971C212.842 255.566 196.072 263.027 189.953 265.639C193.027 261.598 201.268 248.884 197.27 245.81C192.825 242.39 154.711 240.889 151.204 241.784C148.736 242.419 130.595 255.826 130.927 260.545C131.158 263.619 149.01 266.635 152.329 267.212C156.067 267.847 182.737 272.004 185.927 269.969C186.603 269.696 187.217 269.29 187.733 268.774C188.249 268.258 188.656 267.644 188.928 266.967C194.455 265.067 199.774 262.611 204.803 259.636C212.741 254.715 217.186 248.624 209.335 243.501C208.397 242.895 205.828 241.048 206.203 240.009C207.011 237.714 218.167 238.565 218.326 238.565C223.507 241.942 233.422 247.152 239.267 248.668C245.443 250.298 274.307 247.138 281.277 246.257C282.071 249.144 282.836 251.828 283.341 253.473C282.259 253.56 279.17 253.834 278.304 254.512C277.828 254.888 277.843 255.523 278.608 255.956C278.608 260.79 278.016 275.251 279.459 281.774C280.007 284.213 280.642 285.223 283.168 286.104C287.945 287.648 297.124 287.099 301.929 285.815C304.917 285.007 305.306 284.372 305.783 282.784C307.428 277.387 307.341 261.454 307.226 255.797C307.318 255.73 307.393 255.642 307.445 255.541C307.497 255.439 307.524 255.326 307.524 255.212C307.524 255.098 307.497 254.986 307.445 254.884C307.393 254.783 307.318 254.695 307.226 254.628C306.158 254.133 305.008 253.839 303.834 253.762C304.036 252.146 305.119 243.111 305.278 241.524C306.032 241.071 306.705 240.496 307.269 239.821C308.151 238.749 308.725 237.457 308.929 236.083C310.372 234.193 312.45 227.135 313.128 224.826C319.565 225.1 329.003 224.725 329.884 224.826C329.951 224.847 330.023 224.841 330.086 224.808C330.148 224.776 330.195 224.72 330.216 224.653C330.237 224.586 330.23 224.514 330.198 224.451C330.165 224.389 330.109 224.342 330.042 224.321ZM134.968 255.465C135.935 254.397 137.075 253.286 138.287 252.16C143.439 247.398 149.991 242.606 151.42 242.245C154.884 241.351 192.926 243.689 196.794 246.575C197.443 247.066 197.573 248.018 197.443 249.158C196.924 253.69 192.19 261.166 189.434 264.817C186.316 262.132 139.095 256.028 134.968 255.465ZM205.684 115.679C211.197 116.198 226.653 117.973 229.309 122.794C233.061 129.576 230.752 152.711 229.828 160.316C229.02 159.234 228.183 158.209 227.331 157.271C222.439 151.902 214.04 149.204 206.925 147.833C202.354 147.037 197.744 146.492 193.114 146.202C192.969 146.202 193.2 146.418 192.06 144.08C190.357 140.573 190.256 140.631 190.429 140.53C192.322 140.429 194.196 140.11 196.014 139.578C200.892 138.135 203.793 135.248 205.164 128.234C205.909 124.077 206.064 119.836 205.626 115.635L205.684 115.679ZM193.258 146.649C194.167 146.779 194.413 146.765 194.485 146.808C194.485 147.169 197.645 164.126 186.821 164.905C177.874 165.642 171.986 153.086 168.811 144.701C169.965 144.513 170.889 144.383 171.509 144.297C171.812 150.878 181.28 162.813 186.533 161.976C192.435 161.009 195.336 152.032 193.258 146.649ZM171.711 120.095C171.841 119.451 172.129 118.85 172.55 118.346C172.971 117.841 173.511 117.451 174.121 117.208C177.008 116.501 177.008 120.095 179.302 119.893C182.189 119.705 178.971 113.009 181.453 108.925C184.152 104.422 195.091 113.528 203.938 106.774C205.005 114.38 206.174 120.297 204.544 128.061C203.1 134.873 200.416 137.384 195.784 138.741C193.88 139.179 191.952 139.507 190.011 139.722C189.856 139.81 189.726 139.935 189.632 140.086C189.539 140.238 189.486 140.41 189.477 140.588C189.477 141.093 190.92 143.676 192.262 146.693C194.268 151.426 191.656 160.028 186.374 160.85C182.622 161.442 175.276 153.028 173.183 147.082C172.26 144.456 172.534 144.355 174.165 134.094C176.459 134.252 176.936 129.764 177.051 127.441C177.075 126.948 176.904 126.466 176.575 126.098C175.536 124.958 174.684 126.286 172.664 123.76C172.223 123.27 171.906 122.682 171.741 122.044C171.575 121.406 171.565 120.737 171.711 120.095ZM162.576 117.079C164.51 125.911 169.59 132.044 173.082 133.747C172.447 137.803 171.726 142.32 171.538 143.691C163.211 144.108 154.998 145.812 147.192 148.742C143.725 150.069 140.495 151.945 137.623 154.298C136.036 146.072 140.12 129.995 139.615 125.435C139.384 123.501 138.836 121.451 136.945 121.033C143.411 118.998 155.389 117.843 162.576 117.079ZM136.079 121.408C136.424 121.42 136.763 121.501 137.076 121.648C137.388 121.794 137.668 122.002 137.898 122.26C138.548 123.241 138.876 124.402 138.836 125.579C139.153 129.908 134.665 145.87 137.19 154.717C134.758 156.998 132.915 159.836 131.822 162.986C130.667 155.958 128.748 123.963 136.079 121.408ZM84.2258 187.159C84.3413 186.481 85.5824 186.178 86.2607 186.062C91.2685 185.24 101.674 188.097 101.443 191.575C101.097 196.728 102.684 259.16 101.327 261.454C99.7111 264.211 90.8789 262.681 87.3575 260.227C85.7556 259.116 85.7845 258.164 85.8278 258.351C84.6011 209.211 84.0238 188.285 84.2258 187.159ZM117.679 262.594C118.415 265.048 112.628 270.691 109.943 271.441C107.259 272.191 67.687 261.945 70.2703 259.607C69.0725 260.689 76.7069 253.661 80.0695 252.535C80.3375 252.402 80.6438 252.366 80.9354 252.434C81.325 252.607 82.8548 252.997 85.0629 253.517C85.1928 256.562 85.2793 258.366 85.2793 258.366C86.1308 262.609 99.7111 265.813 102.078 261.902C102.44 260.516 102.634 259.091 102.655 257.659C104.863 258.207 116.192 260.963 117.679 262.594ZM134.275 236.17C130.48 236.314 106.855 230.772 103.045 229.877C102.973 212.963 102.626 194 102.8 191.662C103.146 186.351 89.6377 183.465 84.8753 185.023C84.4033 185.127 83.9696 185.36 83.6229 185.697C83.2761 186.033 83.0302 186.46 82.9125 186.928C82.595 188.848 83.8362 223.008 83.9083 225.057C81.5559 224.422 59.5186 218.548 58.6094 216.196C58.3641 210.885 56.0117 159.537 57.6858 154.673C65.5367 156.636 132.587 170.159 137.306 173.435C138.489 176.682 135.791 231.58 134.275 236.17ZM137.667 235.318C137.667 236.285 136.382 236.617 135.43 236.761C136.988 233.024 140.091 176.148 138.504 172.8C136.916 169.451 64.512 155.381 57.7435 153.49C58.0445 153.164 58.411 152.906 58.8189 152.732C59.2268 152.558 59.6669 152.472 60.1103 152.48C62.1163 152.335 136.151 168.874 140.452 171.241C141.174 173.319 140.452 187.794 140.351 190.176C140.091 195.919 137.724 234.539 137.667 235.318ZM176.633 225.548C174.944 227.799 168.955 227.525 166.141 227.265H165.448C166.732 224.684 167.46 221.862 167.584 218.981C169.027 218.577 174.309 217.351 175.117 218.649C175.363 219.025 174.583 219.472 174.179 219.689C173.112 220.184 171.994 220.561 170.845 220.814C170.675 220.847 170.525 220.946 170.427 221.089C170.33 221.233 170.293 221.409 170.326 221.579C170.358 221.749 170.457 221.9 170.601 221.997C170.744 222.095 170.92 222.131 171.091 222.099C172.534 221.897 176.474 221.348 177.874 221.824C177.297 222.625 176.469 223.209 175.521 223.484C174.172 223.475 172.824 223.586 171.495 223.816C171.303 223.852 171.132 223.958 171.013 224.112C170.894 224.267 170.836 224.46 170.851 224.654C170.865 224.849 170.95 225.031 171.09 225.166C171.23 225.302 171.415 225.381 171.61 225.389C173.076 225.432 174.539 225.232 175.94 224.797C176.305 224.813 176.663 224.901 176.993 225.057C176.901 225.251 176.762 225.42 176.589 225.548H176.633ZM190.285 225.043C190.224 225.268 190.109 225.474 189.951 225.645C189.793 225.816 189.595 225.946 189.376 226.024C186.706 227.467 179.966 227.208 176.964 226.904C178.076 226.053 178.725 224.668 177.599 223.903C179.822 222.459 179.591 220.915 178.133 220.468C177.189 220.239 176.214 220.171 175.247 220.266C176.156 219.588 176.488 218.823 175.94 218C175.146 216.874 173.053 217.019 171.755 217.235C171.137 211.522 170.819 205.779 170.802 200.032C174.655 202.832 187.428 202.919 191.887 200.263C192.103 205.112 190.646 222.936 190.227 225.043H190.285ZM177.903 221.767C177.903 221.767 177.859 221.796 177.859 221.767H177.903ZM208.873 222.084C211.543 214.277 211.918 197.738 211.76 189.468C213.996 193.062 226.191 210.293 226.278 210.438C226.574 210.891 226.923 211.308 227.317 211.679C230.225 214.336 233.489 216.576 237.015 218.332C240.782 220.324 241.085 220.223 241.056 220.381L240.551 222.546C240.306 222.532 211.081 222.084 208.83 222.084H208.873ZM215.093 228.564C218.196 226.399 239.295 227.381 239.526 227.236V227.395C237.506 237.064 236.727 240.557 236.481 241.827C236.611 241.264 237.405 237.497 238.314 233.327C238.949 230.267 239.757 226.63 240.58 222.777C240.955 221.016 241.2 219.891 241.215 219.804C237.26 217.711 231.228 214.103 228.067 210.914C227.274 210.106 211.933 188.848 211.788 188.602C211.644 188.357 211.644 182.022 211.485 181.733C211.455 181.7 211.415 181.678 211.372 181.668C211.328 181.659 211.283 181.663 211.242 181.68C211.201 181.698 211.166 181.727 211.143 181.765C211.119 181.803 211.108 181.847 211.11 181.892C210.966 181.892 211.11 212.747 208.44 222.041L191.815 222.2C191.916 221.392 192.017 220.453 192.132 219.443C198.829 220.295 201.874 212.949 200.099 206.96C199.045 203.669 196.332 203.164 193.229 204.752C193.373 202.83 193.373 200.9 193.229 198.979C193.363 198.647 193.386 198.281 193.295 197.935C193.204 197.59 193.004 197.282 192.724 197.06C190.574 195.039 184.556 194.823 181.626 194.823C178.696 194.823 172.664 195.053 170.528 197.06C170.341 197.204 170.192 197.392 170.095 197.608C168.998 199.585 171.105 216.918 171.365 217.293C170.108 217.543 168.869 217.876 167.656 218.289V215.98C167.569 210.943 151.464 208.143 150.915 205.271C150.728 204.29 150.424 202.096 150.078 199.498C148.13 185.24 148.418 185.788 148.101 185.788C148.047 185.788 147.996 185.81 147.958 185.847C147.92 185.885 147.899 185.937 147.899 185.99C147.899 186.38 149.458 202.082 150.02 205.416C150.583 208.749 166.574 211.982 166.646 215.98C166.646 219.097 165.953 226.832 163.254 227.944C161.624 228.636 149.01 229.271 138.951 225.735C139.168 222.936 143.18 172.814 141.246 170.592C140.51 169.74 131.865 167.575 130.768 167.301C135.098 157.488 138.302 149.406 168.406 144.687C169.243 147.489 170.265 150.232 171.466 152.898C174.526 159.436 179.707 166.493 186.879 165.887C195.12 165.18 196.447 156.246 195.134 148.092C195.048 147.515 194.961 147.14 194.889 146.808C198.849 147.204 202.784 147.811 206.68 148.626C213.477 150.07 221.833 152.812 226.494 157.978C231.531 163.52 235.933 172.078 239.021 178.919C243.466 188.761 243.437 191.301 247.262 196.973C244.572 205.459 242.318 214.076 240.508 222.791C239.93 225.49 239.064 229.603 238.242 233.341C237.044 239.114 236.322 242.765 236.395 242C236.265 242.779 236.395 242.751 236.395 242.938C231.69 240.84 227.15 238.389 222.814 235.607C221.299 234.597 213.564 229.646 215.093 228.535V228.564ZM193.114 207.696C193.114 206.945 193.2 206.253 193.229 205.531C195.841 204.477 198.165 204.636 198.872 207.364C200.315 212.314 198.035 218.909 192.219 218.909C192.219 218.217 192.464 216.239 192.493 216.023C199.132 216.918 199.088 204.766 193.114 207.696ZM192.551 215.402C192.753 213.122 192.926 210.712 193.07 208.446C193.761 208.233 194.501 208.233 195.192 208.446C196.909 209.067 196.635 215.027 192.479 215.402H192.551ZM239.757 247.426C234.204 245.61 228.831 243.281 223.709 240.47C222.266 239.705 214.79 235.636 214.285 234.063C213.849 232.658 213.804 231.161 214.155 229.733C216.089 233.5 228.356 239.835 232.296 241.697C234.1 242.548 235.961 243.272 237.867 243.862C244.534 246.243 273.138 242.419 280.166 241.553C280.253 241.856 280.859 244.179 281.09 245.016C274.971 245.723 245.501 248.942 239.685 247.426H239.757ZM304.238 283.722C302.131 285.512 289.489 287.013 283.529 285.166C281.364 284.487 280.931 283.795 280.412 281.601C279.938 279.221 279.639 276.809 279.517 274.385C282.475 276.203 287.902 276.665 291.38 276.766C296.618 276.882 301.771 276.766 305.985 274.385C305.898 275.915 305.407 282.727 304.238 283.722ZM306.028 273.822C303.181 275.04 300.119 275.673 297.023 275.684C292.895 275.886 283.226 275.857 279.488 273.865C279.329 271.152 279.228 268.252 279.185 265.553C280.628 267.285 288.32 268.064 291.394 268.165C296.878 268.28 301.973 268.165 306.36 265.567C306.36 265.423 306.317 268.843 306.042 273.822H306.028ZM306.36 265.062C299.144 268.699 281.234 267.054 279.17 265.062V256.187C283.76 257.817 301.9 257.702 306.446 256.187C306.418 257.846 306.432 261.223 306.374 265.062H306.36ZM303.474 255.35C303.525 255.364 303.58 255.359 303.628 255.335C303.676 255.311 303.714 255.27 303.733 255.22C303.733 255.22 303.733 254.96 303.82 254.498C304.75 254.626 305.667 254.834 306.562 255.119C303.401 256.562 284.38 256.692 279.632 255.292C279.6 255.282 279.572 255.262 279.552 255.234C279.532 255.207 279.521 255.174 279.521 255.14C279.521 255.106 279.532 255.073 279.552 255.046C279.572 255.019 279.6 254.999 279.632 254.989C280.955 254.629 282.307 254.388 283.673 254.267C283.769 254.669 283.914 255.056 284.106 255.422C284.222 255.537 284.409 255.552 284.395 255.263C284.38 254.974 279.647 236.285 278.925 232.172C279.663 232.418 280.45 232.48 281.217 232.352C281.985 232.223 282.709 231.909 283.327 231.436C284.914 235.881 289.98 255.883 290.283 255.883C290.338 255.88 290.389 255.855 290.427 255.815C290.464 255.775 290.485 255.722 290.485 255.667L290.066 253.719H292.058C292.058 253.993 292.217 255.393 292.231 255.494C292.246 255.595 292.664 255.84 292.635 255.306C292.635 254.007 291.423 232.49 291.394 232.1C291.602 232 291.819 231.922 292.044 231.869C292.202 232.648 297.282 253.228 297.672 254.83C297.672 254.974 297.672 255.22 297.946 255.162C298.22 255.104 298.105 254.844 297.946 253.906L300.154 254.065V254.31C300.154 254.541 300.515 254.484 300.558 254.31C300.558 254.469 303.243 226.775 303.445 224.567C303.825 224.855 304.262 225.059 304.728 225.166C305.193 225.273 305.675 225.28 306.143 225.187C306.115 225.404 303.156 255.248 303.459 255.35H303.474ZM290.485 226.659C290.314 225.271 289.707 223.973 288.753 222.95C290.73 223.542 291.149 223.975 291.639 225.331C292.03 226.412 292.134 227.575 291.943 228.708C291.747 229.422 291.747 230.174 291.943 230.888C291.706 230.942 291.475 231.014 291.25 231.104C290.355 228.55 288.363 228.579 288.363 226.01C288.361 225.081 288.225 224.158 287.959 223.268C288.658 224.534 289.424 225.763 290.254 226.948C290.398 227.135 290.673 226.861 290.499 226.659H290.485ZM291.207 244.872C291.279 245.579 291.842 251.713 291.986 253.271H289.922C289.489 251.323 288.84 248.437 288.104 245.348L291.207 244.872ZM291.12 243.761L287.829 244.194C287.541 242.996 287.238 241.784 286.935 240.586C288.262 240.398 289.561 240.196 290.817 239.994C290.875 240.615 291.077 243.126 291.134 243.761H291.12ZM295.608 243.097C295.377 242 294.814 239.518 294.771 239.374C296.027 239.157 300.299 238.421 301.179 238.248C301.179 238.868 300.934 241.495 300.876 242.159C299.476 242.462 297.686 242.779 295.579 243.097H295.608ZM300.818 243.097C300.558 246.835 300.154 253.084 300.14 253.43C299.389 253.43 298.596 253.401 297.759 253.343C297.412 251.597 295.926 244.598 295.825 244.122C297.773 243.732 299.447 243.386 300.833 243.054L300.818 243.097ZM303.575 223.369C303.751 221.54 304.035 219.723 304.426 217.928C304.811 217.812 305.217 217.785 305.614 217.847C306.012 217.91 306.39 218.061 306.721 218.289C306.634 220.102 306.441 221.909 306.143 223.701C306.014 224.206 305.985 224.336 305.653 224.379C305.003 224.422 303.69 223.874 303.589 223.325L303.575 223.369ZM305.465 240.571C305.595 239.503 305.725 238.421 305.84 237.339C306.695 237.159 307.535 236.913 308.351 236.603C307.897 238.214 306.877 239.607 305.48 240.528L305.465 240.571ZM307.875 235.405C307.266 235.647 306.639 235.84 305.999 235.982C306.259 233.558 307.789 219.443 307.789 218.447C307.789 217.004 305.22 216.47 303.892 217.004C303.445 217.206 303.315 218.058 303.185 218.808C302.463 222.835 301.612 232.879 301.28 236.963L294.511 238.205C292.823 230.844 292.967 231.248 292.78 231.061C292.651 230.938 292.481 230.866 292.303 230.859C292.17 230.216 292.205 229.55 292.404 228.925C292.703 227.677 292.663 226.371 292.289 225.144C292.097 224.251 291.583 223.46 290.846 222.921C289.671 222.299 288.404 221.87 287.093 221.651C287.025 221.633 286.953 221.631 286.883 221.646C286.813 221.661 286.748 221.692 286.693 221.737C286.638 221.783 286.595 221.84 286.566 221.906C286.538 221.971 286.526 222.042 286.531 222.113C286.561 222.236 286.6 222.356 286.646 222.474C287.772 225.158 286.992 226.385 287.772 227.987C288.551 229.589 289.864 229.834 290.341 231.681C290.341 231.826 290.745 238.493 290.759 238.897L286.675 239.547C286.386 238.45 284.409 230.642 283.63 229.877C282.187 228.434 278.059 230.051 277.857 231.321C277.727 232.042 279.704 239.778 279.892 240.514C272.46 241.596 264.58 242.577 257.609 243.227C254.564 243.501 235.962 245.204 237.001 242.159C238.444 235.491 241.33 223.253 241.908 220.684V220.482C241.908 220.266 242.009 220.049 241.908 220.684C241.908 220.468 241.994 220.338 242.023 220.266L245.631 206.31C246.107 204.593 249.383 192.918 251.043 192.095C254.723 190.277 315.207 182.455 320.315 185.875C321.181 189.584 310.545 233.644 307.89 235.419L307.875 235.405Z'
          fill='#227BFF'
        />
        <path
          d='M190.964 119.33V118.219C190.964 118.039 190.892 117.866 190.765 117.739C190.638 117.612 190.465 117.54 190.286 117.54C190.104 117.54 189.93 117.611 189.801 117.738C189.671 117.865 189.597 118.037 189.593 118.219V119.517C189.625 119.689 189.722 119.842 189.863 119.944C190.005 120.046 190.181 120.089 190.354 120.065C190.526 120.041 190.683 119.951 190.792 119.814C190.9 119.677 190.951 119.504 190.935 119.33H190.964ZM283.197 208.143C282.779 207.739 282.187 207.263 281.639 207.436C280.73 207.724 279.82 210.034 279.431 210.986C278.336 213.828 277.468 216.753 276.833 219.732C277.425 221.261 287.412 219.255 288.768 218.592C289.201 218.39 289.143 217.87 288.999 217.408C287.571 214.031 285.612 210.903 283.197 208.143ZM277.223 219.544C277.482 218.346 280.773 209.168 281.899 208.331C283.645 209.326 287.152 215.445 288.09 217.755C286.791 218.274 277.973 220.511 277.223 219.544ZM159.719 250.154C159.575 250.255 156.429 252.247 156.284 252.391C156.25 252.405 156.221 252.429 156.2 252.46C156.18 252.491 156.169 252.527 156.169 252.564C156.169 252.601 156.18 252.637 156.2 252.668C156.221 252.699 156.25 252.723 156.284 252.737C157.092 252.968 159.791 253.271 160.614 253.358C180.357 248.408 180.486 248.408 180.241 248.408C180.374 248.39 180.494 248.321 180.578 248.216C180.661 248.111 180.701 247.978 180.688 247.845C180.688 247.599 180.299 245.897 180.183 245.377L159.719 250.154ZM197.963 113.297C198.367 113.297 199.161 113.485 199.32 113.499C200.196 113.59 201.064 113.745 201.918 113.961L203.216 114.192C203.266 114.204 203.318 114.199 203.364 114.177C203.41 114.154 203.446 114.116 203.467 114.07C203.487 114.023 203.491 113.971 203.477 113.922C203.463 113.873 203.432 113.831 203.39 113.802C202.637 113.164 201.723 112.745 200.749 112.59C199.784 112.383 198.779 112.469 197.862 112.835C197.832 112.842 197.803 112.855 197.778 112.872C197.752 112.89 197.731 112.913 197.714 112.939C197.697 112.965 197.686 112.994 197.68 113.025C197.675 113.055 197.675 113.087 197.682 113.117C197.688 113.147 197.701 113.176 197.719 113.201C197.737 113.227 197.759 113.249 197.785 113.265C197.811 113.282 197.841 113.294 197.871 113.299C197.902 113.304 197.933 113.304 197.963 113.297ZM186.533 114.567C186.923 114.481 187.76 114.351 187.976 114.322C188.851 114.131 189.739 114.006 190.632 113.947L192.075 113.788C192.133 113.788 192.188 113.765 192.228 113.725C192.269 113.684 192.292 113.629 192.292 113.571C192.292 113.514 192.269 113.459 192.228 113.418C192.188 113.378 192.133 113.355 192.075 113.355C191.145 112.961 190.124 112.829 189.124 112.974C188.124 113.119 187.183 113.535 186.403 114.178C186.369 114.178 186.335 114.186 186.305 114.201C186.274 114.217 186.248 114.24 186.228 114.268C186.208 114.295 186.195 114.328 186.189 114.361C186.184 114.395 186.187 114.43 186.198 114.463C186.209 114.495 186.227 114.525 186.252 114.549C186.276 114.573 186.306 114.59 186.339 114.601C186.372 114.611 186.406 114.613 186.44 114.607C186.474 114.602 186.506 114.588 186.533 114.567ZM200.965 117.078C200.785 117.078 200.613 117.15 200.485 117.277C200.358 117.404 200.287 117.577 200.287 117.757V119.056C200.312 119.235 200.407 119.398 200.552 119.508C200.697 119.617 200.879 119.665 201.059 119.64C201.239 119.615 201.401 119.52 201.511 119.375C201.621 119.23 201.668 119.048 201.643 118.868V117.757C201.645 117.667 201.629 117.578 201.596 117.495C201.562 117.412 201.512 117.336 201.449 117.273C201.386 117.209 201.31 117.159 201.227 117.126C201.144 117.093 201.055 117.076 200.965 117.078ZM88.96 242.375C90.966 243.025 95.6419 244.771 97.7922 244.511C98.052 244.511 98.3406 244.251 98.5282 243.789C99.9714 240.542 98.9323 224.032 98.4128 220.843C98.052 218.548 89.7537 215.705 87.7477 217.336C86.4488 218.39 87.0983 230.613 87.2426 232.316C87.6178 236.429 87.2282 241.812 88.96 242.375ZM88.3971 218.101C89.9558 216.975 97.1861 219.645 97.417 220.987C97.7778 223.253 99.12 242.303 97.6768 243.789C95.8151 244.064 90.8794 242.548 89.0177 241.971C87.7044 241.538 88.1518 235.794 87.9353 232.244C87.8343 229.848 87.6755 220.338 88.3971 218.101ZM190.949 127.974C190.914 127.957 190.874 127.947 190.834 127.947C190.794 127.947 190.754 127.957 190.719 127.974C190.358 128.104 190.141 128.508 190.084 129.1C190.037 130.629 190.55 132.122 191.527 133.3C191.756 133.612 192.045 133.875 192.378 134.074C192.711 134.272 193.08 134.401 193.464 134.454C193.848 134.506 194.238 134.481 194.612 134.379C194.986 134.278 195.335 134.102 195.64 133.863C196.51 133.147 197.193 132.231 197.631 131.193C197.671 131.112 197.691 131.023 197.691 130.933C197.691 130.843 197.671 130.754 197.631 130.673C197.184 129.98 196.116 130.962 190.949 127.974ZM190.82 128.465C192.387 129.8 194.223 130.784 196.203 131.351C193.114 136.605 190.011 129.519 190.82 128.465ZM194.355 125.074C195.279 125.247 197.833 124.929 198.382 123.991C198.656 123.544 198.382 123.4 197.776 121.552C197.229 119.947 196.589 118.376 195.856 116.847C195.596 116.443 195.265 116.847 195.452 117.093C195.853 119.305 196.492 121.468 197.357 123.544C196.313 124.033 195.243 124.466 194.153 124.843C194.151 124.871 194.155 124.9 194.164 124.927C194.173 124.954 194.188 124.979 194.206 125C194.225 125.022 194.248 125.039 194.274 125.052C194.299 125.064 194.327 125.072 194.355 125.074ZM247.58 275.15C252.992 271.715 248.778 268.554 245.199 270.055C244.318 268.453 244.116 268.324 242.312 268.41C232.946 268.886 190.646 278.671 190.242 278.83C188.106 279.71 193.533 292.453 195.683 294.128C196.174 294.503 196.015 294.575 201.311 293.536C201.658 296.682 203.029 302.195 206.233 302.368C207.726 302.095 209.18 301.639 210.562 301.012C213.239 303.674 216.088 306.157 219.091 308.444C222.411 310.666 243.625 285.887 246.8 283.001C247.71 282.698 248.518 282.496 248.417 280.244C251.159 279.739 253.28 278.051 251.823 275.626C250.841 274.154 249.138 274.385 247.58 275.15ZM248.085 271.224C248.677 271.441 248.98 271.672 248.792 272.263C248.403 273.168 247.834 273.983 247.118 274.659C246.735 273.485 246.287 272.334 245.776 271.21C246.523 270.941 247.341 270.946 248.085 271.224ZM232.729 270.748C233.263 273.274 233.624 274.645 234.303 276.968L224.301 278.859C223.726 276.771 223.057 274.71 222.295 272.682C224.186 272.321 231.185 271.008 232.729 270.748ZM217.937 290.015C218.466 291.828 219.248 293.557 220.26 295.152C217.489 296.494 214.877 297.721 212.655 298.731C211.857 296.311 210.736 294.01 209.321 291.891L217.937 290.015ZM213.853 290.015C213.365 287.507 212.748 285.026 212.005 282.582L223.551 280.085C224.181 282.53 224.942 284.939 225.831 287.301C221.862 288.138 217.72 289.076 213.853 289.957V290.015ZM218.658 290.087C218.5 289.856 217.518 290.202 228.14 287.763C228.328 288.836 228.725 289.861 229.309 290.779L220.852 294.921C220.35 293.197 219.612 291.551 218.658 290.029V290.087ZM228.761 287.604C234.245 286.334 239.281 285.122 242.76 284.199L230.016 290.419C229.78 289.394 229.36 288.421 228.775 287.547L228.761 287.604ZM226.322 287.157C225.859 284.695 225.271 282.257 224.561 279.855L234.418 277.43C234.418 277.502 235.082 279.725 235.385 280.677C235.529 281.11 236.756 284.603 236.828 284.66C233.841 285.324 226.553 287.042 226.307 287.099L226.322 287.157ZM221.862 272.826C222.339 275.453 222.786 277.156 223.306 279.118L211.76 281.658C211.082 279.364 210.62 277.863 209.624 275.265C211.876 274.746 220.131 273.1 221.877 272.769L221.862 272.826ZM209.148 275.352C209.711 278.238 210.129 279.753 210.735 281.889C209.768 282.106 201.874 284.083 201.874 284.083C201.586 284.083 201.701 284.53 201.99 284.473C201.99 284.473 210.548 282.885 210.981 282.784C210.981 282.784 211.601 285.266 213.376 290.13L204.068 292.208C202.736 287.174 201.063 282.236 199.06 277.43L209.148 275.352ZM196.087 293.637C193.894 291.992 188.871 279.869 190.387 279.205C190.387 279.205 193.691 278.484 198.656 277.444C199.893 282.502 201.544 287.45 203.592 292.237C196.001 293.94 196.332 293.767 196.102 293.579L196.087 293.637ZM206.189 301.315C203.75 301.315 202.293 296.047 201.86 293.651C201.86 293.377 201.095 293.651 208.643 292.078C209.018 292.006 208.426 291.905 210.23 295.657C210.748 296.836 211.386 297.958 212.135 299.006C210.237 299.915 208.268 300.668 206.247 301.257L206.189 301.315ZM219.64 307.491C216.706 305.435 213.887 303.219 211.197 300.853C213.68 299.828 216.494 298.515 218.918 297.36C220.816 299.567 222.967 301.543 225.326 303.248C224.345 304.085 221.011 307.174 219.698 307.434L219.64 307.491ZM225.744 302.815C223.838 300.688 221.704 298.776 219.38 297.115L228.443 292.656C229.706 293.952 231.168 295.038 232.773 295.874C230.503 298.222 228.179 300.518 225.802 302.758L225.744 302.815ZM233.263 295.412C232.06 294.183 230.69 293.129 229.194 292.28C235.399 289.149 238.964 287.244 244.751 284.04C242.182 286.306 235.659 292.973 233.321 295.354L233.263 295.412ZM247.031 281.846C246.411 282.294 237.91 284.372 237.174 284.545C236.255 279.823 234.908 275.196 233.148 270.719C235.948 270.243 241.49 269.276 243.553 269.507C243.832 269.835 244.074 270.193 244.275 270.575C243.29 271.244 242.475 272.133 241.894 273.173C241.749 273.533 242.125 273.721 242.312 273.548C243.034 272.784 243.878 272.145 244.809 271.657C245.464 273.01 246.032 274.403 246.512 275.828C245.23 276.705 244.074 277.754 243.077 278.945C242.889 279.176 242.947 279.349 243.077 279.422C243.423 279.624 243.452 279.104 246.858 277.084C247.202 278.252 247.396 279.46 247.435 280.677C247.363 280.937 247.32 281.601 247.089 281.788L247.031 281.846ZM250.625 277.978C249.98 278.717 249.169 279.291 248.258 279.652C248.125 278.624 247.918 277.606 247.637 276.607C248.576 276.131 250.033 275.525 250.524 276.405C250.709 276.608 250.824 276.864 250.852 277.137C250.881 277.41 250.821 277.684 250.683 277.921L250.625 277.978Z'
          fill='#227BFF'
        />
      </g>
      <rect x='0.5' y='0.5' width='385' height='386' rx='8.5' stroke='#F1F1F1' />
      <defs>
        <clipPath id='clip0_216_669'>
          <rect x='1' y='1' width='384' height='385' rx='8' fill='white' />
        </clipPath>
      </defs>
    </svg>
  );
};

export default DesignerIcon;


import React from 'react';

const HeroBlocksBg = () => {
  return (
    <svg width='1120' height='842' viewBox='0 0 1120 842' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <g opacity='0.2'>
        <path
          opacity='0.8'
          d='M217.136 -179.818L147.163 -179.818M147.163 -179.818L70.1936 -179.818M147.163 -179.818L147.163 -85.3558M70.1936 -179.818L0.221739 -179.818M70.1936 -179.818L70.1937 -85.3558M217.136 -85.3558L147.163 -85.3558M147.163 -85.3558L70.1937 -85.3558M147.163 -85.3558L147.163 9.1067M70.1937 -85.3558L0.221735 -85.3558M70.1937 -85.3558L70.1937 9.1067M217.136 9.1067L147.163 9.1067M147.163 9.1067L70.1937 9.1067M147.163 9.1067L147.163 103.569M70.1937 9.1067L0.22173 9.10669M70.1937 9.1067L70.1937 103.569M217.136 103.569L147.163 103.569M147.163 103.569L70.1937 103.569M147.163 103.569L147.163 198.032M70.1937 103.569L0.221726 103.569M70.1937 103.569L70.1937 198.032M217.136 198.032L147.163 198.032M147.163 198.032L70.1937 198.032M147.163 198.032L147.163 292.494M70.1937 198.032L0.221722 198.032M70.1937 198.032L70.1937 292.494M217.136 292.494L147.163 292.494M147.163 292.494L70.1937 292.494M147.163 292.494L147.163 386.957M70.1937 292.494L0.221718 292.494M70.1937 292.494L70.1937 386.957M217.136 386.957L147.163 386.957M147.163 386.957L70.1937 386.957M147.163 386.957L147.163 481.419M70.1937 386.957L0.221714 386.957M70.1937 386.957L70.1937 481.419M217.136 481.419L147.163 481.419M147.163 481.419L70.1937 481.419M147.163 481.419L147.163 575.882M70.1937 481.419L0.22171 481.419M70.1937 481.419L70.1937 575.882M217.136 575.882L147.163 575.882M147.163 575.882L70.1937 575.882M147.163 575.882L147.163 670.344M70.1937 575.882L0.221706 575.882M70.1937 575.882L70.1937 670.344M217.136 670.344L147.163 670.344M147.163 670.344L70.1937 670.344M147.163 670.344L147.163 764.807M70.1937 670.344L0.221702 670.344M70.1937 670.344L70.1937 764.807M217.136 764.807L147.163 764.807M147.163 764.807L70.1937 764.807M147.163 764.807L147.163 859.269M70.1937 764.807L0.221697 764.807M70.1937 764.807L70.1937 859.269M217.136 859.269L147.163 859.269M147.163 859.269L70.1937 859.269M147.163 859.269L147.163 953.732M70.1937 859.269L0.221693 859.269M70.1937 859.269L70.1937 953.732M217.136 953.732L147.163 953.732M147.163 953.732L70.1937 953.732M70.1937 953.732L0.221689 953.732M224.133 -179.818L224.133 953.732M217.136 -226L147.163 -226M147.163 -226L70.1936 -226M147.163 -226L147.163 -131.538M70.1936 -226L0.221741 -226M70.1936 -226L70.1937 -131.538M217.136 -131.538L147.163 -131.538M147.163 -131.538L70.1937 -131.538M147.163 -131.538L147.163 -37.075M70.1937 -131.538L0.221737 -131.538M70.1937 -131.538L70.1937 -37.075M217.136 -37.075L147.163 -37.075M147.163 -37.075L70.1937 -37.075M147.163 -37.075L147.163 57.3874M70.1937 -37.075L0.221732 -37.075M70.1937 -37.075L70.1937 57.3874M217.136 57.3875L147.163 57.3874M147.163 57.3874L70.1937 57.3874M147.163 57.3874L147.163 151.85M70.1937 57.3874L0.221728 57.3874M70.1937 57.3874L70.1937 151.85M217.136 151.85L147.163 151.85M147.163 151.85L70.1937 151.85M147.163 151.85L147.163 246.312M70.1937 151.85L0.221724 151.85M70.1937 151.85L70.1937 246.312M217.136 246.312L147.163 246.312M147.163 246.312L70.1937 246.312M147.163 246.312L147.163 340.775M70.1937 246.312L0.22172 246.312M70.1937 246.312L70.1937 340.775M217.136 340.775L147.163 340.775M147.163 340.775L70.1937 340.775M147.163 340.775L147.163 435.237M70.1937 340.775L0.221716 340.775M70.1937 340.775L70.1937 435.237M217.136 435.237L147.163 435.237M147.163 435.237L70.1937 435.237M147.163 435.237L147.163 529.7M70.1937 435.237L0.221712 435.237M70.1937 435.237L70.1937 529.7M217.136 529.7L147.163 529.7M147.163 529.7L70.1937 529.7M147.163 529.7L147.163 624.162M70.1937 529.7L0.221708 529.7M70.1937 529.7L70.1937 624.162M217.136 624.162L147.163 624.162M147.163 624.162L70.1937 624.162M147.163 624.162L147.163 718.625M70.1937 624.162L0.221704 624.162M70.1937 624.162L70.1937 718.625M217.136 718.625L147.163 718.625M147.163 718.625L70.1937 718.625M147.163 718.625L147.163 813.087M70.1937 718.625L0.221699 718.625M70.1937 718.625L70.1937 813.087M217.136 813.087L147.163 813.087M147.163 813.087L70.1937 813.087M147.163 813.087L147.163 907.55M70.1937 813.087L0.221695 813.087M70.1937 813.087L70.1937 907.55M217.136 907.55L147.163 907.55M147.163 907.55L70.1937 907.55M70.1937 907.55L0.221691 907.55M224.133 -226L224.133 907.55'
          stroke='#BCBCBC'
          strokeOpacity='0.43'
          strokeWidth='2'
        />
        <path
          opacity='0.8'
          d='M448.044 -179.818L378.072 -179.818M378.072 -179.818L301.102 -179.818M378.072 -179.818L378.072 -85.3558M301.102 -179.818L231.131 -179.818M301.102 -179.818L301.103 -85.3558M448.044 -85.3558L378.072 -85.3558M378.072 -85.3558L301.103 -85.3558M378.072 -85.3558L378.072 9.1067M301.103 -85.3558L231.131 -85.3558M301.103 -85.3558L301.103 9.1067M448.044 9.1067L378.072 9.1067M378.072 9.1067L301.103 9.1067M378.072 9.1067L378.072 103.569M301.103 9.1067L231.131 9.1067M301.103 9.1067L301.103 103.569M448.044 103.569L378.072 103.569M378.072 103.569L301.103 103.569M378.072 103.569L378.072 198.032M301.103 103.569L231.131 103.569M301.103 103.569L301.103 198.032M448.044 198.032L378.072 198.032M378.072 198.032L301.103 198.032M378.072 198.032L378.072 292.494M301.103 198.032L231.131 198.032M301.103 198.032L301.103 292.494M448.044 292.494L378.072 292.494M378.072 292.494L301.103 292.494M378.072 292.494L378.072 386.957M301.103 292.494L231.131 292.494M301.103 292.494L301.103 386.957M448.044 386.957L378.072 386.957M378.072 386.957L301.103 386.957M378.072 386.957L378.072 481.419M301.103 386.957L231.131 386.957M301.103 386.957L301.103 481.419M448.044 481.419L378.072 481.419M378.072 481.419L301.103 481.419M378.072 481.419L378.072 575.882M301.103 481.419L231.131 481.419M301.103 481.419L301.103 575.882M448.044 575.882L378.072 575.882M378.072 575.882L301.103 575.882M378.072 575.882L378.072 670.344M301.103 575.882L231.131 575.882M301.103 575.882L301.103 670.344M448.044 670.344L378.072 670.344M378.072 670.344L301.103 670.344M378.072 670.344L378.072 764.807M301.103 670.344L231.131 670.344M301.103 670.344L301.103 764.807M448.044 764.807L378.072 764.807M378.072 764.807L301.103 764.807M378.072 764.807L378.072 859.269M301.103 764.807L231.131 764.807M301.103 764.807L301.103 859.269M448.044 859.269L378.072 859.269M378.072 859.269L301.103 859.269M378.072 859.269L378.072 953.732M301.103 859.269L231.131 859.269M301.103 859.269L301.103 953.732M448.044 953.732L378.072 953.732M378.072 953.732L301.103 953.732M301.103 953.732L231.131 953.732M224.133 -179.818L224.133 953.732M448.044 -226L378.072 -226M378.072 -226L301.102 -226M378.072 -226L378.072 -131.538M301.102 -226L231.131 -226M301.102 -226L301.103 -131.538M448.044 -131.538L378.072 -131.538M378.072 -131.538L301.103 -131.538M378.072 -131.538L378.072 -37.075M301.103 -131.538L231.131 -131.538M301.103 -131.538L301.103 -37.075M448.044 -37.075L378.072 -37.075M378.072 -37.075L301.103 -37.075M378.072 -37.075L378.072 57.3874M301.103 -37.075L231.131 -37.075M301.103 -37.075L301.103 57.3874M448.044 57.3875L378.072 57.3874M378.072 57.3874L301.103 57.3874M378.072 57.3874L378.072 151.85M301.103 57.3874L231.131 57.3874M301.103 57.3874L301.103 151.85M448.044 151.85L378.072 151.85M378.072 151.85L301.103 151.85M378.072 151.85L378.072 246.312M301.103 151.85L231.131 151.85M301.103 151.85L301.103 246.312M448.044 246.312L378.072 246.312M378.072 246.312L301.103 246.312M378.072 246.312L378.072 340.775M301.103 246.312L231.131 246.312M301.103 246.312L301.103 340.775M448.044 340.775L378.072 340.775M378.072 340.775L301.103 340.775M378.072 340.775L378.072 435.237M301.103 340.775L231.131 340.775M301.103 340.775L301.103 435.237M448.044 435.237L378.072 435.237M378.072 435.237L301.103 435.237M378.072 435.237L378.072 529.7M301.103 435.237L231.131 435.237M301.103 435.237L301.103 529.7M448.044 529.7L378.072 529.7M378.072 529.7L301.103 529.7M378.072 529.7L378.072 624.162M301.103 529.7L231.131 529.7M301.103 529.7L301.103 624.162M448.044 624.162L378.072 624.162M378.072 624.162L301.103 624.162M378.072 624.162L378.072 718.625M301.103 624.162L231.131 624.162M301.103 624.162L301.103 718.625M448.044 718.625L378.072 718.625M378.072 718.625L301.103 718.625M378.072 718.625L378.072 813.087M301.103 718.625L231.131 718.625M301.103 718.625L301.103 813.087M448.044 813.087L378.072 813.087M378.072 813.087L301.103 813.087M378.072 813.087L378.072 907.55M301.103 813.087L231.131 813.087M301.103 813.087L301.103 907.55M448.044 907.55L378.072 907.55M378.072 907.55L301.103 907.55M301.103 907.55L231.131 907.55M224.133 -226L224.133 907.55'
          stroke='#BCBCBC'
          strokeOpacity='0.43'
          strokeWidth='2'
        />
        <path
          opacity='0.8'
          d='M671.956 -179.818L601.984 -179.818M601.984 -179.818L525.014 -179.818M601.984 -179.818L601.984 -85.3558M525.014 -179.818L455.042 -179.818M525.014 -179.818L525.014 -85.3558M671.956 -85.3558L601.984 -85.3558M601.984 -85.3558L525.014 -85.3558M601.984 -85.3558L601.984 9.1067M525.014 -85.3558L455.042 -85.3558M525.014 -85.3558L525.014 9.1067M671.956 9.1067L601.984 9.1067M601.984 9.1067L525.014 9.1067M601.984 9.1067L601.984 103.569M525.014 9.1067L455.042 9.1067M525.014 9.1067L525.014 103.569M671.956 103.569L601.984 103.569M601.984 103.569L525.014 103.569M601.984 103.569L601.984 198.032M525.014 103.569L455.042 103.569M525.014 103.569L525.014 198.032M671.956 198.032L601.984 198.032M601.984 198.032L525.014 198.032M601.984 198.032L601.984 292.494M525.014 198.032L455.042 198.032M525.014 198.032L525.014 292.494M671.956 292.494L601.984 292.494M601.984 292.494L525.014 292.494M601.984 292.494L601.984 386.957M525.014 292.494L455.042 292.494M525.014 292.494L525.014 386.957M671.956 386.957L601.984 386.957M601.984 386.957L525.014 386.957M601.984 386.957L601.984 481.419M525.014 386.957L455.042 386.957M525.014 386.957L525.014 481.419M671.956 481.419L601.984 481.419M601.984 481.419L525.014 481.419M601.984 481.419L601.984 575.882M525.014 481.419L455.042 481.419M525.014 481.419L525.014 575.882M671.956 575.882L601.984 575.882M601.984 575.882L525.014 575.882M601.984 575.882L601.984 670.344M525.014 575.882L455.042 575.882M525.014 575.882L525.014 670.344M671.956 670.344L601.984 670.344M601.984 670.344L525.014 670.344M601.984 670.344L601.984 764.807M525.014 670.344L455.042 670.344M525.014 670.344L525.014 764.807M671.956 764.807L601.984 764.807M601.984 764.807L525.014 764.807M601.984 764.807L601.984 859.269M525.014 764.807L455.042 764.807M525.014 764.807L525.014 859.269M671.956 859.269L601.984 859.269M601.984 859.269L525.014 859.269M601.984 859.269L601.984 953.732M525.014 859.269L455.042 859.269M525.014 859.269L525.014 953.732M671.956 953.732L601.984 953.732M601.984 953.732L525.014 953.732M525.014 953.732L455.042 953.732M448.045 -179.818L448.045 953.732M671.956 -226L601.984 -226M601.984 -226L525.014 -226M601.984 -226L601.984 -131.538M525.014 -226L455.042 -226M525.014 -226L525.014 -131.538M671.956 -131.538L601.984 -131.538M601.984 -131.538L525.014 -131.538M601.984 -131.538L601.984 -37.075M525.014 -131.538L455.042 -131.538M525.014 -131.538L525.014 -37.075M671.956 -37.075L601.984 -37.075M601.984 -37.075L525.014 -37.075M601.984 -37.075L601.984 57.3874M525.014 -37.075L455.042 -37.075M525.014 -37.075L525.014 57.3874M671.956 57.3875L601.984 57.3874M601.984 57.3874L525.014 57.3874M601.984 57.3874L601.984 151.85M525.014 57.3874L455.042 57.3874M525.014 57.3874L525.014 151.85M671.956 151.85L601.984 151.85M601.984 151.85L525.014 151.85M601.984 151.85L601.984 246.312M525.014 151.85L455.042 151.85M525.014 151.85L525.014 246.312M671.956 246.312L601.984 246.312M601.984 246.312L525.014 246.312M601.984 246.312L601.984 340.775M525.014 246.312L455.042 246.312M525.014 246.312L525.014 340.775M671.956 340.775L601.984 340.775M601.984 340.775L525.014 340.775M601.984 340.775L601.984 435.237M525.014 340.775L455.042 340.775M525.014 340.775L525.014 435.237M671.956 435.237L601.984 435.237M601.984 435.237L525.014 435.237M601.984 435.237L601.984 529.7M525.014 435.237L455.042 435.237M525.014 435.237L525.014 529.7M671.956 529.7L601.984 529.7M601.984 529.7L525.014 529.7M601.984 529.7L601.984 624.162M525.014 529.7L455.042 529.7M525.014 529.7L525.014 624.162M671.956 624.162L601.984 624.162M601.984 624.162L525.014 624.162M601.984 624.162L601.984 718.625M525.014 624.162L455.042 624.162M525.014 624.162L525.014 718.625M671.956 718.625L601.984 718.625M601.984 718.625L525.014 718.625M601.984 718.625L601.984 813.087M525.014 718.625L455.042 718.625M525.014 718.625L525.014 813.087M671.956 813.087L601.984 813.087M601.984 813.087L525.014 813.087M601.984 813.087L601.984 907.55M525.014 813.087L455.042 813.087M525.014 813.087L525.014 907.55M671.956 907.55L601.984 907.55M601.984 907.55L525.014 907.55M525.014 907.55L455.042 907.55M448.045 -226L448.045 907.55'
          stroke='#BCBCBC'
          strokeOpacity='0.43'
          strokeWidth='2'
        />
        <path
          opacity='0.8'
          d='M895.867 -179.818L825.895 -179.818M825.895 -179.818L748.925 -179.818M825.895 -179.818L825.895 -85.3558M748.925 -179.818L678.953 -179.818M748.925 -179.818L748.925 -85.3558M895.867 -85.3558L825.895 -85.3558M825.895 -85.3558L748.925 -85.3558M825.895 -85.3558L825.895 9.1067M748.925 -85.3558L678.953 -85.3558M748.925 -85.3558L748.925 9.1067M895.867 9.1067L825.895 9.1067M825.895 9.1067L748.925 9.1067M825.895 9.1067L825.895 103.569M748.925 9.1067L678.953 9.1067M748.925 9.1067L748.925 103.569M895.867 103.569L825.895 103.569M825.895 103.569L748.925 103.569M825.895 103.569L825.895 198.032M748.925 103.569L678.953 103.569M748.925 103.569L748.925 198.032M895.867 198.032L825.895 198.032M825.895 198.032L748.925 198.032M825.895 198.032L825.895 292.494M748.925 198.032L678.953 198.032M748.925 198.032L748.925 292.494M895.867 292.494L825.895 292.494M825.895 292.494L748.925 292.494M825.895 292.494L825.895 386.957M748.925 292.494L678.953 292.494M748.925 292.494L748.925 386.957M895.867 386.957L825.895 386.957M825.895 386.957L748.925 386.957M825.895 386.957L825.895 481.419M748.925 386.957L678.953 386.957M748.925 386.957L748.925 481.419M895.867 481.419L825.895 481.419M825.895 481.419L748.925 481.419M825.895 481.419L825.895 575.882M748.925 481.419L678.953 481.419M748.925 481.419L748.925 575.882M895.867 575.882L825.895 575.882M825.895 575.882L748.925 575.882M825.895 575.882L825.895 670.344M748.925 575.882L678.953 575.882M748.925 575.882L748.925 670.344M895.867 670.344L825.895 670.344M825.895 670.344L748.925 670.344M825.895 670.344L825.895 764.807M748.925 670.344L678.953 670.344M748.925 670.344L748.925 764.807M895.867 764.807L825.895 764.807M825.895 764.807L748.925 764.807M825.895 764.807L825.895 859.269M748.925 764.807L678.953 764.807M748.925 764.807L748.925 859.269M895.867 859.269L825.895 859.269M825.895 859.269L748.925 859.269M825.895 859.269L825.895 953.732M748.925 859.269L678.953 859.269M748.925 859.269L748.925 953.732M895.867 953.732L825.895 953.732M825.895 953.732L748.925 953.732M748.925 953.732L678.953 953.732M671.956 -179.818L671.956 953.732M895.867 -226L825.895 -226M825.895 -226L748.925 -226M825.895 -226L825.895 -131.538M748.925 -226L678.953 -226M748.925 -226L748.925 -131.538M895.867 -131.538L825.895 -131.538M825.895 -131.538L748.925 -131.538M825.895 -131.538L825.895 -37.075M748.925 -131.538L678.953 -131.538M748.925 -131.538L748.925 -37.075M895.867 -37.075L825.895 -37.075M825.895 -37.075L748.925 -37.075M825.895 -37.075L825.895 57.3874M748.925 -37.075L678.953 -37.075M748.925 -37.075L748.925 57.3874M895.867 57.3875L825.895 57.3874M825.895 57.3874L748.925 57.3874M825.895 57.3874L825.895 151.85M748.925 57.3874L678.953 57.3874M748.925 57.3874L748.925 151.85M895.867 151.85L825.895 151.85M825.895 151.85L748.925 151.85M825.895 151.85L825.895 246.312M748.925 151.85L678.953 151.85M748.925 151.85L748.925 246.312M895.867 246.312L825.895 246.312M825.895 246.312L748.925 246.312M825.895 246.312L825.895 340.775M748.925 246.312L678.953 246.312M748.925 246.312L748.925 340.775M895.867 340.775L825.895 340.775M825.895 340.775L748.925 340.775M825.895 340.775L825.895 435.237M748.925 340.775L678.953 340.775M748.925 340.775L748.925 435.237M895.867 435.237L825.895 435.237M825.895 435.237L748.925 435.237M825.895 435.237L825.895 529.7M748.925 435.237L678.953 435.237M748.925 435.237L748.925 529.7M895.867 529.7L825.895 529.7M825.895 529.7L748.925 529.7M825.895 529.7L825.895 624.162M748.925 529.7L678.953 529.7M748.925 529.7L748.925 624.162M895.867 624.162L825.895 624.162M825.895 624.162L748.925 624.162M825.895 624.162L825.895 718.625M748.925 624.162L678.953 624.162M748.925 624.162L748.925 718.625M895.867 718.625L825.895 718.625M825.895 718.625L748.925 718.625M825.895 718.625L825.895 813.087M748.925 718.625L678.953 718.625M748.925 718.625L748.925 813.087M895.867 813.087L825.895 813.087M825.895 813.087L748.925 813.087M825.895 813.087L825.895 907.55M748.925 813.087L678.953 813.087M748.925 813.087L748.925 907.55M895.867 907.55L825.895 907.55M825.895 907.55L748.925 907.55M748.925 907.55L678.953 907.55M671.956 -226L671.956 907.55'
          stroke='#BCBCBC'
          strokeOpacity='0.43'
          strokeWidth='2'
        />
        <path
          opacity='0.8'
          d='M1119.78 -179.818L1049.81 -179.818M1049.81 -179.818L972.837 -179.818M1049.81 -179.818L1049.81 -85.3558M972.837 -179.818L902.865 -179.818M972.837 -179.818L972.837 -85.3558M1119.78 -85.3558L1049.81 -85.3558M1049.81 -85.3558L972.837 -85.3558M1049.81 -85.3558L1049.81 9.1067M972.837 -85.3558L902.865 -85.3558M972.837 -85.3558L972.837 9.1067M1119.78 9.1067L1049.81 9.1067M1049.81 9.1067L972.837 9.1067M1049.81 9.1067L1049.81 103.569M972.837 9.1067L902.865 9.1067M972.837 9.1067L972.837 103.569M1119.78 103.569L1049.81 103.569M1049.81 103.569L972.837 103.569M1049.81 103.569L1049.81 198.032M972.837 103.569L902.865 103.569M972.837 103.569L972.837 198.032M1119.78 198.032L1049.81 198.032M1049.81 198.032L972.837 198.032M1049.81 198.032L1049.81 292.494M972.837 198.032L902.865 198.032M972.837 198.032L972.837 292.494M1119.78 292.494L1049.81 292.494M1049.81 292.494L972.837 292.494M1049.81 292.494L1049.81 386.957M972.837 292.494L902.865 292.494M972.837 292.494L972.837 386.957M1119.78 386.957L1049.81 386.957M1049.81 386.957L972.837 386.957M1049.81 386.957L1049.81 481.419M972.837 386.957L902.865 386.957M972.837 386.957L972.837 481.419M1119.78 481.419L1049.81 481.419M1049.81 481.419L972.837 481.419M1049.81 481.419L1049.81 575.882M972.837 481.419L902.865 481.419M972.837 481.419L972.837 575.882M1119.78 575.882L1049.81 575.882M1049.81 575.882L972.837 575.882M1049.81 575.882L1049.81 670.344M972.837 575.882L902.865 575.882M972.837 575.882L972.837 670.344M1119.78 670.344L1049.81 670.344M1049.81 670.344L972.837 670.344M1049.81 670.344L1049.81 764.807M972.837 670.344L902.865 670.344M972.837 670.344L972.837 764.807M1119.78 764.807L1049.81 764.807M1049.81 764.807L972.837 764.807M1049.81 764.807L1049.81 859.269M972.837 764.807L902.865 764.807M972.837 764.807L972.837 859.269M1119.78 859.269L1049.81 859.269M1049.81 859.269L972.837 859.269M1049.81 859.269L1049.81 953.732M972.837 859.269L902.865 859.269M972.837 859.269L972.837 953.732M1119.78 953.732L1049.81 953.732M1049.81 953.732L972.837 953.732M972.837 953.732L902.865 953.732M895.867 -179.818L895.867 953.732M1119.78 -226L1049.81 -226M1049.81 -226L972.837 -226M1049.81 -226L1049.81 -131.538M972.837 -226L902.865 -226M972.837 -226L972.837 -131.538M1119.78 -131.538L1049.81 -131.538M1049.81 -131.538L972.837 -131.538M1049.81 -131.538L1049.81 -37.075M972.837 -131.538L902.865 -131.538M972.837 -131.538L972.837 -37.075M1119.78 -37.075L1049.81 -37.075M1049.81 -37.075L972.837 -37.075M1049.81 -37.075L1049.81 57.3874M972.837 -37.075L902.865 -37.075M972.837 -37.075L972.837 57.3874M1119.78 57.3875L1049.81 57.3874M1049.81 57.3874L972.837 57.3874M1049.81 57.3874L1049.81 151.85M972.837 57.3874L902.865 57.3874M972.837 57.3874L972.837 151.85M1119.78 151.85L1049.81 151.85M1049.81 151.85L972.837 151.85M1049.81 151.85L1049.81 246.312M972.837 151.85L902.865 151.85M972.837 151.85L972.837 246.312M1119.78 246.312L1049.81 246.312M1049.81 246.312L972.837 246.312M1049.81 246.312L1049.81 340.775M972.837 246.312L902.865 246.312M972.837 246.312L972.837 340.775M1119.78 340.775L1049.81 340.775M1049.81 340.775L972.837 340.775M1049.81 340.775L1049.81 435.237M972.837 340.775L902.865 340.775M972.837 340.775L972.837 435.237M1119.78 435.237L1049.81 435.237M1049.81 435.237L972.837 435.237M1049.81 435.237L1049.81 529.7M972.837 435.237L902.865 435.237M972.837 435.237L972.837 529.7M1119.78 529.7L1049.81 529.7M1049.81 529.7L972.837 529.7M1049.81 529.7L1049.81 624.162M972.837 529.7L902.865 529.7M972.837 529.7L972.837 624.162M1119.78 624.162L1049.81 624.162M1049.81 624.162L972.837 624.162M1049.81 624.162L1049.81 718.625M972.837 624.162L902.865 624.162M972.837 624.162L972.837 718.625M1119.78 718.625L1049.81 718.625M1049.81 718.625L972.837 718.625M1049.81 718.625L1049.81 813.087M972.837 718.625L902.865 718.625M972.837 718.625L972.837 813.087M1119.78 813.087L1049.81 813.087M1049.81 813.087L972.837 813.087M1049.81 813.087L1049.81 907.55M972.837 813.087L902.865 813.087M972.837 813.087L972.837 907.55M1119.78 907.55L1049.81 907.55M1049.81 907.55L972.837 907.55M972.837 907.55L902.865 907.55M895.867 -226L895.867 907.55'
          stroke='#BCBCBC'
          strokeOpacity='0.43'
          strokeWidth='2'
        />
      </g>
    </svg>
  );
};

export default HeroBlocksBg;


import Notion from './notion.svg';
import Grammarly from './grammarly.svg';
import Intercom from './intercom.svg';
import Unsplash from './unsplash.svg';
import Descript from './descript.svg';
import Lightning from './lightning.svg';

export { Notion, Grammarly, Intercom, Unsplash, Descript, Lightning };


import React from 'react';

const TaskIcon = () => {
  return (
    <svg width='79' height='79' viewBox='0 0 79 79' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <g id='Icon'>
        <rect id='Rectangle' opacity='0.1' width='79' height='79' rx='15' fill='#F64B4B' />
        <g id='ic_layers_48px'>
          <path
            id='Path'
            opacity='0.5'
            fillRule='evenodd'
            clipRule='evenodd'
            d='M39.4903 53.1119L25.15 42.0097L22 44.4489L39.5 58L57 44.4489L53.8306 42L39.4903 53.1119Z'
            fill='#F64B4B'
          />
          <path
            id='Path_2'
            fillRule='evenodd'
            clipRule='evenodd'
            d='M39.5 48L53.8208 36.9589L57 34.5L39.5 21L22 34.5L25.1694 36.9396L39.5 48Z'
            fill='#F64B4B'
          />
        </g>
      </g>
    </svg>
  );
};

export default TaskIcon;


import React from 'react';

const ChatIcon = () => {
  return (
    <svg width='79' height='79' viewBox='0 0 79 79' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <g id='Icon'>
        <rect id='Rectangle' opacity='0.1' width='79' height='79' rx='15' fill='#68D585' />
        <g id='chat-33'>
          <path
            id='Path'
            opacity='0.5'
            d='M56.1643 39C54.6615 45.7571 47.3982 50.8988 38.6846 50.8988C37.4492 50.8988 36.2161 50.7875 35 50.5762C37.9877 53.1631 42.6134 54.468 47.3935 53.761L53.7916 56.9199C53.9005 56.9733 54.0187 57 54.1369 57C54.2783 57 54.4189 56.9619 54.5433 56.8864C54.7705 56.7476 54.9095 56.502 54.9095 56.2374V50.4191C56.9052 48.6315 58 46.3771 58 44.035C58 42.2443 57.3533 40.5146 56.1643 39Z'
            fill='#68D585'
          />
          <path
            id='Path_2'
            d='M38.5 23C29.4014 23 22 28.8198 22 35.9737C22 38.7233 23.0851 41.3448 25.1429 43.5747V51.2368C25.1429 51.5017 25.2843 51.7466 25.5153 51.8863C25.6418 51.9618 25.7848 52 25.9286 52C26.0488 52 26.169 51.9733 26.2798 51.9199L33.6105 48.3597C35.2094 48.7497 36.8524 48.9474 38.5 48.9474C47.5986 48.9474 55 43.1275 55 35.9737C55 28.8198 47.5986 23 38.5 23Z'
            fill='#68D585'
          />
        </g>
      </g>
    </svg>
  );
};

export default ChatIcon;


import React from 'react';

const IntegrationIcon = () => {
  return (
    <svg xmlns='http://www.w3.org/2000/svg' width='79' height='79' viewBox='0 0 79 79' fill='none'>
      <rect opacity='0.1' width='79' height='79' rx='15' fill='#161C2D' />
      <path
        d='M47.6409 32.359C45.5259 30.253 42.7629 29.2 39.9999 29.2V40L32.3589 47.641C36.5799 51.862 43.4109 51.862 47.6319 47.641C51.8529 43.42 51.8529 36.58 47.6409 32.359Z'
        fill='#161C2D'
      />
      <path
        opacity='0.5'
        fillRule='evenodd'
        clipRule='evenodd'
        d='M22 40C22 30.055 30.055 22 40 22C49.945 22 58 30.055 58 40C58 49.936 49.945 58 40 58C30.055 58 22 49.945 22 40ZM25.6 40C25.6 47.956 32.044 54.4 40 54.4C47.956 54.4 54.4 47.956 54.4 40C54.4 32.044 47.956 25.6 40 25.6C32.044 25.6 25.6 32.044 25.6 40Z'
        fill='#161C2D'
      />
    </svg>
  );
};

export default IntegrationIcon;


import React from 'react';

const ServiceImageIcon1 = () => {
  return (
    <svg xmlns='http://www.w3.org/2000/svg' width='118' height='132' viewBox='0 0 118 132' fill='none'>
      <path
        d='M87.8308 25.8098C86.4783 24.4632 86.4783 22.2855 87.8308 20.9389L89.4778 19.3055C90.8357 17.9642 93.0315 17.9642 94.3894 19.3055C95.7368 20.6526 95.7368 22.8251 94.3894 24.1722L92.7381 25.8098C91.3798 27.1461 89.1891 27.1461 87.8308 25.8098Z'
        fill='#83FFA3'
      />
      <path
        opacity='0.4'
        d='M87.8308 25.8098C86.4783 24.4632 86.4783 22.2855 87.8308 20.9389L89.4778 19.3055C90.8357 17.9642 93.0315 17.9642 94.3894 19.3055C95.7368 20.6526 95.7368 22.8251 94.3894 24.1722L92.7381 25.8098C91.3798 27.1461 89.1891 27.1461 87.8308 25.8098Z'
        fill='white'
      />
      <path
        d='M90.1475 23.523C88.4013 21.7869 88.4013 18.9767 90.1475 17.2406L93.374 14.0408C95.1246 12.3091 97.9582 12.3091 99.7088 14.0408C101.457 15.776 101.457 18.588 99.7088 20.3232L96.4739 23.523C94.7223 25.2446 91.899 25.2446 90.1475 23.523Z'
        fill='#83FFA3'
      />
      <path
        d='M94.6441 19.0458C91.6588 16.1003 86.8349 16.1003 83.8496 19.0458L94.6441 29.7551C97.6123 26.7922 97.6123 22.0087 94.6441 19.0458Z'
        fill='#83FFA3'
      />
      <path
        d='M99.0255 39.8111C98.664 39.8111 98.3709 39.5204 98.3709 39.1619C98.3709 38.8034 98.664 38.5127 99.0255 38.5127C105.556 38.5127 110.85 33.2623 110.85 26.7856C110.85 20.3089 105.556 15.0585 99.0255 15.0585C98.7798 15.0782 98.5439 14.9593 98.415 14.751C98.2861 14.5427 98.2861 14.2802 98.415 14.0719C98.5439 13.8636 98.7798 13.7448 99.0255 13.7644C103.773 13.6799 108.197 16.1435 110.596 20.2077C112.995 24.2718 112.995 29.3036 110.596 33.3677C108.197 37.4319 103.773 39.8955 99.0255 39.8111Z'
        fill='#83FFA3'
      />
      <path
        fillRule='evenodd'
        clipRule='evenodd'
        d='M100.005 57.5943L114.947 127.957L115.686 127.936L115.547 129.955H81.4316L81.6006 127.479H83.9022L83.8726 127.936H94.1814L105.766 94.6561L98.0076 58.1346L100.005 57.5943ZM112.835 127.957L106.078 96.0717L94.9629 127.957H112.835Z'
        fill='#83FFA3'
      />
      <path
        fillRule='evenodd'
        clipRule='evenodd'
        d='M25.6214 57.6153L40.5461 127.957H41.2852L41.1458 129.976H7.03516L7.19986 127.5H9.50572L9.47193 127.957H19.7934L31.3776 94.677L23.6238 58.1555L25.6214 57.6153ZM38.4357 127.957L31.6786 96.0718L20.5547 127.957H38.4357Z'
        fill='#83FFA3'
      />
      <path d='M106.821 92.5369L104.9 98.0528H30.6855L32.6029 92.5369H106.821Z' fill='#83FFA3' />
      <path d='M103.9 96.6958L104.9 98.0528H30.6864L29.6855 96.6958H103.9Z' fill='#83FFA3' />
      <path opacity='0.2' d='M103.9 96.6958L104.9 98.0528H30.6864L29.6855 96.6958H103.9Z' fill='black' />
      <path
        d='M91.9598 84.0305H1.31341L0 82.7322L116.691 33.5035L118 34.8019L91.9598 84.0305Z'
        fill='#83FFA3'
      />
      <path
        opacity='0.4'
        d='M91.9598 84.0305H1.31341L0 82.7322L116.691 33.5035L118 34.8019L91.9598 84.0305Z'
        fill='black'
      />
      <path
        d='M12.8471 55.2954L15.3625 50.536L15.7365 50.7304L13.2212 55.4899L12.8471 55.2954Z'
        fill='#83FFA3'
      />
      <path
        d='M10.8197 59.1211L12.0156 56.8583L12.3897 57.0527L11.1937 59.3156L10.8197 59.1211Z'
        fill='#83FFA3'
      />
      <path d='M90.6464 82.7322H0L26.0444 33.5035H116.691L90.6464 82.7322Z' fill='#83FFA3' />
      <path
        opacity='0.3'
        d='M81.5333 74.8374L17.3789 75.0635L36.3579 39.8571C51.5614 40.9377 74.3328 41.0382 99.2411 40.5482L81.5333 74.8374Z'
        fill='black'
      />
      <path
        d='M80.6064 75.0636H17.0137L35.2832 40.5273C54.8703 41.2477 75.8469 40.787 98.4409 40.1671C94.9399 48.8703 88.5882 61.4979 80.6064 75.0636Z'
        fill='white'
      />
      <g opacity='0.6'>
        <path
          d='M28.2174 70.9925C34.1947 70.959 40.1719 70.9311 46.1491 70.9088L65.3857 70.8208L75.0441 70.7747C75.1239 70.7619 75.1825 70.6936 75.1825 70.6135C75.1825 70.5333 75.1239 70.465 75.0441 70.4522L57.1125 70.536L37.8759 70.6198L28.2174 70.6658C28.1265 70.6658 28.0527 70.739 28.0527 70.8292C28.0527 70.9194 28.1265 70.9925 28.2174 70.9925Z'
          fill='#83FFA3'
        />
        <path
          d='M74.255 71.3067C78.0868 64.075 81.9539 56.86 85.8561 49.6618C86.9823 47.59 88.1084 45.5183 89.2346 43.4465C89.336 43.2622 89.053 43.0989 88.9517 43.2789C85.01 50.4743 81.1149 57.6893 77.2661 64.9238C76.1596 66.9984 75.0588 69.0716 73.9636 71.1433C73.8665 71.3276 74.1452 71.491 74.2465 71.3067H74.255Z'
          fill='#83FFA3'
        />
        <path
          d='M89.4283 43.5973C83.4229 43.6308 77.419 43.6587 71.4164 43.681L51.9518 43.769L42.3229 43.815C42.2319 43.815 42.1582 43.8882 42.1582 43.9784C42.1582 44.0686 42.2319 44.1417 42.3229 44.1417C48.3283 44.1082 54.3322 44.0803 60.3348 44.058L79.7994 43.97L89.4283 43.9239C89.5193 43.9239 89.593 43.8508 89.593 43.7606C89.593 43.6704 89.5193 43.5973 89.4283 43.5973Z'
          fill='#83FFA3'
        />
        <path
          d='M43.4579 43.0109C39.5895 50.3235 35.6802 57.6181 31.7302 64.8944C30.604 66.9802 29.4693 69.0631 28.3263 71.1433C28.2249 71.3276 28.5079 71.4909 28.6092 71.3066C32.5846 64.047 36.5263 56.7539 40.4341 49.4272C41.5434 47.3443 42.6499 45.2599 43.7536 43.1742C43.8549 42.9899 43.572 42.8266 43.4706 43.0109H43.4579Z'
          fill='#83FFA3'
        />
        <path
          d='M49.8515 67.4995L56.4524 54.5913L58.2303 51.1235C58.3275 50.9392 58.0445 50.7717 57.9474 50.9601L51.1354 64.2369L49.5517 67.3152C49.4588 67.5037 49.7417 67.667 49.8346 67.4786L49.8515 67.4995Z'
          fill='#83FFA3'
        />
        <path
          d='M34.1842 67.5539L37.9851 60.1407C38.078 59.9523 37.7951 59.7889 37.7022 59.9732L33.9013 67.3906C33.8084 67.579 34.0913 67.7424 34.1842 67.5539Z'
          fill='#83FFA3'
        />
        <path
          d='M71.6583 67.4995C74.8215 61.8412 77.613 55.986 80.6114 50.2397C81.3463 48.8325 82.0896 47.4252 82.8666 46.0515C82.968 45.8672 82.685 45.7039 82.5837 45.8881C79.4205 51.5423 76.6248 57.4016 73.6305 63.1437C72.8957 64.5552 72.1524 65.9582 71.3753 67.332C71.274 67.5121 71.5527 67.6796 71.6583 67.4953V67.4995Z'
          fill='#83FFA3'
        />
        <path
          d='M54.3049 67.4576C57.1767 61.858 60.078 56.2666 62.9413 50.6628L63.9127 48.7613L64.4363 47.7352L64.6939 47.2242C64.7657 47.086 64.8755 46.7007 65.0191 46.6253C65.2307 46.5959 65.4453 46.5959 65.6568 46.6253H66.4635H68.1907C70.7613 46.6002 73.3304 46.5792 75.8981 46.5625C78.4953 46.5625 81.0884 46.5415 83.6856 46.5876C83.7654 46.5748 83.824 46.5065 83.824 46.4264C83.824 46.3462 83.7654 46.2779 83.6856 46.2651C77.4226 46.1562 71.1554 46.2651 64.8967 46.3363C64.8379 46.3355 64.7832 46.3659 64.7531 46.4159C61.214 53.4061 57.599 60.3586 54.022 67.3278C53.9248 67.5163 54.2078 67.6796 54.3049 67.4911V67.4576Z'
          fill='#83FFA3'
        />
        <path
          d='M71.684 67.378C70.1425 61.8705 68.3054 56.4467 66.5401 51.0104C66.0418 49.4803 65.5463 47.9516 65.0536 46.4243C64.9902 46.2232 64.6735 46.307 64.7368 46.508C66.5233 52.0826 68.3983 57.632 70.1172 63.2275C70.5395 64.6347 70.9618 66.0462 71.3841 67.466C71.4123 67.5481 71.5003 67.5941 71.5845 67.5708C71.6687 67.5474 71.7198 67.4627 71.7009 67.378H71.684Z'
          fill='#83FFA3'
        />
        <path
          d='M82.7771 46.2777C79.2888 49.2095 75.5471 51.8062 71.818 54.4113C67.7806 57.23 63.7095 59.9984 59.7439 62.9093C57.7843 64.3458 55.8459 65.8159 53.9877 67.3781C53.8272 67.5121 54.0595 67.7425 54.22 67.6085C57.7759 64.6222 61.5852 61.9418 65.3903 59.278C69.3981 56.4719 73.4481 53.7202 77.401 50.8345C79.3099 49.444 81.2019 48.02 83.0094 46.5081C83.1699 46.3699 82.9376 46.1437 82.7771 46.2777Z'
          fill='#83FFA3'
        />
        <path
          d='M53.6931 67.4115C58.5244 67.5497 63.3558 67.6042 68.1871 67.6084C69.3527 67.6084 70.5225 67.6084 71.6881 67.5832C71.7679 67.5705 71.8265 67.5021 71.8265 67.422C71.8265 67.3419 71.7679 67.2735 71.6881 67.2608C66.8441 67.3529 61.9748 67.2608 57.1434 67.1686C55.9947 67.1435 54.8418 67.1225 53.6931 67.089C53.6133 67.1018 53.5547 67.1701 53.5547 67.2503C53.5547 67.3304 53.6133 67.3987 53.6931 67.4115Z'
          fill='#83FFA3'
        />
        <path
          d='M46.9944 67.6084C50.0731 61.9249 52.9068 56.1242 55.8926 50.3863C56.6275 48.9679 57.3735 47.5551 58.1309 46.1478C58.228 45.9635 57.9451 45.8002 57.848 45.9845C54.7692 51.6679 51.9355 57.4686 48.9497 63.2065C48.2149 64.6263 47.4758 66.042 46.7114 67.445C46.6143 67.6293 46.8972 67.7927 46.9944 67.6084Z'
          fill='#83FFA3'
        />
        <path
          d='M37.8997 67.5372C39.8254 63.7845 41.754 60.0332 43.6854 56.2833C44.6483 54.407 45.6112 52.5307 46.5741 50.6543C47.0471 49.7371 47.5159 48.8157 47.9846 47.8985C48.1367 47.5969 48.3689 46.8347 48.6983 46.7048C48.9782 46.6616 49.2631 46.6616 49.543 46.7048H50.4805C52.93 46.6629 55.3837 46.6169 57.8373 46.7048C58.0443 46.7048 58.0443 46.3865 57.8373 46.3781C54.7248 46.2818 51.6123 46.3781 48.5041 46.4242C48.4453 46.4234 48.3906 46.4538 48.3605 46.5038C44.8088 53.4856 41.2064 60.4465 37.6294 67.4157C37.5322 67.6 37.8152 67.7675 37.9123 67.579L37.8997 67.5372Z'
          fill='#83FFA3'
        />
        <path
          d='M47.0189 67.5288C47.6481 60.5386 48.0029 53.5317 48.6532 46.5457C48.6743 46.3363 48.3492 46.3363 48.328 46.5457C47.6777 53.5317 47.3229 60.5386 46.6895 67.5288C46.6895 67.734 46.9977 67.734 47.0189 67.5288Z'
          fill='#83FFA3'
        />
        <path
          d='M57.8851 46.3824C52.6483 51.9862 47.2088 57.3974 41.8919 62.9217C40.4419 64.4211 39.006 65.9331 37.5842 67.4576C37.4406 67.6084 37.6729 67.8387 37.8165 67.6838C43.0828 62.0296 48.5645 56.5724 53.9322 51.0104C55.3399 49.5529 56.7349 48.087 58.1173 46.6127C58.2609 46.4619 58.0286 46.2316 57.8851 46.3824Z'
          fill='#83FFA3'
        />
        <path
          d='M37.4963 67.4996C40.6087 67.6503 43.7381 67.7844 46.8548 67.6964C47.066 67.6964 47.066 67.3655 46.8548 67.3739C43.7381 67.4577 40.6087 67.3278 37.4963 67.1771C37.2851 67.1771 37.2851 67.4912 37.4963 67.4996Z'
          fill='#83FFA3'
        />
        <path
          d='M42.5167 48.2629C42.3589 48.5217 42.3118 48.8322 42.3858 49.1256C42.4659 49.3748 42.6705 49.565 42.9264 49.6282C43.5524 49.7297 44.1912 49.5467 44.6663 49.1298C45.1609 48.7719 45.4404 48.1908 45.4096 47.5844C45.3376 47.0751 44.8794 46.7086 44.3622 46.7467C44.0013 46.7875 43.6671 46.9554 43.4205 47.22C43.2835 47.3453 43.1538 47.4781 43.0319 47.6179C42.9147 47.7345 42.829 47.8785 42.7828 48.0367C42.7448 48.2419 43.0615 48.3299 43.0995 48.1246C43.1375 47.9194 43.374 47.7058 43.5218 47.5592C43.6877 47.3743 43.8886 47.2234 44.1131 47.1153C44.2924 47.0358 44.4975 47.0361 44.6766 47.1161C44.8557 47.1961 44.9918 47.3482 45.0506 47.5341C45.1238 47.9786 44.9648 48.4295 44.6283 48.7319C44.2713 49.1006 43.7906 49.327 43.2769 49.3685C43.0663 49.3982 42.8552 49.3173 42.7194 49.1549C42.6127 48.927 42.6335 48.6603 42.7743 48.4513C42.8714 48.267 42.5885 48.1037 42.4914 48.288L42.5167 48.2629Z'
          fill='#83FFA3'
        />
      </g>
      <path
        opacity='0.2'
        d='M116.691 33.5036L90.6591 82.7322H0L26.0444 33.5036H52.0296L38.7857 39.5221H38.7562C31.9991 41.9639 26.5976 45.704 23.8357 50.3738C17.5009 61.0706 27.4549 72.5715 46.0496 76.098C64.6443 79.6245 84.8396 73.7778 91.1617 63.081C92.481 60.9423 93.1388 58.4667 93.0536 55.961L94.4177 33.4785L116.691 33.5036Z'
        fill='black'
      />
      <path
        d='M34.5385 25.2312C33.4411 27.1435 32.3267 29.127 31.2632 31.0895C30.1997 33.0521 29.1447 35.0314 28.2718 37.0065C28.043 37.5003 27.8481 37.9899 27.6447 38.4794C27.6235 38.5255 27.6447 38.4794 27.6447 38.4794C27.6447 38.4794 27.6447 38.5129 27.6193 38.5464C27.6043 38.6715 27.6043 38.7979 27.6193 38.923C27.698 39.3306 27.8275 39.7269 28.0049 40.1031C28.1998 40.5215 28.4286 40.986 28.687 41.4337C29.8271 43.2967 31.0926 45.082 32.475 46.7774L30.8226 48.514C28.856 47.0898 27.0843 45.4202 25.5516 43.5469C24.6628 42.4892 23.9752 41.2813 23.522 39.9817C23.3878 39.5563 23.3053 39.1166 23.2762 38.6719C23.262 38.4095 23.2705 38.1463 23.3017 37.8852C23.3163 37.7446 23.3389 37.6049 23.3695 37.4668C23.3695 37.3956 23.4076 37.3203 23.4245 37.2492L23.4796 37.0609C23.6745 36.4834 23.861 35.8976 24.0728 35.3368C24.9031 33.138 25.8508 30.9841 26.9117 28.8843C27.9752 26.792 29.0811 24.7876 30.3014 22.7706L34.5385 25.2312Z'
        fill='#FFC3BD'
      />
      <path
        d='M31.8598 46.225L34.114 46.9531L32.22 50.1083C32.22 50.1083 30.559 49.3676 30.2285 47.8654L31.8598 46.225Z'
        fill='#FFC3BD'
      />
      <path
        d='M37.199 48.1751L34.9999 50.6063L32.2246 50.1125L34.1186 46.9574L37.199 48.1751Z'
        fill='#FFC3BD'
      />
      <path
        d='M47.7076 10.5476C47.644 10.7945 47.7076 11.0289 47.8898 11.0707C48.072 11.1125 48.2372 10.9452 48.3135 10.6983C48.3897 10.4514 48.3135 10.2129 48.1313 10.171C47.9491 10.1292 47.7711 10.2966 47.7076 10.5476Z'
        fill='#263238'
      />
      <path
        d='M47.7029 11.0246C47.8056 11.8578 48.0237 12.673 48.3512 13.4475C47.9366 13.6088 47.4708 13.5797 47.0801 13.368L47.7029 11.0246Z'
        fill='#ED847E'
      />
      <path
        d='M47.1482 8.93662C47.0926 8.91267 47.0566 8.85845 47.0566 8.79853C47.0566 8.73861 47.0926 8.68439 47.1482 8.66044C47.6005 8.47188 48.1173 8.51247 48.5338 8.76924C48.6012 8.81948 48.6178 8.91265 48.5719 8.98265C48.5225 9.04926 48.428 9.06419 48.36 9.01613C48.0262 8.81831 47.6166 8.79031 47.2584 8.9408C47.2225 8.95389 47.1829 8.95238 47.1482 8.93662Z'
        fill='#263238'
      />
      <path
        d='M39.0683 11.5185C39.5301 13.8409 39.992 18.0966 38.3438 19.6449C38.3438 19.6449 38.9878 22.0049 43.3563 22.0049C48.1654 22.0049 45.657 19.6449 45.657 19.6449C43.03 19.0297 43.1147 17.1048 43.5385 15.3013L39.0683 11.5185Z'
        fill='#FFC3BD'
      />
      <path
        d='M37.539 20.8416C37.3144 19.5862 37.0645 18.1635 37.8949 17.7994C38.8059 17.381 43.5938 17.3558 45.1404 18.4104C46.6869 19.4649 45.9878 21.8919 45.9878 21.8919L37.539 20.8416Z'
        fill='#263238'
      />
      <path
        opacity='0.6'
        d='M37.539 20.8416C37.3144 19.5862 37.0645 18.1635 37.8949 17.7994C38.8059 17.381 43.5938 17.3558 45.1404 18.4104C46.6869 19.4649 45.9878 21.8919 45.9878 21.8919L37.539 20.8416Z'
        fill='#83FFA3'
      />
      <path
        fillRule='evenodd'
        clipRule='evenodd'
        d='M22.9975 127.618C22.7473 127.795 22.4584 127.817 22.1967 127.68C21.922 127.594 21.6548 127.464 21.4001 127.292C21.3719 127.277 21.3534 127.238 21.3535 127.194C21.3562 127.15 21.3759 127.112 21.4044 127.095C21.4467 127.065 22.4509 126.474 22.8746 126.776C22.9705 126.837 23.0432 126.956 23.0738 127.102C23.1283 127.28 23.0974 127.488 22.9975 127.618ZM22.8111 126.979L22.7221 126.936V126.966C22.3502 126.925 21.9767 127.005 21.6289 127.2C22.0865 127.446 22.7263 127.661 22.9 127.446C22.9255 127.427 22.9678 127.366 22.9255 127.169C22.9084 127.084 22.8666 127.015 22.8111 126.979Z'
        fill='#83FFA3'
      />
      <path
        fillRule='evenodd'
        clipRule='evenodd'
        d='M21.4379 127.108H21.404C21.39 127.106 21.3768 127.1 21.3658 127.091C21.3451 127.072 21.3369 127.043 21.3447 127.016C21.3451 127.015 21.3458 127.013 21.3467 127.01C21.3755 126.922 21.6466 126.093 22.0565 125.882C22.161 125.827 22.2839 125.818 22.3955 125.857C22.5111 125.881 22.5929 125.983 22.5904 126.1C22.5819 126.46 21.8023 127.004 21.4379 127.108ZM22.3438 125.983H22.3226C22.2577 125.965 22.1886 125.971 22.1277 125.999C21.8459 126.233 21.6421 126.545 21.543 126.895C21.9201 126.719 22.437 126.292 22.437 126.079C22.437 126.058 22.437 126.012 22.3438 125.983Z'
        fill='#83FFA3'
      />
      <path
        fillRule='evenodd'
        clipRule='evenodd'
        d='M46.8507 128.897C46.7152 129.15 46.3296 129.233 45.9059 129.233C45.5805 129.229 45.256 129.187 44.9356 129.109C44.9051 129.098 44.8819 129.064 44.8763 129.021C44.8703 128.976 44.8857 128.931 44.9144 128.909C44.9525 128.873 46.0754 127.983 46.6092 128.184C46.7109 128.216 46.7983 128.306 46.8507 128.431C46.9222 128.571 46.9222 128.758 46.8507 128.897ZM46.5617 128.367C46.5125 128.357 46.4626 128.357 46.4134 128.367H46.4007C45.9607 128.44 45.5349 128.63 45.1465 128.926C45.7439 129.044 46.5574 129.038 46.71 128.75C46.7439 128.708 46.7651 128.644 46.71 128.514C46.677 128.439 46.6234 128.386 46.5617 128.367Z'
        fill='#83FFA3'
      />
      <path
        fillRule='evenodd'
        clipRule='evenodd'
        d='M44.9661 128.832H44.9364C44.9208 128.835 44.9047 128.834 44.8898 128.828C44.8675 128.812 44.8561 128.784 44.8602 128.757C44.8602 128.724 44.9322 127.866 45.3559 127.535C45.473 127.436 45.6263 127.389 45.7796 127.405C45.9873 127.426 46.0635 127.531 46.0635 127.615C46.1228 127.995 45.3517 128.661 44.9661 128.832ZM45.7623 127.543H45.7199C45.6224 127.544 45.5281 127.578 45.453 127.64C45.2138 127.916 45.066 128.257 45.0293 128.619C45.4276 128.38 45.9488 127.841 45.9149 127.627C45.9147 127.626 45.9144 127.625 45.9142 127.624C45.9095 127.604 45.8954 127.543 45.7623 127.543Z'
        fill='#83FFA3'
      />
      <path d='M41.3984 128.757H44.6144L44.9322 121.401H41.7205L41.3984 128.757Z' fill='#FFC3BD' />
      <path
        d='M17.832 126.263L20.9717 126.937L24.1284 120.087L20.9844 119.413L17.832 126.263Z'
        fill='#FFC3BD'
      />
      <path
        d='M21.2762 126.623L17.7424 125.87C17.6141 125.842 17.4836 125.907 17.4289 126.024L16.2043 128.648C16.1447 128.778 16.1484 128.928 16.2144 129.055C16.2804 129.182 16.4015 129.273 16.5433 129.301C17.7806 129.544 18.3949 129.598 19.933 129.933C20.8906 130.138 23.0473 130.657 24.365 130.937C25.6828 131.217 26.1404 129.966 25.6362 129.736C23.3312 128.694 22.3693 127.778 21.7423 126.924C21.6298 126.77 21.4638 126.663 21.2762 126.623Z'
        fill='#263238'
      />
      <path
        d='M44.5936 128.389H41.0811C40.9497 128.388 40.8362 128.479 40.8099 128.606L40.1743 131.427C40.1417 131.565 40.1753 131.71 40.2656 131.821C40.3558 131.931 40.4925 131.994 40.6362 131.992C41.9073 131.971 43.7335 131.9 45.3267 131.9C47.1868 131.9 48.7926 132 50.979 132C52.2967 132 52.6738 130.682 52.1103 130.561C49.5977 130.017 47.5427 129.958 45.369 128.636C45.1383 128.485 44.8701 128.399 44.5936 128.389Z'
        fill='#263238'
      />
      <path
        d='M51.0047 23.482C52.0513 25.8128 53.1953 28.2064 54.3944 30.4953C54.9918 31.6419 55.6147 32.7717 56.2587 33.843C56.8814 34.9017 57.5691 35.9219 58.3179 36.8977L58.5891 37.2325C58.6569 37.2952 58.5891 37.2659 58.6951 37.3413C58.8641 37.4874 59.0456 37.619 59.2374 37.7346C59.746 38.0409 60.2707 38.3203 60.8094 38.5715C61.9449 39.1113 63.1525 39.6302 64.377 40.1198C66.8218 41.1032 69.3387 42.0447 71.8386 42.9862L71.2284 45.2961C68.5159 44.866 65.8286 44.2933 63.1779 43.5804C61.8475 43.2038 60.517 42.8188 59.1738 42.3251C58.4672 42.0673 57.7768 41.7683 57.1061 41.4296C56.7078 41.2256 56.3267 40.9906 55.9663 40.7266C55.7365 40.5559 55.5211 40.3669 55.3223 40.1616L54.9283 39.7432C53.9609 38.6632 53.0785 37.5119 52.2885 36.2993C51.5047 35.1318 50.7971 33.9392 50.1191 32.7341C48.7796 30.3349 47.5772 27.8636 46.5176 25.3316L51.0047 23.482Z'
        fill='#FFC3BD'
      />
      <path
        d='M31.5932 20.3646C28.5806 21.0466 23.5215 35.8265 23.5215 35.8265L28.445 37.4417C28.445 37.4417 33.4702 30.0895 35.1778 26.5619C36.9616 22.8334 34.6778 19.6657 31.5932 20.3646Z'
        fill='#83FFA3'
      />
      <path
        opacity='0.5'
        d='M31.5932 20.3646C28.5806 21.0466 23.5215 35.8265 23.5215 35.8265L28.445 37.4417C28.445 37.4417 33.4702 30.0895 35.1778 26.5619C36.9616 22.8334 34.6778 19.6657 31.5932 20.3646Z'
        fill='black'
      />
      <path
        d='M29.3019 36.7178C29.3019 36.7178 24.4758 35.8097 23.37 35.1319C22.9844 35.6842 22.5225 37.6844 22.8361 38.2744C23.1496 38.8645 27.6452 39.7139 28.2554 39.3666C28.8655 39.0193 29.3019 36.7178 29.3019 36.7178Z'
        fill='#263238'
      />
      <path
        opacity='0.6'
        d='M29.3019 36.7178C29.3019 36.7178 24.4758 35.8097 23.37 35.1319C22.9844 35.6842 22.5225 37.6844 22.8361 38.2744C23.1496 38.8645 27.6452 39.7139 28.2554 39.3666C28.8655 39.0193 29.3019 36.7178 29.3019 36.7178Z'
        fill='#83FFA3'
      />
      <path
        opacity='0.3'
        d='M33.5472 25.612C32.6277 26.52 31.793 29.0977 31.7676 32.3742C32.8311 30.7004 33.9285 28.9052 34.6954 27.4699C34.331 26.1769 33.9243 25.2521 33.5472 25.612Z'
        fill='black'
      />
      <path
        d='M49.61 20.5278C49.61 20.5278 53.0336 24.3441 49.8006 47.9784H32.6022C32.4835 45.3714 34.1403 32.6504 31.5938 20.3604C33.4954 19.9977 35.4188 19.7573 37.352 19.6406C39.7877 19.5024 42.2295 19.5024 44.6653 19.6406C46.3344 19.8088 47.9876 20.1054 49.61 20.5278Z'
        fill='#83FFA3'
      />
      <path
        opacity='0.5'
        d='M49.61 20.5278C49.61 20.5278 53.0336 24.3441 49.8006 47.9784H32.6022C32.4835 45.3714 34.1403 32.6504 31.5938 20.3604C33.4954 19.9977 35.4188 19.7573 37.352 19.6406C39.7877 19.5024 42.2295 19.5024 44.6653 19.6406C46.3344 19.8088 47.9876 20.1054 49.61 20.5278Z'
        fill='black'
      />
      <path
        opacity='0.3'
        d='M47.0586 28.0767C47.3849 31.5248 49.6009 35.9018 50.8974 37.8853C51.0669 35.6089 51.1559 33.6254 51.1813 31.893L47.0586 28.0767Z'
        fill='black'
      />
      <path
        d='M45.3516 22.9883C43.2797 26.859 54.097 39.4461 54.097 39.4461L57.8765 35.6591C57.8765 35.6591 52.9699 27.1854 51.8174 23.4277C50.3938 18.7828 46.9278 20.0424 45.3516 22.9883Z'
        fill='#83FFA3'
      />
      <path
        opacity='0.5'
        d='M45.3516 22.9883C43.2797 26.859 54.097 39.4461 54.097 39.4461L57.8765 35.6591C57.8765 35.6591 52.9699 27.1854 51.8174 23.4277C50.3938 18.7828 46.9278 20.0424 45.3516 22.9883Z'
        fill='black'
      />
      <path
        d='M57.723 34.91C57.723 34.91 54.4435 38.5213 53.291 39.0946C53.5707 39.7055 55.0579 41.1408 55.7401 41.1869C56.4222 41.2329 59.473 37.8643 59.4857 37.1697C59.4984 36.4751 57.723 34.91 57.723 34.91Z'
        fill='#263238'
      />
      <path
        opacity='0.6'
        d='M57.723 34.91C57.723 34.91 54.4435 38.5213 53.291 39.0946C53.5707 39.7055 55.0579 41.1408 55.7401 41.1869C56.4222 41.2329 59.473 37.8643 59.4857 37.1697C59.4984 36.4751 57.723 34.91 57.723 34.91Z'
        fill='#83FFA3'
      />
      <path
        d='M71.0953 43.0281L74.2096 41.7016L75.1799 45.0492C75.1799 45.0492 72.8029 46.5849 70.9004 45.2417L71.0953 43.0281Z'
        fill='#FFC3BD'
      />
      <path
        d='M77.685 43.2875C77.583 43.3546 77.4454 43.3285 77.3757 43.2289L73.9182 38.1656C73.8844 38.1175 73.8717 38.058 73.8829 38.0005C73.894 37.9431 73.9281 37.8925 73.9776 37.8601C74.0262 37.8268 74.0865 37.8142 74.1447 37.8252C74.2029 37.8362 74.2541 37.8699 74.2869 37.9187L77.7443 42.982C77.7781 43.0301 77.7909 43.0896 77.7797 43.1471C77.7686 43.2046 77.7344 43.2552 77.685 43.2875Z'
        fill='#263238'
      />
      <path
        d='M77.4947 41.9485L78.8633 43.9487L75.1812 45.0367L74.2109 41.6974L77.4947 41.9485Z'
        fill='#FFC3BD'
      />
      <path opacity='0.2' d='M44.932 121.405L44.771 125.196H41.5508L41.716 121.405H44.932Z' fill='black' />
      <path
        opacity='0.2'
        d='M20.9825 119.417L24.1265 120.087L22.4994 123.618L19.3555 122.945L20.9825 119.417Z'
        fill='black'
      />
      <path
        d='M39.4648 7.89456C38.8631 10.9911 38.3504 12.7737 39.5029 14.7321C41.2359 17.6613 45.4052 17.2428 46.9306 14.3932C48.3076 11.8239 49.0491 7.19574 46.3543 5.21645C45.1466 4.32394 43.557 4.11276 42.1535 4.65837C40.7499 5.20397 39.7325 6.42853 39.4648 7.89456Z'
        fill='#FFC3BD'
      />
      <path
        d='M38.229 6.36308C40.4959 5.63079 44.7923 4.05321 46.3092 7.65611C47.8261 11.259 41.6484 15.0209 40.0764 15.0251C38.8137 15.0377 35.7376 7.19999 38.229 6.36308Z'
        fill='#263238'
      />
      <path
        d='M42.9495 7.88206C47.39 10.2882 51.4237 6.82755 49.6229 2.915C47.8222 -0.997555 43.8859 -0.432641 45.1104 1.47551C46.3349 3.38367 42.9495 0.492145 40.6106 1.38345C38.9708 2.00695 41.0979 3.0238 41.297 3.76028C41.4962 4.49676 37.0048 4.51768 36.4074 5.6224C35.81 6.72712 37.9666 9.02863 39.0725 8.66875C40.1784 8.30888 42.1656 7.45105 42.9495 7.88206Z'
        fill='#263238'
      />
      <path
        d='M44.2316 9.73577C44.0851 10.5057 44.2013 11.3019 44.5621 11.9996C45.0409 12.9118 45.8714 12.6398 46.2315 11.7736C46.5578 10.9911 46.6976 9.57676 45.9773 8.95326C45.257 8.32976 44.418 8.81098 44.2316 9.73577Z'
        fill='#FFC3BD'
      />
      <path
        d='M43.699 47.9784C43.699 47.9784 40.0508 72.2487 38.0466 81.3376C35.8518 91.2968 24.1235 123.212 24.1235 123.212L18.3652 121.982C18.3652 121.982 27.1488 92.1003 28.3987 82.2289C29.7588 71.529 32.6019 47.9658 32.6019 47.9658L43.699 47.9784Z'
        fill='#263238'
      />
      <path
        d='M25.4998 121.317C25.5252 121.317 24.4278 123.371 24.4278 123.371L17.9492 121.986L18.4958 120.066L25.4998 121.317Z'
        fill='#83FFA3'
      />
      <path
        opacity='0.3'
        d='M41.3929 56.6237C37.1557 57.4396 37.6176 72.9811 38.126 80.9736C39.3421 75.3244 41.1259 64.453 42.342 56.7366C42.0475 56.5947 41.7131 56.5549 41.3929 56.6237Z'
        fill='black'
      />
      <path
        d='M49.7922 47.9785C49.7922 47.9785 50.216 71.7216 49.8855 81.4047C49.5295 91.4769 45.9788 124.459 45.9788 124.459H40.5214C40.5214 124.459 40.3181 92.0669 40.0765 82.1746C39.8138 71.391 38.4961 47.9785 38.4961 47.9785L49.7922 47.9785Z'
        fill='#263238'
      />
      <path
        d='M47.0165 122.317C47.0419 122.317 46.7072 124.552 46.7072 124.552H40.0803L39.9023 122.56L47.0165 122.317Z'
        fill='#83FFA3'
      />
    </svg>
  );
};

export default ServiceImageIcon1;


import React from 'react';

const ServiceImageIcon2 = () => {
  return (
    <svg xmlns='http://www.w3.org/2000/svg' width='146' height='132' viewBox='0 0 146 132' fill='none'>
      <rect y='60.3778' width='146' height='5.13181' fill='#407BFF' />
      <rect opacity='0.3' y='60.3778' width='39.0751' height='5.13181' fill='white' />
      <path
        d='M39.6985 65.5095H36.2993L38.0784 129.828H39.6985H41.3185L43.1019 65.5095H39.6985Z'
        fill='#407BFF'
      />
      <path opacity='0.3' d='M38.0792 129.828H39.6992V66.8904L36.356 67.4882L38.0792 129.828Z' fill='white' />
      <path
        d='M7.48264 65.5095H4.0835L5.86257 129.828H7.48264H9.10272L10.8818 65.5095H7.48264Z'
        fill='#407BFF'
      />
      <path
        opacity='0.3'
        d='M5.86178 129.828H7.48186V66.8904L4.13428 67.4882L5.86178 129.828Z'
        fill='white'
      />
      <path
        d='M138.517 65.5095H135.118L136.897 129.828H138.517H140.137L141.921 65.5095H138.517Z'
        fill='#407BFF'
      />
      <path
        opacity='0.3'
        d='M136.899 129.828H138.519V66.8904L135.175 67.4882L136.899 129.828Z'
        fill='white'
      />
      <path
        d='M106.302 65.5095H102.903L104.682 129.828H106.302H107.922L109.701 65.5095H106.302Z'
        fill='#407BFF'
      />
      <path
        opacity='0.3'
        d='M104.681 129.828H106.301V66.8904L102.958 67.4882L104.681 129.828Z'
        fill='white'
      />
      <path
        d='M69.3032 32.9042H34.5898C34.0184 32.882 33.4707 33.129 33.1162 33.5687C32.7618 34.0084 32.6435 34.5876 32.7979 35.127L37.4217 56.7446C37.7275 58.0009 38.8464 58.9063 40.1634 58.9632H74.9026C75.473 58.9849 76.0197 58.7385 76.374 58.2999C76.7282 57.8614 76.8473 57.2835 76.6946 56.7446L72.0664 35.127C71.7601 33.8618 70.6296 32.9524 69.3032 32.9042Z'
        fill='#263238'
      />
      <path
        d='M40.4642 57.7298C39.5759 57.671 38.8269 57.0595 38.6078 56.2142L33.9839 34.5966C33.9037 34.3069 33.9622 33.9972 34.1429 33.7547C34.3303 33.5471 34.6038 33.434 34.8863 33.4473H69.6255C70.5137 33.5061 71.2628 34.1176 71.4819 34.9629L76.1058 56.5805C76.1859 56.8702 76.1275 57.18 75.9468 57.4225C75.7605 57.6316 75.4863 57.745 75.2034 57.7298H40.4642Z'
        fill='white'
      />
      <path
        opacity='0.4'
        d='M66.6732 55.9994L62.29 35.5016C62.2401 35.256 62.3045 35.0013 62.4656 34.8068C62.6268 34.6123 62.8679 34.4982 63.1236 34.4955H68.7617C69.1643 34.4985 69.5108 34.775 69.5953 35.1606L73.9785 55.6416C74.0284 55.8873 73.964 56.1419 73.8029 56.3364C73.6417 56.5309 73.4006 56.645 73.1449 56.6477H67.5068C67.1094 56.6465 66.7646 56.3784 66.6732 55.9994Z'
        fill='#407BFF'
      />
      <path d='M36.8741 36.2889L36.6851 35.4006H43.6466L43.8357 36.2889H36.8741Z' fill='#407BFF' />
      <path d='M40.0895 38.4948L39.9004 37.6066H52.1004L52.2937 38.4948H40.0895Z' fill='#EBEBEB' />
      <path d='M40.7344 40.6968L40.541 39.8085H54.2192L54.4083 40.6968H40.7344Z' fill='#EBEBEB' />
      <path d='M41.3732 42.9026L41.1841 42.0143H52.1937L52.3871 42.9026H41.3732Z' fill='#EBEBEB' />
      <path d='M38.9937 46.4768L38.8003 45.5885H43.205L43.3941 46.4768H38.9937Z' fill='#407BFF' />
      <path d='M42.2042 48.6786L42.0151 47.7903H47.3781L47.5715 48.6786H42.2042Z' fill='#EBEBEB' />
      <path d='M48.856 48.6786L48.6626 47.7903H54.0299L54.219 48.6786H48.856Z' fill='#EBEBEB' />
      <path d='M42.8473 50.8845L42.6582 49.9962H60.7927L60.9818 50.8845H42.8473Z' fill='#EBEBEB' />
      <path d='M43.4884 53.0863L43.2993 52.198H57.128L57.317 53.0863H43.4884Z' fill='#EBEBEB' />
      <path
        d='M85.5203 58.8328H39.8145C38.5683 58.8328 37.7604 59.5274 38.0225 60.3778H88.262C88.0042 59.5274 86.7666 58.8328 85.5203 58.8328Z'
        fill='#263238'
      />
      <path
        opacity='0.1'
        d='M24.7943 27.4398L20.4068 6.9547C20.3584 6.70965 20.4234 6.45617 20.5844 6.2627C20.7454 6.06922 20.9857 5.9557 21.2405 5.95276H56.736C57.1373 5.95536 57.4834 6.22972 57.5696 6.61371L61.9572 27.082C62.007 27.3277 61.9427 27.5824 61.7815 27.7769C61.6204 27.9714 61.3792 28.0855 61.1235 28.0882H25.628C25.2305 28.0869 24.8857 27.8188 24.7943 27.4398Z'
        fill='#407BFF'
      />
      <path d='M37.412 6.62635H29.9606L29.793 5.83911H37.2444L37.412 6.62635Z' fill='#407BFF' />
      <path
        opacity='0.4'
        d='M36.1995 7.88087H33.2086L33.041 7.09363H36.0319L36.1995 7.88087Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M41.1771 7.88087H36.5704L36.4028 7.09363H41.0095L41.1771 7.88087Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M43.1828 9.13111H33.4752L33.3076 8.34387H43.0195L43.1828 9.13111Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M41.9496 10.3858H33.7418L33.5742 9.59851H41.782L41.9496 10.3858Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M47.3939 23.6931H42.1685L42.3361 24.4761H47.5615L47.3939 23.6931Z'
        fill='#407BFF'
      />
      <path d='M40.8796 21.9754H33.2262L33.0586 21.1881H40.712L40.8796 21.9754Z' fill='#407BFF' />
      <path
        opacity='0.4'
        d='M43.9566 24.9434H36.8403L37.0079 25.7306H44.1242L43.9566 24.9434Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M41.7992 23.6931H36.5737L36.7413 24.4761H41.9668L41.7992 23.6931Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M46.7581 22.4385H36.3071L36.4747 23.2257H46.9257L46.7581 22.4385Z'
        fill='#407BFF'
      />
      <path d='M37.1506 0.783033H28.7194L28.5518 0H36.983L37.1506 0.783033Z' fill='#407BFF' />
      <path
        opacity='0.4'
        d='M41.313 3.75525H32.0137L32.1813 4.54249H41.4763L41.313 3.75525Z'
        fill='#407BFF'
      />
      <path opacity='0.4' d='M39.454 2.50488H31.749L31.9166 3.28792H39.6216L39.454 2.50488Z' fill='#407BFF' />
      <path
        opacity='0.4'
        d='M39.9652 1.25024H31.4824L31.65 2.03749H40.1328L39.9652 1.25024Z'
        fill='#407BFF'
      />
      <path d='M37.055 12.4232H31.1935L31.0259 11.636H36.8874L37.055 12.4232Z' fill='#407BFF' />
      <path
        opacity='0.4'
        d='M46.2594 15.3912H34.8071L34.9747 16.1785H46.4227L46.2594 15.3912Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M39.2847 14.1409H34.5405L34.7081 14.9281H39.4523L39.2847 14.1409Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M44.4346 14.1409H39.6904L39.858 14.9281H44.6022L44.4346 14.1409Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M44.7269 12.8864H34.2759L34.4435 13.6736H44.8902L44.7269 12.8864Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M44.7043 19.1506H35.6069L35.7745 19.9337H44.8719L44.7043 19.1506Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M37.9875 17.8961H35.3403L35.5079 18.6834H38.1508L37.9875 17.8961Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M42.1269 17.8961H38.3496L38.5172 18.6834H42.2945L42.1269 17.8961Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M45.5247 16.6458H35.0737L35.2413 17.4288H45.6923L45.5247 16.6458Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M53.7552 16.4353H50.0123L49.8447 15.6481H53.592L53.7552 16.4353Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M59.9863 16.4353H54.2194L54.0518 15.6481H59.8187L59.9863 16.4353Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M62.4359 17.6897H50.2789L50.1113 16.9025H62.2683L62.4359 17.6897Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M60.8184 18.9401H50.5436L50.376 18.1528H60.6508L60.8184 18.9401Z'
        fill='#407BFF'
      />
      <path opacity='0.4' d='M65.4226 11.455H53.7812L53.9488 12.238H65.5902L65.4226 11.455Z' fill='#407BFF' />
      <path
        opacity='0.4'
        d='M63.162 10.2006H53.5146L53.6822 10.9878H63.3253L63.162 10.2006Z'
        fill='#407BFF'
      />
      <path d='M61.4163 8.9502H50.7935L50.9611 9.73323H61.5839L61.4163 8.9502Z' fill='#407BFF' />
      <path
        opacity='0.4'
        d='M65.9466 23.9498H51.6108L51.7784 24.7371H66.1142L65.9466 23.9498Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M57.2831 22.6996H51.3442L51.5118 23.4826H57.4507L57.2831 22.6996Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M63.7289 22.6996H57.79L57.9576 23.4826H63.8965L63.7289 22.6996Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M64.1585 21.4449H51.0776L51.2452 22.2322H64.3261L64.1585 21.4449Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M63.7965 27.7051H52.4087L52.5763 28.4923H63.9641L63.7965 27.7051Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M55.4553 26.4548H52.1421L52.3097 27.2421H55.6229L55.4553 26.4548Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M60.6391 26.4548H55.9121L56.0797 27.2421H60.8067L60.6391 26.4548Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M64.9627 25.2002H51.8774L52.045 25.9874H65.1259L64.9627 25.2002Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M30.1191 28.6775H21.2065L21.3741 29.4647H30.2867L30.1191 28.6775Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M27.4847 27.4271H20.9399L21.1075 28.2102H27.648L27.4847 27.4271Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M34.4848 27.4271H27.9443L28.1119 28.2102H34.6567L34.4848 27.4271Z'
        fill='#407BFF'
      />
      <path
        opacity='0.4'
        d='M33.7585 26.1727H20.6733L20.8409 26.96H33.9218L33.7585 26.1727Z'
        fill='#407BFF'
      />
      <path d='M133.834 52.198H128.316L128.961 60.3777H133.189L133.834 52.198Z' fill='#407BFF' />
      <path opacity='0.4' d='M133.834 52.198H128.316L128.961 60.3777H133.189L133.834 52.198Z' fill='white' />
      <path d='M13.5891 46.5189H21.5219L18.8146 60.3778H10.8818L13.5891 46.5189Z' fill='#263238' />
      <path d='M23.6903 42.8058H12.4873L15.6243 60.3777H26.8273L23.6903 42.8058Z' fill='#407BFF' />
      <path d='M11.8267 42.8058H12.4884L15.6255 60.3777H14.9637L11.8267 42.8058Z' fill='#407BFF' />
      <path
        opacity='0.3'
        d='M11.8267 42.8058H12.4884L15.6255 60.3777H14.9637L11.8267 42.8058Z'
        fill='black'
      />
      <path d='M17.2357 58.4959L14.769 44.6833H22.083L24.5453 58.4959H17.2357Z' fill='white' />
      <path
        opacity='0.6'
        d='M24.1982 58.4959L21.7358 44.6833H22.0839L24.5463 58.4959H24.1982Z'
        fill='#407BFF'
      />
      <path
        d='M79.5468 20.6633C79.706 21.0013 79.6544 21.3603 79.4264 21.4617C79.1984 21.5631 78.8887 21.373 78.7296 21.0393C78.5704 20.7056 78.6263 20.3423 78.85 20.2409C79.0737 20.1395 79.3877 20.3085 79.5468 20.6633Z'
        fill='#263238'
      />
      <path
        d='M79.6848 21.3308C79.6848 21.3308 79.8224 23.6373 79.4009 24.9722C80.2612 25.2552 81.1903 24.5498 81.1903 24.5498L79.6848 21.3308Z'
        fill='#FF5652'
      />
      <path
        d='M79.5902 17.871C79.5536 17.9007 79.5085 17.9184 79.4612 17.9217C78.8933 17.9365 78.367 18.2177 78.046 18.6779C78.0075 18.7486 77.9328 18.7932 77.8511 18.794C77.7694 18.7949 77.6937 18.752 77.6537 18.682C77.6137 18.6121 77.6156 18.5263 77.6588 18.4582C78.0543 17.8687 78.7169 17.5047 79.4353 17.4824C79.5318 17.4772 79.6208 17.5333 79.656 17.6217C79.6912 17.71 79.6647 17.8106 79.5902 17.871Z'
        fill='#263238'
      />
      <path
        d='M92.2143 20.1394C93.5435 24.6594 95.0275 28.1656 96.8384 30.168C96.8384 30.168 96.8728 33.7207 90.7088 35.4104C83.9296 37.2691 86.5277 32.9941 86.5277 32.9941C89.9689 31.1142 89.642 28.2755 87.0525 27.194L92.2143 20.1394Z'
        fill='#FF8B7B'
      />
      <path
        d='M98.2765 29.3021C98.1561 27.6504 97.9969 25.7663 96.9603 25.7156C95.8161 25.6649 89.1918 28.5713 87.7766 30.6201C86.3614 32.6689 89.1273 34.6754 89.1273 34.6754L98.2765 29.3021Z'
        fill='#263238'
      />
      <path
        d='M84.718 54.8805L78.9971 54.6946L79.1003 59.4005C79.1003 59.4005 84.09 58.8936 84.3094 57.6051L84.718 54.8805Z'
        fill='#FF8B7B'
      />
      <path
        d='M75.9728 57.0053L75.3706 59.4132L79.1 59.4048L78.9968 54.6989L75.9728 57.0053Z'
        fill='#FF8B7B'
      />
      <path
        d='M107.678 35.326L107.558 36.5342C107.519 36.9228 107.467 37.303 107.416 37.6874C107.317 38.452 107.192 39.2166 107.059 39.977C106.801 41.502 106.465 43.0185 106.078 44.5435C105.685 46.0977 105.208 47.6305 104.65 49.1354C104.353 49.9084 104.043 50.6815 103.674 51.4672C103.301 52.2914 102.869 53.0889 102.383 53.854C102.267 54.0525 102.121 54.2764 101.979 54.4623C101.837 54.6482 101.699 54.8847 101.549 55.079C101.398 55.2734 101.239 55.5015 101.041 55.7L100.761 56.0126C100.661 56.1279 100.555 56.2379 100.443 56.3421C99.5809 57.1713 98.5704 57.8373 97.4622 58.3064C95.762 59.0226 93.9577 59.4717 92.1154 59.6371C91.2767 59.7343 90.4465 59.7723 89.6335 59.7934C88.8205 59.8145 88.0075 59.7934 87.2074 59.7512C86.4074 59.7089 85.6159 59.6413 84.8287 59.5484C84.0416 59.4555 83.2759 59.3329 82.4414 59.1682L82.5791 54.7538C85.3256 54.2821 88.0405 53.6473 90.7089 52.8528C91.3023 52.6633 91.8853 52.4433 92.4553 52.1938C92.9406 51.9927 93.4045 51.7451 93.8403 51.4546C94.0938 51.3046 94.3087 51.0993 94.4683 50.8547L94.5931 50.6604C94.6509 50.5774 94.704 50.4914 94.7522 50.4027C94.8136 50.3057 94.8696 50.2056 94.92 50.1028C94.9759 49.9929 95.0361 49.8915 95.0921 49.769C95.5974 48.6856 96.0131 47.5639 96.3352 46.4149C96.6879 45.173 97.0191 43.8803 97.2858 42.5412C97.5525 41.2021 97.8106 39.8503 98.0472 38.4858L98.3741 36.4328L98.6709 34.4347L107.678 35.326Z'
        fill='#407BFF'
      />
      <path
        opacity='0.2'
        d='M107.678 35.326L107.558 36.5342C107.519 36.9228 107.467 37.303 107.416 37.6874C107.317 38.452 107.192 39.2166 107.059 39.977C106.801 41.502 106.465 43.0185 106.078 44.5435C105.685 46.0977 105.208 47.6305 104.65 49.1354C104.353 49.9084 104.043 50.6815 103.674 51.4672C103.301 52.2914 102.869 53.0889 102.383 53.854C102.267 54.0525 102.121 54.2764 101.979 54.4623C101.837 54.6482 101.699 54.8847 101.549 55.079C101.398 55.2734 101.239 55.5015 101.041 55.7L100.761 56.0126C100.661 56.1279 100.555 56.2379 100.443 56.3421C99.5809 57.1713 98.5704 57.8373 97.4622 58.3064C95.762 59.0226 93.9577 59.4717 92.1154 59.6371C91.2767 59.7343 90.4465 59.7723 89.6335 59.7934C88.8205 59.8145 88.0075 59.7934 87.2074 59.7512C86.4074 59.7089 85.6159 59.6413 84.8287 59.5484C84.0416 59.4555 83.2759 59.3329 82.4414 59.1682L82.5791 54.7538C85.3256 54.2821 88.0405 53.6473 90.7089 52.8528C91.3023 52.6633 91.8853 52.4433 92.4553 52.1938C92.9406 51.9927 93.4045 51.7451 93.8403 51.4546C94.0938 51.3046 94.3087 51.0993 94.4683 50.8547L94.5931 50.6604C94.6509 50.5774 94.704 50.4914 94.7522 50.4027C94.8136 50.3057 94.8696 50.2056 94.92 50.1028C94.9759 49.9929 95.0361 49.8915 95.0921 49.769C95.5974 48.6856 96.0131 47.5639 96.3352 46.4149C96.6879 45.173 97.0191 43.8803 97.2858 42.5412C97.5525 41.2021 97.8106 39.8503 98.0472 38.4858L98.3741 36.4328L98.6709 34.4347L107.678 35.326Z'
        fill='black'
      />
      <path
        d='M82.2794 40.9401C84.4122 49.971 85.6127 59.1901 85.8625 68.4574H111.048C111.185 65.4033 110.661 48.1806 108.127 35.7399C107.673 33.4635 106.303 31.4632 104.328 30.1911C102.352 28.9191 99.9383 28.4828 97.6313 28.981L97.5109 29.0106C94.3665 29.7118 89.8543 30.8439 87.1873 31.8367L87.0798 31.8789C83.3904 33.2877 81.3365 37.1645 82.2794 40.9401Z'
        fill='#407BFF'
      />
      <path
        opacity='0.2'
        d='M83.9175 48.8396C84.1153 50.0267 84.3175 51.2855 84.5025 52.6035C86.5629 50.4913 87.2167 44.0197 87.2167 44.0197L83.9175 48.8396Z'
        fill='black'
      />
      <path
        d='M62.9948 55.1889L57.2781 54.665L57.0889 59.3667C59.0145 59.8888 61.0761 59.3175 62.4399 57.884L62.9948 55.1889Z'
        fill='#FF8B7B'
      />
      <path
        d='M54.5595 56.0506L52.7271 59.2822L57.106 59.3667L57.2952 54.665L54.5595 56.0506Z'
        fill='#FF8B7B'
      />
      <path
        d='M91.7288 38.773C91.3331 39.5123 90.9804 40.1671 90.5846 40.843C90.1889 41.5189 89.8104 42.1779 89.4017 42.8326C88.5931 44.1506 87.7543 45.4433 86.8682 46.7233C85.0891 49.3444 83.1181 51.8349 80.9708 54.175C79.8209 55.4348 78.571 56.6029 77.2328 57.6685C77.0651 57.8079 76.8672 57.9431 76.6823 58.0909C76.4973 58.2388 76.3338 58.3571 76.0585 58.5134C75.7832 58.6697 75.551 58.826 75.3015 58.9612C75.052 59.0963 74.7939 59.2188 74.5401 59.3287C73.5913 59.7332 72.5983 60.0295 71.5807 60.2116C69.8008 60.5062 67.9868 60.5461 66.1952 60.3298C65.3562 60.2354 64.5232 60.0944 63.7004 59.9074C63.2903 59.8145 62.886 59.7089 62.4874 59.5906C62.0572 59.4723 61.7088 59.3414 61.2485 59.1682L61.9583 54.8086C64.6596 54.4496 67.5803 53.9891 69.5934 53.0936C70.0403 52.9132 70.4611 52.676 70.8451 52.3881C70.9998 52.2836 71.1438 52.1648 71.2753 52.0332C71.3054 51.9952 71.4387 51.8812 71.5377 51.7882C71.6366 51.6953 71.7528 51.6066 71.8603 51.4968C72.781 50.6007 73.643 49.6484 74.4412 48.6453C76.1729 46.4513 77.7909 44.1729 79.2889 41.8188C80.0632 40.6233 80.816 39.4067 81.5687 38.1859L82.6785 36.3525L83.7496 34.5487L91.7288 38.773Z'
        fill='#407BFF'
      />
      <path d='M84.8167 126.948H80.1108L77.7407 116.239H82.4508L84.8167 126.948Z' fill='#FF8B7B' />
      <path
        d='M79.8479 125.959H85.1388C85.3275 125.966 85.4898 126.093 85.5388 126.272L86.4679 130.386C86.5128 130.589 86.4606 130.8 86.3264 130.96C86.1921 131.12 85.9906 131.211 85.7797 131.206C83.9343 131.176 83.0353 131.071 80.7082 131.071C79.2758 131.071 77.4391 131.214 75.4647 131.214C73.4903 131.214 73.228 129.296 74.0366 129.123C77.6671 128.342 77.908 127.269 79.0823 126.242C79.2928 126.058 79.5658 125.957 79.8479 125.959Z'
        fill='#263238'
      />
      <g opacity='0.2'>
        <path d='M82.4551 116.243H77.7407L79.057 122.174L83.6768 121.764L82.4551 116.243Z' fill='black' />
      </g>
      <path
        d='M90.7056 14.707C92.4262 18.982 93.622 21.4026 92.4864 24.5075C90.7658 29.1754 84.662 29.6485 81.694 25.9564C79.0271 22.6319 76.6957 16.1982 80.0637 12.6624C81.5634 11.0686 83.797 10.3518 85.9656 10.7685C88.1342 11.1851 89.9281 12.6757 90.7056 14.707Z'
        fill='#FF8B7B'
      />
      <path
        d='M82.4371 21.111C81.7316 22.0404 81.1897 22.7459 81.1897 22.7459C81.1897 22.7459 79.7401 19.2101 80.295 17.5879C79.5895 16.215 78.1657 18.2385 77.628 15.5645C77.0904 12.8905 79.4175 10.0179 80.295 9.42229C80.3854 9.73388 80.426 10.0574 80.4154 10.3812C82.7865 8.49149 85.8001 7.55683 88.8463 7.76635C88.5917 8.13821 88.4296 8.56363 88.3731 9.0083C88.3731 9.0083 93.479 9.85317 94.6404 12.6919C94.2296 12.4994 93.7962 12.3575 93.35 12.2695C94.286 13.5874 94.6568 15.2139 94.3823 16.798C94.0119 19.1081 93.8192 21.4423 93.8059 23.7808C93.8532 24.9805 90.5024 27.2743 88.4592 24.8242C86.416 22.3741 82.4371 21.111 82.4371 21.111Z'
        fill='#263238'
      />
      <path
        d='M84.5675 20.1902C84.8339 21.186 84.7583 22.2403 84.3524 23.1895C83.8061 24.4568 82.6834 24.1527 82.1285 23.0459C81.6253 22.0532 81.3027 20.2114 82.1931 19.3285C83.0835 18.4456 84.232 18.9947 84.5675 20.1902Z'
        fill='#FF8B7B'
      />
      <path
        d='M93.411 68.4406C93.411 68.4406 71.5422 76.2302 70.9013 86.5334C69.7141 105.513 77.6159 120.539 77.6159 120.539L84.8596 119.779C84.8596 119.779 83.5692 113.671 82.61 96.4775C81.4012 74.87 118.742 96.9844 111.051 68.4406H93.411Z'
        fill='#407BFF'
      />
      <path
        opacity='0.5'
        d='M93.411 68.4406C93.411 68.4406 71.5422 76.2302 70.9013 86.5334C69.7141 105.513 77.6159 120.539 77.6159 120.539L84.8596 119.779C84.8596 119.779 83.5692 113.671 82.61 96.4775C81.4012 74.87 118.742 96.9844 111.051 68.4406H93.411Z'
        fill='white'
      />
      <path
        d='M75.6106 117.92C75.5762 117.92 76.7634 121.08 76.7634 121.08L85.7965 120.21L85.3449 117.337L75.6106 117.92Z'
        fill='#407BFF'
      />
      <path d='M64.4753 127.476H59.7651L58.3887 116.763H63.0988L64.4753 127.476Z' fill='#FF8B7B' />
      <path
        d='M59.7304 125.955H64.8921C65.0841 125.953 65.2513 126.083 65.2922 126.267L66.2299 130.378C66.2854 130.582 66.2399 130.8 66.1071 130.966C65.9743 131.132 65.7696 131.227 65.5546 131.223C63.7006 131.193 61.0165 131.092 58.6722 131.096C55.945 131.096 55.4246 131.244 52.22 131.248C50.2843 131.248 49.7466 129.334 50.5553 129.136C54.2374 128.342 55.416 128.253 58.5948 126.322C58.9303 126.097 59.3241 125.969 59.7304 125.955Z'
        fill='#263238'
      />
      <path
        opacity='0.2'
        d='M58.3926 116.767L59.141 122.601L63.8124 122.288L63.1027 116.767H58.3926Z'
        fill='black'
      />
      <path
        d='M85.8614 68.4406C85.8614 68.4406 50.03 71.5623 50.4172 89.237C50.8172 107.621 57.8114 120.02 57.8114 120.02H64.8056C64.8056 120.02 63.4808 110.481 63.7174 92.3841C63.7862 86.9643 74.9442 85.1732 85.8356 84.5395C95.2472 83.9903 104.057 78.7226 107.713 70.1768L108.466 68.4406H85.8614Z'
        fill='#407BFF'
      />
      <path
        opacity='0.5'
        d='M85.8614 68.4406C85.8614 68.4406 50.03 71.5623 50.4172 89.237C50.8172 107.621 57.8114 120.02 57.8114 120.02H64.8056C64.8056 120.02 63.4808 110.481 63.7174 92.3841C63.7862 86.9643 74.9442 85.1732 85.8356 84.5395C95.2472 83.9903 104.057 78.7226 107.713 70.1768L108.466 68.4406H85.8614Z'
        fill='white'
      />
      <path
        d='M56.1739 118.174C56.1438 118.174 57.374 121.35 57.374 121.35L65.8221 120.755L65.3274 117.882L56.1739 118.174Z'
        fill='#407BFF'
      />
      <path
        d='M95.2682 48.5777L90.7215 65.7835C89.559 70.1915 88.9721 74.7268 88.9751 79.2802V87.2769C88.9751 89.2961 90.4892 90.9352 92.3604 90.9352H115.666C117.537 90.9352 119.051 89.2961 119.051 87.2769V79.2802C119.05 74.7266 119.638 70.1913 120.802 65.7835L124.815 50.5758C125.434 48.2398 123.809 45.9291 121.559 45.9291H98.5201C96.9469 45.9777 95.6078 47.0684 95.2682 48.5777Z'
        fill='#263238'
      />
      <path
        d='M66.2819 82.6048L67.0433 86.8714C67.4476 89.1145 69.4564 90.9352 71.534 90.9352H97.4419C99.5195 90.9352 100.883 89.1145 100.479 86.8714L99.7173 82.6048C99.2571 80.0491 96.973 77.9791 94.6072 77.9791H69.7532C67.3702 77.9791 65.826 80.0491 66.2819 82.6048Z'
        fill='#263238'
      />
      <path d='M99.937 95.2187H86.3659L85.041 90.9352H101.262L99.937 95.2187Z' fill='#407BFF' />
      <rect x='90.7275' y='95.2186' width='4.84777' height='31.8557' fill='#407BFF' />
      <path opacity='0.7' d='M95.5753 127.074H90.7275V95.9832L95.5753 96.469V127.074Z' fill='white' />
      <path opacity='0.7' d='M94.392 127.074H93.2349V96.2324L94.392 96.3507V127.074Z' fill='white' />
      <path
        d='M104.297 132H81.9986C81.7319 131.998 81.4968 131.828 81.4148 131.579C81.3328 131.329 81.4224 131.057 81.6372 130.902L85.1731 128.367C86.8729 127.144 88.9247 126.484 91.0317 126.483H95.2686C97.3742 126.485 99.4245 127.145 101.123 128.367L104.663 130.902C104.878 131.057 104.968 131.331 104.885 131.581C104.802 131.83 104.565 131.999 104.297 132Z'
        fill='#407BFF'
      />
    </svg>
  );
};

export default ServiceImageIcon2;


import React from 'react';

const ServiceImageIcon3 = () => {
  return (
    <svg xmlns='http://www.w3.org/2000/svg' width='116' height='132' viewBox='0 0 116 132' fill='none'>
      <rect x='0.499512' y='14.8331' width='89.4414' height='59.826' rx='4.89' fill='#263238' />
      <rect x='43.9219' y='12.1237' width='2.60214' height='118.117' rx='1.17' fill='#263238' />
      <path
        d='M42.4334 127.849H48.0027C49.2072 127.849 50.1836 128.747 50.1836 129.853V130.098C50.1836 130.136 50.1673 130.172 50.1384 130.199C50.1094 130.225 50.0701 130.24 50.0292 130.24H40.4069C40.3216 130.24 40.2524 130.177 40.2524 130.098V129.853C40.2524 128.747 41.2289 127.849 42.4334 127.849V127.849Z'
        fill='#263238'
      />
      <rect x='70.022' y='13.3279' width='7.48816' height='0.430062' fill='#FF7171' />
      <rect x='63.2651' y='13.3279' width='2.28857' height='0.430062' fill='#FF7171' />
      <rect x='0.83252' y='14.8331' width='89.4414' height='59.826' rx='4.89' fill='#FF7171' />
      <path
        opacity='0.7'
        d='M83.7121 16.9834C86.0428 16.9834 87.9321 18.8728 87.9321 21.2034V68.2888C87.9321 70.6194 86.0428 72.5088 83.7121 72.5088H7.39081C5.06017 72.5088 3.1708 70.6194 3.1708 68.2888V21.2034C3.1708 18.8728 5.06016 16.9834 7.3908 16.9834L83.7121 16.9834Z'
        fill='white'
      />
      <path
        opacity='0.2'
        d='M27.8319 44.03C22.3747 43.5606 16.8949 43.3481 11.4141 43.3935C11.4655 36.5555 12.1301 29.1628 12.7151 21.8904L28.8053 22.8408C28.1829 31.326 27.5651 39.8369 27.8319 44.03Z'
        fill='black'
      />
      <path
        d='M28.1395 43.7247C22.6824 43.2531 17.2026 43.0406 11.7217 43.0882C11.7732 36.2459 12.1148 29.1671 12.6998 21.8904L29.1176 22.5269C28.5045 31.012 27.8868 39.5273 28.1395 43.7247Z'
        fill='white'
      />
      <path
        opacity='0.2'
        d='M49.6882 58.5962L33.2751 59.2542L32.5918 37.7468L48.6867 37.3985L49.6882 58.5962Z'
        fill='black'
      />
      <path
        d='M32.5879 37.7539L49.0042 37.0979L50.0072 58.2929L33.5909 58.9489L32.5879 37.7539Z'
        fill='white'
      />
      <path
        opacity='0.2'
        d='M86.2822 58.0845L69.9907 56.1105L73.3885 34.8224L89.3008 37.0501L86.2822 58.0845Z'
        fill='black'
      />
      <path d='M73.3809 34.8274L89.6715 36.8035L86.65 57.836L70.3595 55.8599L73.3809 34.8274Z' fill='white' />
      <path
        opacity='0.2'
        d='M30.2735 73.6356C27.2969 74.4957 19.6309 74.629 13.8931 74.3667C13.0741 67.7437 13.1583 60.3294 13.3643 52.8636L29.4591 52.6184C29.1034 57.7448 29.3796 66.8664 30.2735 73.6356Z'
        fill='black'
      />
      <path
        d='M30.6013 73.3259C27.6201 74.186 19.954 74.315 14.2209 74.0527C13.408 67.0116 13.1234 59.9275 13.3691 52.8506L29.7869 52.2915C29.4266 57.4351 29.7027 66.5567 30.6013 73.3259Z'
        fill='white'
      />
      <path
        opacity='0.2'
        d='M70.641 41.8798L54.2138 42.2109C53.6616 35.1493 53.8207 27.7651 54.0313 20.7078H70.1355C69.953 28.2124 70.0747 35.3729 70.641 41.8798Z'
        fill='black'
      />
      <path
        d='M70.9628 41.5614L54.5356 41.8925C53.9865 34.8309 53.8211 27.7607 54.0395 20.6819L70.4667 20.3507C70.2888 27.9026 70.4199 35.0589 70.9628 41.5614Z'
        fill='white'
      />
      <path
        d='M76.6125 125.443L72.9688 124.547L74.2664 116.582L77.9102 117.478L76.6125 125.443Z'
        fill='#FF8B7B'
      />
      <path d='M110.318 128.469H106.543L103.604 120.466H107.38L110.318 128.469Z' fill='#FF8B7B' />
      <path
        d='M106.039 128.069H110.642C110.796 128.07 110.929 128.168 110.962 128.306L111.71 131.38C111.744 131.531 111.701 131.689 111.593 131.808C111.485 131.927 111.324 131.995 111.155 131.991C109.674 131.97 108.597 131.888 106.73 131.888C105.583 131.888 102.123 132 100.543 132C98.9634 132 98.7518 130.566 99.4006 130.433C102.306 129.852 104.497 129.051 105.428 128.28C105.598 128.145 105.815 128.07 106.039 128.069V128.069Z'
        fill='#263238'
      />
      <path
        d='M73.1096 124.168L77.0872 125.146C77.2361 125.184 77.3373 125.31 77.3316 125.451L77.1812 128.594C77.1761 128.749 77.0936 128.892 76.9575 128.983C76.8215 129.074 76.6472 129.102 76.4853 129.059C75.0749 128.685 73.0014 128.095 71.196 127.652C69.0849 127.135 67.2325 126.79 64.7594 126.183C63.2643 125.817 63.2549 124.328 63.9178 124.358C66.9363 124.487 69.2824 124.999 72.1551 124.212C72.4626 124.116 72.7933 124.101 73.1096 124.168Z'
        fill='#263238'
      />
      <path
        d='M92.6212 25.4193C91.3753 26.853 90.0823 28.3943 88.8599 29.9055C87.6375 31.4167 86.4621 32.9796 85.3807 34.5468C84.84 35.326 84.3463 36.1182 83.8714 36.9061L82.5738 39.244L82.4657 39.4549C82.4657 39.4765 82.4374 39.4937 82.4327 39.4894C82.4264 39.4379 82.4264 39.3859 82.4327 39.3344C82.4323 39.2012 82.4165 39.0685 82.3857 38.9383C82.3692 38.8666 82.3472 38.7962 82.3199 38.7273C82.3199 38.6843 82.287 38.6412 82.2682 38.5982C82.2448 38.5375 82.2165 38.4785 82.1836 38.4216C82.0996 38.2771 81.9987 38.1414 81.8827 38.0169C81.719 37.8469 81.527 37.7016 81.3138 37.5864C81.0977 37.4719 80.8626 37.3905 80.6179 37.3453C80.435 37.3143 80.2489 37.3027 80.0631 37.3108C79.852 37.3199 79.6439 37.3606 79.4472 37.4314C79.3092 37.475 79.1792 37.5374 79.0617 37.6165C78.9441 37.6983 78.9488 37.7113 78.9441 37.7199C78.9394 37.7285 78.9723 37.7199 79.0005 37.7199C79.1675 37.6157 79.3248 37.4991 79.4707 37.3711C79.6494 37.229 79.828 37.074 80.0067 36.9104C80.7354 36.2689 81.4877 35.5628 82.2729 34.9041L84.6472 36.3163C84.2665 37.2848 83.8076 38.2259 83.2743 39.132C82.984 39.6486 82.6408 40.1387 82.2494 40.5959C82.177 40.6783 82.1001 40.7574 82.019 40.8327C81.889 40.9574 81.7456 41.0699 81.5911 41.1685C81.416 41.2798 81.2265 41.3709 81.0269 41.4397C80.7975 41.5178 80.5566 41.5642 80.3123 41.5775C80.1107 41.5863 79.9087 41.5733 79.7105 41.5388C79.4487 41.4919 79.1974 41.4045 78.9676 41.2804C78.7402 41.1589 78.5355 41.0048 78.3611 40.8241C78.2349 40.6918 78.1246 40.5474 78.032 40.3935C77.9991 40.3289 77.9615 40.2601 77.9333 40.1955L77.8721 40.0448C77.8345 39.9328 77.8157 39.864 77.7969 39.7865C77.7545 39.5967 77.7356 39.4032 77.7405 39.2095C77.7433 39.0365 77.759 38.8639 77.7875 38.6929C77.7875 38.568 77.8251 38.469 77.8439 38.3743C77.8862 38.1848 77.9239 38.0299 77.9615 37.8792C78.1166 37.2893 78.2812 36.7942 78.4693 36.2948C78.6573 35.7953 78.9018 35.2959 79.1416 34.818C79.6118 33.8536 80.1289 32.9236 80.6743 32.0281C81.7566 30.2504 82.9399 28.5258 84.2194 26.8616C84.8494 26.0392 85.4982 25.2255 86.1659 24.429C86.8335 23.6325 87.5105 22.8618 88.2581 22.061L92.6212 25.4193Z'
        fill='#FF8B7B'
      />
      <path
        d='M94.6703 22.8833C95.479 26.0995 87.7636 34.3358 87.7636 34.3358L80.8428 29.6945C82.3792 27.0261 84.2234 24.5161 86.3437 22.2074C89.5126 18.9267 93.7817 19.3486 94.6703 22.8833Z'
        fill='#FF7171'
      />
      <path
        opacity='0.2'
        d='M94.6703 22.8833C95.479 26.0995 87.7636 34.3358 87.7636 34.3358L80.8428 29.6945C82.3792 27.0261 84.2234 24.5161 86.3437 22.2074C89.5126 18.9267 93.7817 19.3486 94.6703 22.8833Z'
        fill='black'
      />
      <path
        opacity='0.2'
        d='M74.2666 116.582L73.5942 120.69L77.2427 121.585L77.9104 117.478L74.2666 116.582Z'
        fill='black'
      />
      <path opacity='0.2' d='M107.38 120.47H103.604L105.123 124.595H108.899L107.38 120.47Z' fill='black' />
      <path
        d='M111.555 22.4011C106.642 35.2829 106.553 49.2325 106.003 52.031C103.069 51.6737 92.0201 50.3088 85.9973 49.564C84.6432 29.7849 90.5767 19.9857 90.5767 19.9857C90.5767 19.9857 91.8838 19.8264 93.6516 19.7576C94.2064 19.7576 94.8035 19.7231 95.4241 19.7274C95.7673 19.7274 96.1153 19.7274 96.4679 19.749C99.323 19.9555 102.163 20.312 104.973 20.8167C105.504 20.9071 106.045 21.0104 106.567 21.1181C107.089 21.2257 107.507 21.329 107.978 21.4367C109.995 21.906 111.555 22.4011 111.555 22.4011Z'
        fill='#FF7171'
      />
      <path
        opacity='0.2'
        d='M111.555 22.4011C106.642 35.2829 106.553 49.2325 106.003 52.031C103.069 51.6737 92.0201 50.3088 85.9973 49.564C84.6432 29.7849 90.5767 19.9857 90.5767 19.9857C90.5767 19.9857 91.8838 19.8264 93.6516 19.7576C94.2064 19.7576 94.8035 19.7231 95.4241 19.7274C95.7673 19.7274 96.1153 19.7274 96.4679 19.749C99.323 19.9555 102.163 20.312 104.973 20.8167C105.504 20.9071 106.045 21.0104 106.567 21.1181C107.089 21.2257 107.507 21.329 107.978 21.4367C109.995 21.906 111.555 22.4011 111.555 22.4011Z'
        fill='black'
      />
      <path
        opacity='0.2'
        d='M106.956 28.334C106.162 30.2757 106.782 35.6532 107.652 37.4873C107.962 35.5671 108.343 33.5522 108.823 31.4856L106.956 28.334Z'
        fill='black'
      />
      <path
        d='M82.311 34.6543L85.3013 32.071L87.2478 36.1095C86.142 37.1467 84.4297 37.408 83.0163 36.7553L82.311 34.6543Z'
        fill='#FF8B7B'
      />
      <path
        d='M87.496 30.7278L88.9911 34.3013L87.2468 36.088L85.3003 32.0495L87.496 30.7278Z'
        fill='#FF8B7B'
      />
      <path
        d='M105.42 11.926C104.512 14.3672 103.304 18.8922 104.973 20.7995C103.285 21.9706 101.108 23.2923 97.8454 22.9953C94.5824 22.6982 95.4522 20.722 96.4678 19.749C99.6179 19.4605 99.8436 17.3767 99.5991 15.3618L105.42 11.926Z'
        fill='#FF8B7B'
      />
      <path
        d='M95.8901 19.0946C95.8901 18.4143 98.9462 17.8417 99.0638 18.4875C99.1813 19.1333 98.1234 19.3486 98.4573 20.2097C98.7911 21.0708 101.871 21.1569 103.102 19.9384C103.921 19.1247 104.179 18.3067 105.218 18.8449C106.257 19.383 107.508 20.1365 106.821 21.3205C106.135 22.5045 102.261 25.303 98.7346 24.584C95.2084 23.865 94.2258 22.1299 94.9122 21.3764C95.5094 20.7383 95.854 19.9343 95.8901 19.0946Z'
        fill='#FF7171'
      />
      <path
        opacity='0.2'
        d='M103.044 13.3296L99.5981 15.3618C99.665 15.8298 99.6854 16.3025 99.6593 16.7739C101.061 16.721 102.34 16.0293 103.068 14.9312C103.463 14.238 103.331 13.4501 103.044 13.3296Z'
        fill='black'
      />
      <path
        d='M105.987 7.62065C105.654 11.0392 105.644 13.0541 103.702 14.7633C100.783 17.3466 96.2175 15.6244 95.4323 12.2059C94.727 9.11032 95.3947 4.02562 99.0902 2.77704C100.745 2.19961 102.609 2.44905 104.015 3.43615C105.421 4.42324 106.167 6.00693 105.987 7.62065Z'
        fill='#FF8B7B'
      />
      <path
        d='M106.275 4.88659C103.529 4.69715 103.299 9.06285 105.569 10.94C108.315 9.95407 112.152 5.26977 106.275 4.88659Z'
        fill='#263238'
      />
      <path
        d='M103.557 5.56691C101.949 3.24198 98.8552 6.92743 97.3272 4.38723C96.4104 2.8588 94.8447 4.51639 93.8903 3.59933C92.9358 2.68228 94.4122 0.219577 95.4089 0C94.8494 0.5554 94.7413 2.5402 96.4198 1.55856C98.0983 0.576927 99.3019 -0.439153 101.357 1.20982C103.411 2.8588 105.56 -0.456375 107.445 2.07091C109.1 4.26667 105.461 8.33099 103.557 5.56691Z'
        fill='#263238'
      />
      <path
        d='M106.666 5.2053C106.225 5.20381 105.787 5.13842 105.369 5.01155C105.276 4.9854 105.225 4.89576 105.253 4.81135C105.282 4.72694 105.38 4.67971 105.472 4.70587C106.676 5.05461 107.846 4.86947 108.382 4.24949C108.801 3.76729 108.768 3.10425 108.303 2.38525C108.253 2.30916 108.281 2.21085 108.364 2.16567C108.447 2.12049 108.554 2.14555 108.603 2.22164C109.144 3.04828 109.163 3.86201 108.66 4.44754C108.157 4.96582 107.422 5.24495 106.666 5.2053Z'
        fill='#263238'
      />
      <path
        d='M107.558 11.4396C107.032 12.1548 106.219 12.6514 105.296 12.8216C104.069 13.0326 103.561 12.0079 103.989 10.9961C104.375 10.0877 105.48 8.88217 106.669 9.12327C107.859 9.36438 108.193 10.5527 107.558 11.4396Z'
        fill='#FF8B7B'
      />
      <path
        d='M72.2495 119.463L78.4181 120.978C78.4181 120.978 84.2904 101.061 86.1476 90.4096C86.7118 87.1762 87.9718 82.6986 89.4952 77.9239C91.4134 71.8963 93.7502 65.4037 95.6449 60.319C97.6478 54.963 99.1477 51.1786 99.1477 51.1786L85.983 49.5554C85.983 49.5554 75.9638 77.6828 74.8354 88.1794C73.6741 99.1022 72.2495 119.463 72.2495 119.463Z'
        fill='#263238'
      />
      <path
        opacity='0.2'
        d='M89.4943 77.9325C91.4126 71.9049 93.7493 65.4123 95.644 60.3276L94.478 57.542C90.9377 60.9174 89.278 71.9006 89.4943 77.9325Z'
        fill='black'
      />
      <path
        d='M93.0924 50.4424C93.0924 50.4424 92.4435 80.0508 93.3274 90.1427C94.3007 101.199 103.347 123.794 103.347 123.794H110.258C110.258 123.794 105.646 103.128 104.235 92.3643C102.623 80.1369 106.003 52.0225 106.003 52.0225L93.0924 50.4424Z'
        fill='#263238'
      />
      <path d='M102.519 123.932H110.658V121.706L101.56 121.559L102.519 123.932Z' fill='#FF7171' />
      <path
        d='M71.436 119.402L78.7894 121.211L79.4288 119.036L71.6523 117.009L71.436 119.402Z'
        fill='#FF7171'
      />
      <path
        d='M100.291 8.43432C100.291 8.70986 100.117 8.93374 99.9144 8.92944C99.7123 8.92513 99.5618 8.69264 99.5712 8.41279C99.5806 8.13294 99.7499 7.91336 99.9474 7.91766C100.145 7.92197 100.3 8.15446 100.291 8.43432Z'
        fill='#263238'
      />
      <path
        d='M96.8526 8.33094C96.8526 8.61079 96.6739 8.83037 96.4764 8.82606C96.279 8.82176 96.1238 8.58927 96.1285 8.31372C96.1332 8.03817 96.3072 7.80998 96.5047 7.8186C96.7021 7.82721 96.8573 8.064 96.8526 8.33094Z'
        fill='#263238'
      />
      <path
        d='M97.9387 8.51184C97.551 9.35396 97.0367 10.1423 96.4106 10.854C96.8225 11.1425 97.3532 11.2482 97.8588 11.1425L97.9387 8.51184Z'
        fill='#FF5652'
      />
      <path
        d='M99.1193 11.9217C99.8059 11.8683 100.438 11.5565 100.864 11.0606C100.896 11.0291 100.896 10.9801 100.864 10.9487C100.844 10.9356 100.819 10.9305 100.795 10.9346C100.771 10.9387 100.75 10.9515 100.737 10.9702C100.243 11.5233 99.4882 11.8233 98.7102 11.7753C98.6857 11.7741 98.6618 11.7822 98.644 11.7977C98.6262 11.8132 98.6162 11.8346 98.6162 11.8571C98.6161 11.9007 98.6533 11.9366 98.7008 11.9389C98.8406 11.9429 98.9805 11.9371 99.1193 11.9217Z'
        fill='#263238'
      />
      <path
        d='M101.38 7.4441C101.411 7.4413 101.44 7.43087 101.465 7.41396C101.504 7.38885 101.53 7.35069 101.538 7.30789C101.546 7.26509 101.535 7.22116 101.507 7.18577C101.184 6.74923 100.649 6.48297 100.073 6.47107C100.026 6.47329 99.9814 6.4927 99.9497 6.52501C99.9179 6.55733 99.9015 6.59988 99.9041 6.64329C99.9053 6.68632 99.9254 6.72707 99.96 6.75627C99.9945 6.78547 100.04 6.80062 100.087 6.79828C100.543 6.8122 100.964 7.02714 101.216 7.37521C101.254 7.42308 101.316 7.44924 101.38 7.4441Z'
        fill='#263238'
      />
      <path
        d='M95.419 7.22027C95.4777 7.21528 95.5294 7.18266 95.5553 7.13416C95.7531 6.75642 96.1387 6.48999 96.5897 6.41946C96.6775 6.40069 96.7363 6.32491 96.7267 6.24279C96.7172 6.16066 96.6423 6.09794 96.5521 6.09656C95.9825 6.17746 95.4924 6.50884 95.2403 6.98347C95.2174 7.02154 95.2125 7.06651 95.2267 7.10797C95.2409 7.14943 95.273 7.18378 95.3155 7.20305C95.3469 7.21931 95.3834 7.22538 95.419 7.22027Z'
        fill='#263238'
      />
      <path
        fillRule='evenodd'
        clipRule='evenodd'
        d='M105.781 128.591C105.458 128.67 105.127 128.714 104.794 128.723C104.536 128.739 104.28 128.672 104.065 128.533C103.932 128.419 103.863 128.25 103.882 128.079C103.883 127.976 103.943 127.882 104.037 127.834C104.439 127.636 105.6 128.311 105.795 128.424C105.801 128.428 105.806 128.43 105.81 128.433C105.838 128.453 105.852 128.486 105.847 128.519C105.843 128.554 105.817 128.583 105.781 128.591ZM105.5 128.473C105.508 128.472 105.516 128.471 105.523 128.469V128.487C105.516 128.483 105.508 128.478 105.5 128.473ZM104.183 128.401C104.388 128.567 104.868 128.591 105.5 128.473C105.009 128.183 104.349 127.881 104.118 127.988C104.08 128.01 104.058 128.051 104.061 128.093C104.043 128.209 104.089 128.326 104.183 128.401Z'
        fill='#FF7171'
      />
      <path
        fillRule='evenodd'
        clipRule='evenodd'
        d='M105.815 128.551C105.798 128.556 105.78 128.556 105.763 128.551L105.721 128.556C105.331 128.362 104.578 127.604 104.658 127.217C104.685 127.094 104.803 127.005 104.94 127.006C105.078 126.987 105.217 127.025 105.321 127.109C105.758 127.436 105.852 128.435 105.852 128.478C105.857 128.507 105.842 128.536 105.815 128.551ZM105.204 127.234C105.148 127.186 105.074 127.16 104.997 127.161H104.96C104.828 127.174 104.828 127.225 104.828 127.247C104.781 127.454 105.261 128.043 105.651 128.315C105.626 127.921 105.47 127.544 105.204 127.234Z'
        fill='#FF7171'
      />
      <path
        fillRule='evenodd'
        clipRule='evenodd'
        d='M72.6922 124.491C72.679 124.52 72.6503 124.539 72.617 124.543L72.6029 124.547C71.9823 124.508 70.9009 124.392 70.5953 123.962C70.5032 123.834 70.4856 123.673 70.5483 123.531C70.5777 123.444 70.6542 123.377 70.7504 123.355C71.2582 123.238 72.5277 124.28 72.6687 124.401C72.6963 124.424 72.7057 124.46 72.6922 124.491ZM72.3494 124.371C71.8416 123.962 71.1316 123.51 70.8307 123.51L70.7931 123.527C70.7548 123.536 70.7256 123.564 70.7179 123.6C70.6746 123.692 70.6852 123.797 70.7461 123.88C70.9154 124.117 71.5078 124.293 72.3494 124.371Z'
        fill='#FF7171'
      />
      <path
        fillRule='evenodd'
        clipRule='evenodd'
        d='M72.64 124.543H72.6165C72.5936 124.545 72.5706 124.54 72.5506 124.53C72.151 124.237 71.5022 123.307 71.6808 122.946C71.7232 122.86 71.8219 122.769 72.0664 122.804C72.2458 122.828 72.4059 122.92 72.5083 123.058C72.834 123.472 72.7259 124.263 72.7009 124.446C72.6982 124.466 72.6964 124.479 72.6964 124.483C72.6902 124.51 72.6689 124.533 72.64 124.543ZM72.0386 122.95H71.9445C71.8779 122.954 71.8555 122.981 71.848 122.99C71.8471 122.992 71.8463 122.993 71.8458 122.993C71.7377 123.217 72.1655 123.927 72.5416 124.285C72.6099 123.895 72.5476 123.496 72.363 123.139C72.2893 123.037 72.1713 122.968 72.0386 122.95Z'
        fill='#FF7171'
      />
      <path
        d='M112.538 25.0706C113.084 27.3137 113.545 29.5439 113.949 31.7999C114.353 34.056 114.715 36.3163 114.997 38.6068L115.096 39.4679L115.153 40.0018C115.196 40.4199 115.154 40.8417 115.03 41.246C114.863 41.8081 114.525 42.3155 114.057 42.7099C113.665 43.0321 113.199 43.269 112.694 43.403C112.105 43.5548 111.491 43.6002 110.883 43.5365C110.095 43.4571 109.319 43.2953 108.57 43.0543C107.898 42.8433 107.277 42.6238 106.69 42.3611C105.51 41.8677 104.359 41.3172 103.243 40.7122C102.138 40.1137 101.081 39.498 100.027 38.7962L101.367 36.5101C103.648 37.2334 105.97 38.0084 108.199 38.5681C108.754 38.7101 109.304 38.8307 109.826 38.9168C110.262 39.008 110.709 39.0514 111.156 39.046C111.293 39.046 111.401 38.99 111.184 39.0244C110.974 39.0742 110.781 39.1736 110.625 39.3129C110.381 39.511 110.202 39.7674 110.108 40.0534C110.068 40.1841 110.044 40.3184 110.037 40.4538C110.037 40.527 110.037 40.4108 110.014 40.3505L109.971 40.1438L109.802 39.3258C109.341 37.1387 108.871 34.9443 108.392 32.7428C107.921 30.5427 107.423 28.3298 106.981 26.1383L112.538 25.0706Z'
        fill='#FF8B7B'
      />
      <path
        d='M112.816 23.2493C115.279 25.6646 115.5 33.0829 115.5 33.0829L108.368 36.1613C108.368 36.1613 106.055 31.4468 105.979 27.1801C105.904 22.3409 110.347 20.8167 112.816 23.2493Z'
        fill='#FF7171'
      />
      <path
        opacity='0.2'
        d='M112.816 23.2493C115.279 25.6646 115.5 33.0829 115.5 33.0829L108.368 36.1613C108.368 36.1613 106.055 31.4468 105.979 27.1801C105.904 22.3409 110.347 20.8167 112.816 23.2493Z'
        fill='black'
      />
      <path
        d='M87.2475 32.2648C87.2066 32.2645 87.1664 32.2557 87.1299 32.239C87.0182 32.1775 86.9806 32.0456 87.0453 31.9419L90.8066 25.9961C90.8775 25.9069 91.0107 25.8812 91.1149 25.9367C91.2191 25.9921 91.2606 26.1108 91.2109 26.2114L87.4731 32.1572C87.4266 32.2297 87.339 32.2715 87.2475 32.2648Z'
        fill='#263238'
      />
      <path
        d='M98.9165 48.802L84.7034 46.9076C84.1036 46.8241 83.6414 46.3797 83.5797 45.827L82.6394 27.8605C82.6253 27.6176 82.7365 27.3827 82.9398 27.2262C83.1431 27.0696 83.4149 27.0096 83.6737 27.0639L97.8868 28.954C98.4868 29.0418 98.9487 29.4859 99.0152 30.039L99.9321 48.0055C99.9447 48.2447 99.8358 48.4757 99.6373 48.6315C99.4387 48.7872 99.1726 48.8502 98.9165 48.802Z'
        fill='white'
      />
      <path
        d='M98.5962 48.9828L84.3831 47.0798C83.7823 46.9967 83.3185 46.5525 83.2547 45.9992L82.3379 28.0326C82.3222 27.7901 82.4323 27.555 82.6349 27.3983C82.8376 27.2415 83.1091 27.1814 83.3676 27.2361L97.5807 29.1262C98.1831 29.2098 98.6473 29.6561 98.7091 30.2112L99.6494 48.1734C99.6722 48.4229 99.5612 48.667 99.3518 48.8279C99.1423 48.9889 98.8606 49.0466 98.5962 48.9828Z'
        fill='#263238'
      />
      <path
        d='M101.639 36.5746L98.2965 34.8524L97.9062 39.2526C97.9062 39.2526 101.103 40.1395 101.804 38.6369L101.639 36.5746Z'
        fill='#FF8B7B'
      />
      <path
        d='M94.5723 35.6404L95.0424 38.9297L97.9057 39.257L98.296 34.8568L94.5723 35.6404Z'
        fill='#FF8B7B'
      />
    </svg>
  );
};

export default ServiceImageIcon3;


import React from 'react';

const UserIcon = () => {
  return (
    <svg width='79' height='79' viewBox='0 0 79 79' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <g id='Icon'>
        <rect id='Rectangle' opacity='0.1' width='79' height='79' rx='15' fill='#473BF0' />
        <g id='business-contact-86'>
          <path
            id='Shape'
            fillRule='evenodd'
            clipRule='evenodd'
            d='M30 31.6786C30 26.543 33.8233 21 40 21C46.1767 21 50 26.543 50 31.6786C50 39.2891 44.8092 44 40 44C35.1908 44 30 39.2891 30 31.6786ZM31.7025 32.5444C32.0642 38.6262 36.1725 42.3571 40 42.3571C43.8275 42.3571 47.935 38.627 48.2983 32.5468C45.8192 32.215 43.5025 31.1693 41.6433 29.5297C39.3467 31.5619 36.4175 32.6733 33.3092 32.6733C32.7783 32.6733 32.2433 32.6216 31.7025 32.5444Z'
            fill='#473BF0'
          />
          <path
            id='Path'
            opacity='0.5'
            d='M54.9775 48.1827L46.3125 43C44.2817 44.7478 41.8542 45.7089 39.5 45.7089C37.1458 45.7089 34.7183 44.7478 32.6875 43L24.0225 48.1827C22.775 48.9287 22 50.2935 22 51.7439V58.1693C22 58.6287 22.3733 59 22.8333 59H38.6667V50.6931C38.6667 50.2337 39.0392 49.8624 39.5 49.8624C39.9608 49.8624 40.3333 50.2337 40.3333 50.6931V59H56.1667C56.6267 59 57 58.6287 57 58.1693V51.7439C57 50.2935 56.225 48.9287 54.9775 48.1827Z'
            fill='#473BF0'
          />
        </g>
      </g>
    </svg>
  );
};

export default UserIcon;


import Notion from './notion.svg';
import Grammarly from './grammarly.svg';
import Intercom from './intercom.svg';
import Unsplash from './unsplash.svg';
import Descript from './descript.svg';
import Lightning from './lightning.svg';

export { Notion, Grammarly, Intercom, Unsplash, Descript, Lightning };


import hero from './hero.svg';
import features from './features.svg';

export { hero, features };


import Notion from './Notion.svg';
import Grammarly from './Grammarly.svg';
import Intercom from './Intercom.svg';
import Unsplash from './Unsplash.svg';
import Descript from './Descript.svg';
import howTo from './howTo.svg';
import Toggle from './Toggle.svg';
import Discount from './Discount.svg';
export { Notion, Grammarly, Intercom, Unsplash, Descript, howTo, Toggle, Discount };


import React from 'react';

const WhiteArrowIcon = () => {
  return (
    <svg width='18' height='12' viewBox='0 0 18 12' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        d='M0.5 7.01018H13.7351L10.5861 10.1122L11.9224 11.4399L17.5 5.94566L11.9224 0.439941L10.5861 1.76772L13.7235 4.84681H0.5V7.01018Z'
        fill='white'
      />
    </svg>
  );
};

export default WhiteArrowIcon;


import React from 'react';

const HeroEllipseRight = () => {
  return (
    <svg width='984' height='667' viewBox='0 0 984 667' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <g filter='url(#filter0_f_1_116)'>
        <circle cx='1317' cy='237' r='317' fill='#FFD6B0' />
      </g>
      <defs>
        <filter
          id='filter0_f_1_116'
          x='0'
          y='-1080'
          width='2634'
          height='2634'
          filterUnits='userSpaceOnUse'
          colorInterpolationFilters='sRGB'>
          <feFlood floodOpacity='0' result='BackgroundImageFix' />
          <feBlend mode='normal' in='SourceGraphic' in2='BackgroundImageFix' result='shape' />
          <feGaussianBlur stdDeviation='500' result='effect1_foregroundBlur_1_116' />
        </filter>
      </defs>
    </svg>
  );
};

export default HeroEllipseRight;


import React from 'react';

const BoldRightIcon = () => {
  return (
    <svg width='17' height='12' viewBox='0 0 17 12' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        d='M0 7.01018H13.2351L10.0861 10.1122L11.4224 11.4399L17 5.94566L11.4224 0.439941L10.0861 1.76772L13.2235 4.84681H0V7.01018Z'
        fill='white'
      />
    </svg>
  );
};

export default BoldRightIcon;


import React from 'react';

const OrangeArrowIcon = () => {
  return (
    <svg width='24' height='25' viewBox='0 0 24 25' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        d='M12 4.93994L10.59 6.34994L16.17 11.9399H4V13.9399H16.17L10.59 19.5299L12 20.9399L20 12.9399L12 4.93994Z'
        fill='#FF4F00'
        fillOpacity='0.8'
      />
    </svg>
  );
};

export default OrangeArrowIcon;


import React from 'react';

const StarICon = () => {
  return (
    <svg width='64' height='65' viewBox='0 0 64 65' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <g clipPath='url(#clip0_1_221)'>
        <g clipPath='url(#clip1_1_221)'>
          <path
            d='M50.6667 1.94965H13.3333C5.96954 1.94965 0 7.79736 0 15.0109V51.5823C0 58.7958 5.96954 64.6435 13.3333 64.6435H50.6667C58.0305 64.6435 64 58.7958 64 51.5823V15.0109C64 7.79736 58.0305 1.94965 50.6667 1.94965Z'
            fill='#FF4F00'
            fillOpacity='0.1'
          />
          <g clipPath='url(#clip2_1_221)'>
            <path
              d='M20.5172 47.1415V41.7619H26.0086'
              stroke='#FF4F00'
              strokeWidth='2'
              strokeLinecap='round'
              strokeLinejoin='round'
            />
            <path
              d='M45.5364 30.5839C46.119 33.6294 45.6531 36.7782 44.2116 39.5362C42.7702 42.2943 40.4349 44.5054 37.5721 45.8228C34.7093 47.1402 31.4811 47.4892 28.394 46.8151C25.3069 46.1409 22.5356 44.4818 20.5149 42.0981M17.4636 35.725C16.881 32.6795 17.3469 29.5307 18.7884 26.7727C20.2298 24.0146 22.5651 21.8035 25.4279 20.4861C28.2906 19.1687 31.5189 18.8197 34.606 19.4938C37.6931 20.168 40.4644 21.8271 42.4851 24.2108'
              stroke='#FF4F00'
              strokeWidth='2'
              strokeLinecap='round'
              strokeLinejoin='round'
            />
            <path
              d='M42.4829 19.1676V24.5472H36.9914M25.0564 33.8791C24.2792 33.7468 24.2792 32.6535 25.0564 32.5212C26.4326 32.2866 27.7062 31.6558 28.715 30.7093C29.7238 29.7628 30.422 28.5434 30.7206 27.2067L30.7671 26.9962C30.9354 26.2435 32.0292 26.2392 32.2041 26.9897L32.2617 27.2349C32.5718 28.5656 33.2763 29.7768 34.2868 30.7166C35.2973 31.6563 36.5687 32.2826 37.9414 32.5169C38.723 32.6492 38.723 33.749 37.9414 33.8835C36.569 34.1175 35.2978 34.7435 34.2873 35.6829C33.2769 36.6222 32.5722 37.833 32.2617 39.1633L32.2041 39.4063C32.0292 40.1568 30.9354 40.1525 30.7671 39.3998L30.7228 39.1915C30.4239 37.8542 29.725 36.6344 28.7154 35.6878C27.7058 34.7412 26.4312 34.1108 25.0542 33.877L25.0564 33.8791Z'
              stroke='#FF4F00'
              strokeWidth='2'
              strokeLinecap='round'
              strokeLinejoin='round'
            />
          </g>
        </g>
      </g>
      <defs>
        <clipPath id='clip0_1_221'>
          <rect width='64' height='64' fill='white' transform='translate(0 0.970001)' />
        </clipPath>
        <clipPath id='clip1_1_221'>
          <rect width='64' height='64' fill='white' transform='translate(0 0.970001)' />
        </clipPath>
        <clipPath id='clip2_1_221'>
          <rect width='31' height='30.3689' fill='white' transform='translate(16 17.97)' />
        </clipPath>
      </defs>
    </svg>
  );
};

export default StarICon;


import React from 'react';

const DesignerIcon = () => {
  return (
    <svg width='384' height='384' viewBox='0 0 384 384' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <rect width='384' height='384' fill='#FFF7F4' fillOpacity='0.5' />
      <path
        d='M256.523 118.465C258.866 119.941 260.723 122.074 261.863 124.598C263.391 128.179 264.468 131.936 265.066 135.783C264.182 135.806 263.302 135.917 262.44 136.115C262.339 136.115 261.762 136.418 261.661 136.735C261.198 138.335 260.846 139.965 260.607 141.613L231.743 141.787C231.412 141.787 231.455 142.176 231.743 142.191C231.743 142.191 258.096 142.595 260.607 142.609C259.972 147.862 260.506 153.635 264.229 157.358C267.736 160.822 279.657 161.313 284.088 158.008C287.768 155.251 288.677 147.285 288.417 142.609C289.283 142.609 308.795 142.263 310.729 142.191C310.782 142.191 310.834 142.169 310.872 142.131C310.909 142.094 310.931 142.042 310.931 141.989C310.931 141.935 310.909 141.884 310.872 141.846C310.834 141.808 310.782 141.787 310.729 141.787C307.438 141.787 288.374 141.642 288.374 141.642C287.984 137.313 286.931 136.88 286.931 136.678C286.919 136.544 286.865 136.418 286.777 136.316C286.689 136.215 286.571 136.145 286.44 136.115C285.184 135.869 283.909 135.739 282.63 135.725C284.65 132.478 286.382 123.646 289.557 117.729C294.262 108.911 311.97 117.31 311.681 109.517C311.335 100.858 301.723 95.9944 291.405 100.584C281.605 104.913 279.051 125.118 278.878 135.667C275.919 135.667 277.348 135.754 273.105 135.667C276.814 130.732 281.533 114.28 280.711 102.777C279.768 95.1441 276.556 87.9696 271.489 82.1832C267.044 77.2043 261.834 75.0972 257.908 79.0948C252.136 84.8675 257.447 91.3185 262.382 97.8561C267.809 105.072 269.843 108.666 270.579 118.941C270.924 124.516 270.818 130.11 270.262 135.667H268.66C269.901 131.612 268.299 122.679 267.13 118.479C265.456 112.548 262.599 106.573 258.067 102.46C252.714 97.8375 246.203 94.7593 239.234 93.5555C234.976 92.8339 231.339 93.1081 229.362 94.2915C228.635 94.6697 228.074 95.3034 227.786 96.0708C227.498 96.8382 227.504 97.6849 227.804 98.4479C230.199 106.284 247.142 112.692 256.523 118.465ZM291.693 101.507C301.348 97.1779 310.238 101.724 310.541 109.575C310.772 115.593 293.411 108.132 288.677 117.353C285.386 123.732 283.929 132.651 281.937 135.74H280.913C282.356 129.375 285.892 115.218 290.048 110.21C295.359 103.73 304.61 107.511 305.014 107.41C305.172 107.41 305.331 107.15 304.855 106.977C299.082 104.884 293.208 104.928 289.283 109.575C284.564 115.145 281.591 128.567 280.35 135.783H279.109C279.498 125.681 282.327 105.62 291.693 101.507ZM271.315 118.927C270.738 108.738 268.862 105 263.161 97.2789C258.486 91.001 253.478 85.0119 258.644 79.7731C262.166 76.194 266.755 78.3299 270.738 82.8327C275.615 88.4786 278.692 95.455 279.57 102.864C280.509 114.554 275.746 131.338 272.355 135.682H271.59C273.133 129.074 274.133 122.35 274.577 115.578C274.909 109.806 274.808 105.794 273.134 100.771C271.759 96.9475 269.849 93.3374 267.462 90.0485C266.323 88.4263 265.069 86.8878 263.71 85.4448C263.675 85.4027 263.626 85.376 263.572 85.3706C263.517 85.3652 263.463 85.3815 263.421 85.4159C263.379 85.4504 263.352 85.5002 263.347 85.5543C263.342 85.6084 263.358 85.6625 263.392 85.7046C263.754 86.0823 264.091 86.4824 264.403 86.9024C268.905 92.6751 273.35 101.103 273.697 108.55C274.043 115.997 272.557 128.423 271.186 135.783H270.781C271.419 130.188 271.597 124.55 271.315 118.927ZM286.021 137.342C288.403 139.521 287.652 153.996 283.337 157.229C279.022 160.461 267.78 159.696 264.72 156.738C259.9 152.105 260.391 143.432 262.036 136.995C262.138 137.13 262.279 137.231 262.44 137.284C263.549 137.54 264.68 137.694 265.817 137.746C264.404 142.983 264.651 148.53 266.524 153.621C266.593 153.766 266.717 153.878 266.868 153.932C267.02 153.986 267.187 153.978 267.332 153.909C267.478 153.84 267.59 153.716 267.644 153.565C267.698 153.413 267.69 153.246 267.621 153.101C265.803 149.464 265.312 141.382 266.365 137.847C270.868 138.049 282.919 138.135 286.021 137.342ZM257.447 103.196C267.231 111.855 269.742 131.035 268.227 135.711H267.332C267.127 131.7 266.429 127.731 265.254 123.891C262.137 113.789 256.913 107.583 248.903 102.907C244.719 100.514 240.241 98.6753 235.582 97.4376C235.529 97.4242 235.472 97.4327 235.425 97.4611C235.377 97.4895 235.343 97.5356 235.33 97.5892C235.316 97.6427 235.325 97.6995 235.353 97.7468C235.382 97.7942 235.428 97.8283 235.481 97.8417C240.92 99.5661 246.081 102.064 250.808 105.26C256.049 108.749 260.141 113.71 262.57 119.518C264.874 124.653 266.336 130.125 266.899 135.725H265.543C265.009 131.764 263.981 127.885 262.483 124.18C261.313 121.515 259.392 119.248 256.956 117.657C247.416 111.783 230.979 105.346 228.785 98.1304C226.75 91.5062 246.363 93.2668 257.447 103.196ZM132.655 177.505C113.432 170.823 96.2002 167.836 85.4773 165.137C85.3445 165.1 85.2056 165.09 85.0688 165.107C84.932 165.125 84.8001 165.17 84.6812 165.24C84.5622 165.31 84.4586 165.403 84.3766 165.514C84.2945 165.625 84.2357 165.751 84.2036 165.885C84.1715 166.019 84.1668 166.159 84.1899 166.295C84.2129 166.431 84.2632 166.561 84.3376 166.677C84.4121 166.793 84.5093 166.893 84.6233 166.97C84.7373 167.048 84.8658 167.102 85.0011 167.129C91.8995 168.788 102.319 170.693 113.59 173.306C132.207 177.635 132.612 178.92 132.915 178.025C132.947 177.921 132.938 177.809 132.89 177.713C132.841 177.616 132.757 177.541 132.655 177.505ZM284.982 189.181C284.982 189.146 284.976 189.113 284.963 189.081C284.95 189.05 284.93 189.021 284.906 188.997C284.882 188.973 284.854 188.954 284.822 188.941C284.79 188.927 284.757 188.921 284.723 188.921C272.066 188.921 259.756 191.807 252.785 192.457C252.7 192.464 252.618 192.488 252.542 192.528C252.467 192.567 252.4 192.622 252.346 192.688C252.293 192.754 252.253 192.83 252.229 192.912C252.205 192.993 252.198 193.079 252.208 193.164C252.215 193.249 252.239 193.332 252.279 193.408C252.318 193.484 252.372 193.552 252.438 193.607C252.504 193.662 252.58 193.703 252.662 193.729C252.744 193.754 252.83 193.763 252.915 193.755C258.024 193.25 266.87 191.316 275.154 190.248C284.347 189.181 284.997 189.83 284.982 189.181ZM241.384 219.213C241.396 219.189 241.404 219.164 241.407 219.137C241.409 219.11 241.406 219.083 241.398 219.058C241.39 219.032 241.377 219.009 241.36 218.988C241.342 218.968 241.321 218.951 241.297 218.939L240.937 218.751L240.85 219.184C241.095 219.3 241.283 219.487 241.384 219.213Z'
        fill='#FF4F00'
      />
      <path
        d='M329.043 222.821C325.334 222.056 316.17 222.359 312.389 222.691C315.506 212.041 318.724 198.157 320.023 190.508C320.493 188.392 320.697 186.225 320.629 184.057C320.582 183.863 320.494 183.68 320.373 183.521C320.251 183.362 320.097 183.23 319.922 183.134C314.149 179.511 253.666 187.463 249.452 189.556C248.196 190.176 247.07 193.308 246.565 194.722C242.827 188.575 243.217 187.117 239.046 177.404C236.447 171.078 233.151 165.061 229.218 159.466C229.319 158.701 233.317 128.841 229.031 120.861C226.144 115.521 210.515 113.645 204.497 113.14C204.497 112.822 203.746 107.367 203.429 104.899C208.509 100.656 210.644 92.8485 205.132 91.5352C201.22 90.6115 185.778 87.6675 174.276 90.6404C167.06 92.5165 161.288 96.7306 160.797 105.072C160.603 108.24 160.797 111.419 161.374 114.539C153.913 115.362 141.069 116.589 134.517 119.057C126.089 122.232 129.639 159.105 130.534 162.092C130.043 163.304 129.581 164.531 129.163 165.671C108.164 160.317 61.16 150.33 59.0674 150.518C58.5223 150.511 57.9841 150.64 57.5006 150.891C57.0172 151.143 56.6035 151.511 56.2965 151.961C55.7336 152.091 55.5316 152.885 55.4306 153.404C53.9874 161.082 56.5995 206.932 57.0614 214.711C57.8262 217.51 80.0656 223.586 82.952 224.38C83.0963 228.175 83.8612 247.023 84.0199 250.891C82.7644 250.662 81.5216 250.368 80.2965 250.011C77.7277 248.957 67.8852 258.54 68.7511 257.746C64.9844 261.094 105.971 272.106 109.247 271.182C112.523 270.258 119.003 264.067 117.906 260.618C117.603 260.004 117.091 259.518 116.463 259.247C113.36 257.616 105.148 255.61 101.728 254.788C102.06 247.803 102.06 236.344 102.045 229.388C106.101 230.398 129.119 235.969 133.276 235.896C133.574 235.901 133.867 235.826 134.127 235.68C135.455 235.492 137.013 235.16 137.143 233.804C137.143 233.4 137.475 229.878 137.894 224.654C148.068 228.536 160.407 228.248 162.601 227.353C163.192 227.068 163.692 226.623 164.044 226.068C164.145 226.198 164.189 226.169 164.953 226.285C167.84 226.747 172.458 227.18 175.056 225.823C178.736 226.415 189.401 227.266 190.195 223.702C190.296 223.225 190.44 222.258 190.584 221.089C201.264 221.667 239.191 221.407 239.335 221.407L238.454 225.376C238.432 225.343 238.402 225.316 238.367 225.299C238.331 225.281 238.292 225.273 238.252 225.275C238.252 225.159 238.252 225.188 238.252 225.275C232.343 224.809 226.413 224.655 220.487 224.813C218.38 224.914 212.824 225.174 212.723 227.223C211.985 228.965 211.877 230.909 212.42 232.721C212.737 233.861 215.421 235.709 216.417 236.387C210.774 235.824 207.484 236.041 205.781 236.647C205.376 236.717 204.998 236.899 204.69 237.171C204.382 237.444 204.156 237.796 204.036 238.19C203.917 238.583 203.908 239.002 204.013 239.399C204.117 239.797 204.329 240.158 204.626 240.442C206.56 243.098 210.587 243.993 211.02 247.471C211.842 254.066 195.073 261.527 188.953 264.139C192.027 260.098 200.268 247.384 196.27 244.31C191.825 240.89 153.711 239.389 150.204 240.284C147.736 240.919 129.596 254.326 129.927 259.045C130.158 262.119 148.01 265.135 151.33 265.712C155.068 266.347 181.738 270.504 184.927 268.469C185.603 268.196 186.218 267.79 186.734 267.274C187.249 266.758 187.656 266.144 187.929 265.467C193.455 263.567 198.774 261.111 203.804 258.136C211.741 253.215 216.186 247.124 208.335 242.001C207.397 241.395 204.828 239.548 205.204 238.509C206.012 236.214 217.168 237.065 217.326 237.065C222.507 240.442 232.422 245.652 238.267 247.168C244.444 248.798 273.307 245.638 280.278 244.757C281.072 247.644 281.836 250.328 282.342 251.973C281.259 252.06 278.171 252.334 277.305 253.012C276.829 253.388 276.843 254.023 277.608 254.456C277.608 259.29 277.016 273.751 278.459 280.274C279.008 282.713 279.643 283.723 282.168 284.604C286.945 286.148 296.124 285.599 300.93 284.315C303.917 283.507 304.307 282.872 304.783 281.284C306.428 275.887 306.342 259.954 306.226 254.297C306.319 254.23 306.394 254.142 306.446 254.041C306.498 253.939 306.525 253.826 306.525 253.712C306.525 253.598 306.498 253.486 306.446 253.384C306.394 253.283 306.319 253.195 306.226 253.128C305.159 252.633 304.009 252.339 302.835 252.262C303.037 250.646 304.119 241.611 304.278 240.024C305.032 239.571 305.705 238.996 306.269 238.321C307.152 237.249 307.725 235.957 307.929 234.583C309.372 232.693 311.45 225.635 312.129 223.326C318.565 223.6 328.004 223.225 328.884 223.326C328.951 223.347 329.024 223.341 329.086 223.308C329.148 223.276 329.195 223.22 329.216 223.153C329.237 223.086 329.231 223.014 329.198 222.951C329.166 222.889 329.11 222.842 329.043 222.821ZM133.968 253.965C134.935 252.897 136.075 251.786 137.288 250.66C142.44 245.898 148.992 241.106 150.421 240.745C153.884 239.851 191.926 242.189 195.794 245.075C196.444 245.566 196.573 246.518 196.444 247.658C195.924 252.19 191.19 259.666 188.434 263.317C185.317 260.632 138.096 254.528 133.968 253.965ZM204.684 114.179C210.197 114.698 225.654 116.473 228.309 121.294C232.061 128.076 229.752 151.211 228.829 158.816C228.02 157.734 227.183 156.709 226.332 155.771C221.439 150.402 213.04 147.704 205.925 146.333C201.355 145.537 196.744 144.992 192.114 144.702C191.97 144.702 192.201 144.918 191.061 142.58C189.358 139.073 189.257 139.131 189.43 139.03C191.322 138.929 193.196 138.61 195.015 138.078C199.893 136.635 202.794 133.748 204.165 126.734C204.909 122.577 205.064 118.336 204.626 114.135L204.684 114.179ZM192.258 145.149C193.168 145.279 193.413 145.265 193.485 145.308C193.485 145.669 196.646 162.626 185.822 163.405C176.874 164.142 170.986 151.586 167.811 143.201C168.965 143.013 169.889 142.883 170.51 142.797C170.813 149.378 180.28 161.313 185.533 160.476C191.436 159.509 194.337 150.532 192.258 145.149ZM170.712 118.595C170.841 117.951 171.129 117.35 171.55 116.846C171.971 116.341 172.511 115.951 173.122 115.708C176.008 115.001 176.008 118.595 178.303 118.393C181.189 118.205 177.971 111.509 180.453 107.425C183.152 102.922 194.091 112.028 202.938 105.274C204.006 112.88 205.175 118.797 203.544 126.561C202.101 133.373 199.417 135.884 194.784 137.241C192.88 137.679 190.953 138.007 189.011 138.222C188.856 138.31 188.726 138.435 188.633 138.586C188.539 138.738 188.486 138.91 188.477 139.088C188.477 139.593 189.92 142.176 191.263 145.193C193.269 149.926 190.656 158.528 185.374 159.35C181.622 159.942 174.276 151.528 172.184 145.582C171.26 142.956 171.534 142.855 173.165 132.594C175.46 132.752 175.936 128.264 176.051 125.941C176.075 125.448 175.904 124.966 175.575 124.598C174.536 123.458 173.685 124.786 171.664 122.26C171.223 121.77 170.907 121.182 170.741 120.544C170.575 119.906 170.565 119.237 170.712 118.595ZM161.576 115.579C163.51 124.411 168.59 130.544 172.083 132.247C171.448 136.303 170.726 140.82 170.539 142.191C162.211 142.608 153.998 144.312 146.192 147.242C142.726 148.569 139.495 150.445 136.624 152.798C135.036 144.572 139.121 128.495 138.615 123.935C138.384 122.001 137.836 119.951 135.946 119.533C142.411 117.498 154.389 116.343 161.576 115.579ZM135.08 119.908C135.425 119.92 135.763 120.001 136.076 120.148C136.389 120.294 136.668 120.502 136.898 120.76C137.549 121.741 137.877 122.902 137.836 124.079C138.154 128.408 133.665 144.37 136.191 153.217C133.758 155.498 131.916 158.336 130.822 161.486C129.668 154.458 127.748 122.463 135.08 119.908ZM83.2262 185.659C83.3416 184.981 84.5828 184.678 85.2611 184.562C90.2689 183.74 100.674 186.597 100.443 190.075C100.097 195.228 101.684 257.66 100.328 259.954C98.7115 262.711 89.8792 261.181 86.3579 258.727C84.756 257.616 84.7848 256.664 84.8281 256.851C83.6014 207.711 83.0241 186.785 83.2262 185.659ZM116.679 261.094C117.415 263.548 111.628 269.191 108.944 269.941C106.259 270.691 66.6874 260.445 69.2707 258.107C68.0728 259.189 75.7072 252.161 79.0698 251.035C79.3379 250.902 79.6442 250.866 79.9357 250.934C80.3254 251.107 81.8552 251.497 84.0632 252.017C84.1931 255.062 84.2797 256.866 84.2797 256.866C85.1312 261.109 98.7115 264.313 101.078 260.402C101.441 259.016 101.635 257.591 101.656 256.159C103.864 256.707 115.193 259.463 116.679 261.094ZM133.276 234.67C129.48 234.814 105.855 229.272 102.045 228.377C101.973 211.463 101.627 192.5 101.8 190.162C102.146 184.851 88.6381 181.965 83.8756 183.523C83.4037 183.627 82.97 183.86 82.6232 184.197C82.2765 184.533 82.0305 184.96 81.9129 185.428C81.5954 187.348 82.8365 221.508 82.9087 223.557C80.5563 222.922 58.519 217.048 57.6098 214.696C57.3644 209.385 55.012 158.037 56.6861 153.173C64.537 155.136 131.587 168.659 136.306 171.935C137.49 175.182 134.791 230.08 133.276 234.67ZM136.667 233.818C136.667 234.785 135.383 235.117 134.43 235.261C135.989 231.524 139.092 174.648 137.504 171.3C135.917 167.951 63.5124 153.881 56.7439 151.99C57.0449 151.664 57.4114 151.406 57.8193 151.232C58.2272 151.058 58.6672 150.972 59.1107 150.98C61.1167 150.835 135.152 167.374 139.452 169.741C140.174 171.819 139.452 186.294 139.351 188.676C139.092 194.419 136.725 233.039 136.667 233.818ZM175.633 224.048C173.944 226.299 167.955 226.025 165.141 225.765H164.448C165.732 223.184 166.46 220.362 166.584 217.481C168.027 217.077 173.309 215.851 174.118 217.149C174.363 217.525 173.584 217.972 173.18 218.189C172.112 218.684 170.995 219.061 169.846 219.314C169.675 219.347 169.525 219.446 169.428 219.589C169.33 219.733 169.294 219.909 169.326 220.079C169.359 220.249 169.458 220.4 169.601 220.497C169.745 220.595 169.921 220.631 170.091 220.599C171.534 220.397 175.474 219.848 176.874 220.324C176.297 221.125 175.469 221.709 174.522 221.984C173.172 221.975 171.825 222.086 170.495 222.316C170.304 222.352 170.132 222.458 170.013 222.612C169.894 222.767 169.837 222.96 169.851 223.154C169.865 223.349 169.951 223.531 170.091 223.666C170.231 223.802 170.416 223.881 170.611 223.889C172.077 223.932 173.539 223.732 174.94 223.297C175.305 223.313 175.663 223.401 175.994 223.557C175.901 223.751 175.762 223.92 175.59 224.048H175.633ZM189.285 223.543C189.224 223.768 189.11 223.974 188.951 224.145C188.793 224.316 188.596 224.446 188.376 224.524C185.706 225.967 178.967 225.708 175.965 225.404C177.076 224.553 177.726 223.168 176.6 222.403C178.822 220.959 178.591 219.415 177.134 218.968C176.19 218.739 175.214 218.671 174.247 218.766C175.157 218.088 175.489 217.323 174.94 216.5C174.146 215.374 172.054 215.519 170.755 215.735C170.137 210.022 169.819 204.279 169.802 198.532C173.656 201.332 186.428 201.419 190.887 198.763C191.104 203.612 189.646 221.436 189.228 223.543H189.285ZM176.903 220.267C176.903 220.267 176.86 220.296 176.86 220.267H176.903ZM207.874 220.584C210.543 212.777 210.919 196.238 210.76 187.968C212.997 191.562 225.192 208.793 225.278 208.938C225.575 209.391 225.923 209.808 226.317 210.179C229.225 212.836 232.489 215.076 236.016 216.832C239.782 218.824 240.085 218.723 240.056 218.881L239.551 221.046C239.306 221.032 210.082 220.584 207.83 220.584H207.874ZM214.094 227.064C217.196 224.899 238.296 225.881 238.527 225.736V225.895C236.506 235.564 235.727 239.057 235.482 240.327C235.611 239.764 236.405 235.997 237.314 231.827C237.949 228.767 238.758 225.13 239.58 221.277C239.955 219.516 240.201 218.391 240.215 218.304C236.261 216.211 230.228 212.603 227.068 209.414C226.274 208.606 210.933 187.348 210.789 187.102C210.644 186.857 210.644 180.522 210.486 180.233C210.455 180.2 210.416 180.178 210.372 180.168C210.329 180.159 210.283 180.163 210.242 180.18C210.201 180.198 210.167 180.227 210.143 180.265C210.119 180.303 210.108 180.347 210.11 180.392C209.966 180.392 210.11 211.247 207.441 220.541L190.815 220.7C190.916 219.892 191.017 218.953 191.133 217.943C197.829 218.795 200.874 211.449 199.099 205.46C198.045 202.169 195.332 201.664 192.229 203.252C192.374 201.33 192.374 199.4 192.229 197.479C192.363 197.147 192.386 196.781 192.295 196.435C192.204 196.09 192.004 195.782 191.724 195.56C189.574 193.539 183.556 193.323 180.626 193.323C177.697 193.323 171.664 193.553 169.528 195.56C169.341 195.704 169.193 195.892 169.095 196.108C167.999 198.085 170.106 215.418 170.365 215.793C169.108 216.043 167.869 216.376 166.656 216.789V214.48C166.57 209.443 150.464 206.643 149.915 203.771C149.728 202.79 149.425 200.596 149.078 197.998C147.13 183.74 147.419 184.288 147.101 184.288C147.048 184.288 146.996 184.31 146.958 184.347C146.921 184.385 146.899 184.437 146.899 184.49C146.899 184.88 148.458 200.582 149.021 203.916C149.584 207.249 165.574 210.482 165.646 214.48C165.646 217.597 164.953 225.332 162.255 226.444C160.624 227.136 148.01 227.771 137.952 224.235C138.168 221.436 142.18 171.314 140.246 169.092C139.51 168.24 130.866 166.075 129.769 165.801C134.098 155.988 137.302 147.906 167.407 143.187C168.243 145.989 169.265 148.732 170.466 151.398C173.526 157.936 178.707 164.993 185.88 164.387C194.12 163.68 195.448 154.746 194.134 146.592C194.048 146.015 193.961 145.64 193.889 145.308C197.849 145.704 201.785 146.311 205.68 147.126C212.477 148.57 220.833 151.312 225.495 156.478C230.531 162.02 234.933 170.578 238.022 177.419C242.467 187.261 242.438 189.801 246.262 195.473C243.573 203.959 241.318 212.576 239.508 221.291C238.931 223.99 238.065 228.103 237.242 231.841C236.044 237.614 235.323 241.265 235.395 240.5C235.265 241.279 235.395 241.251 235.395 241.438C230.69 239.34 226.15 236.889 221.815 234.107C220.299 233.097 212.564 228.146 214.094 227.035V227.064ZM192.114 206.196C192.114 205.445 192.201 204.753 192.229 204.031C194.842 202.977 197.165 203.136 197.872 205.864C199.315 210.814 197.035 217.409 191.219 217.409C191.219 216.717 191.465 214.739 191.493 214.523C198.132 215.418 198.089 203.266 192.114 206.196ZM191.551 213.902C191.753 211.622 191.926 209.212 192.071 206.946C192.762 206.733 193.501 206.733 194.192 206.946C195.91 207.567 195.635 213.527 191.479 213.902H191.551ZM238.758 245.926C233.204 244.11 227.832 241.781 222.709 238.97C221.266 238.205 213.791 234.136 213.285 232.563C212.849 231.158 212.804 229.661 213.156 228.233C215.089 232 227.356 238.335 231.296 240.197C233.1 241.048 234.962 241.772 236.867 242.362C243.534 244.743 272.138 240.919 279.167 240.053C279.253 240.356 279.859 242.679 280.09 243.516C273.971 244.223 244.501 247.442 238.685 245.926H238.758ZM303.239 282.222C301.132 284.012 288.489 285.513 282.529 283.666C280.364 282.987 279.931 282.295 279.412 280.101C278.939 277.721 278.64 275.309 278.517 272.885C281.476 274.703 286.902 275.165 290.38 275.266C295.619 275.382 300.771 275.266 304.985 272.885C304.898 274.415 304.408 281.227 303.239 282.222ZM305.028 272.322C302.182 273.54 299.119 274.173 296.023 274.184C291.895 274.386 282.226 274.357 278.488 272.365C278.33 269.652 278.229 266.752 278.185 264.053C279.628 265.785 287.321 266.564 290.395 266.665C295.879 266.78 300.973 266.665 305.36 264.067C305.36 263.923 305.317 267.343 305.043 272.322H305.028ZM305.36 263.562C298.144 267.199 280.235 265.554 278.171 263.562V254.687C282.76 256.317 300.901 256.202 305.447 254.687C305.418 256.346 305.432 259.723 305.375 263.562H305.36ZM302.474 253.85C302.526 253.864 302.581 253.859 302.629 253.835C302.677 253.811 302.714 253.77 302.734 253.72C302.734 253.72 302.734 253.46 302.82 252.998C303.75 253.126 304.668 253.334 305.562 253.619C302.402 255.062 283.381 255.192 278.633 253.792C278.6 253.782 278.572 253.762 278.552 253.734C278.532 253.707 278.521 253.674 278.521 253.64C278.521 253.606 278.532 253.573 278.552 253.546C278.572 253.519 278.6 253.499 278.633 253.489C279.956 253.129 281.308 252.888 282.673 252.767C282.769 253.169 282.914 253.556 283.106 253.922C283.222 254.037 283.41 254.052 283.395 253.763C283.381 253.474 278.647 234.785 277.925 230.672C278.663 230.918 279.451 230.98 280.218 230.852C280.985 230.723 281.709 230.409 282.327 229.936C283.915 234.381 288.98 254.383 289.283 254.383C289.338 254.38 289.39 254.355 289.427 254.315C289.465 254.275 289.485 254.222 289.485 254.167L289.067 252.219H291.058C291.058 252.493 291.217 253.893 291.232 253.994C291.246 254.095 291.665 254.34 291.636 253.806C291.636 252.507 290.423 230.99 290.395 230.6C290.602 230.5 290.82 230.422 291.044 230.369C291.203 231.148 296.283 251.728 296.672 253.33C296.672 253.474 296.672 253.72 296.947 253.662C297.221 253.604 297.105 253.344 296.947 252.406L299.155 252.565V252.81C299.155 253.041 299.515 252.984 299.559 252.81C299.559 252.969 302.243 225.275 302.445 223.067C302.825 223.355 303.263 223.559 303.728 223.666C304.193 223.773 304.676 223.78 305.144 223.687C305.115 223.904 302.156 253.748 302.459 253.85H302.474ZM289.485 225.159C289.314 223.771 288.708 222.473 287.753 221.45C289.731 222.042 290.149 222.475 290.64 223.831C291.03 224.912 291.135 226.075 290.943 227.208C290.748 227.922 290.748 228.674 290.943 229.388C290.707 229.442 290.475 229.514 290.25 229.604C289.355 227.05 287.364 227.079 287.364 224.51C287.361 223.581 287.225 222.658 286.96 221.768C287.659 223.034 288.425 224.263 289.254 225.448C289.399 225.635 289.673 225.361 289.5 225.159H289.485ZM290.207 243.372C290.279 244.079 290.842 250.213 290.986 251.771H288.922C288.49 249.823 287.84 246.937 287.104 243.848L290.207 243.372ZM290.12 242.261L286.83 242.694C286.541 241.496 286.238 240.284 285.935 239.086C287.263 238.898 288.562 238.696 289.817 238.494C289.875 239.115 290.077 241.626 290.135 242.261H290.12ZM294.609 241.597C294.378 240.5 293.815 238.018 293.772 237.874C295.027 237.657 299.299 236.921 300.179 236.748C300.179 237.368 299.934 239.995 299.876 240.659C298.476 240.962 296.687 241.279 294.58 241.597H294.609ZM299.818 241.597C299.559 245.335 299.155 251.584 299.14 251.93C298.39 251.93 297.596 251.901 296.759 251.843C296.413 250.097 294.926 243.098 294.825 242.622C296.773 242.232 298.447 241.886 299.833 241.554L299.818 241.597ZM302.575 221.869C302.751 220.04 303.035 218.223 303.426 216.428C303.811 216.312 304.218 216.285 304.615 216.347C305.012 216.41 305.39 216.561 305.721 216.789C305.635 218.602 305.442 220.409 305.144 222.201C305.014 222.706 304.985 222.836 304.653 222.879C304.004 222.922 302.69 222.374 302.589 221.825L302.575 221.869ZM304.465 239.071C304.595 238.003 304.725 236.921 304.841 235.839C305.696 235.659 306.535 235.413 307.352 235.103C306.897 236.714 305.878 238.107 304.48 239.028L304.465 239.071ZM306.876 233.905C306.267 234.147 305.639 234.34 304.999 234.482C305.259 232.058 306.789 217.943 306.789 216.947C306.789 215.504 304.22 214.97 302.892 215.504C302.445 215.706 302.315 216.558 302.185 217.308C301.464 221.335 300.612 231.379 300.28 235.463L293.512 236.705C291.823 229.344 291.968 229.748 291.78 229.561C291.651 229.438 291.482 229.366 291.304 229.359C291.17 228.716 291.205 228.05 291.405 227.425C291.703 226.177 291.663 224.871 291.289 223.644C291.097 222.751 290.583 221.96 289.846 221.421C288.672 220.799 287.405 220.37 286.094 220.151C286.025 220.133 285.953 220.131 285.883 220.146C285.814 220.161 285.749 220.192 285.694 220.237C285.639 220.283 285.595 220.34 285.567 220.406C285.538 220.471 285.526 220.542 285.531 220.613C285.562 220.736 285.6 220.856 285.646 220.974C286.772 223.658 285.993 224.885 286.772 226.487C287.551 228.089 288.865 228.334 289.341 230.181C289.341 230.326 289.745 236.993 289.76 237.397L285.675 238.047C285.387 236.95 283.41 229.142 282.63 228.377C281.187 226.934 277.06 228.551 276.857 229.821C276.728 230.542 278.705 238.278 278.892 239.014C271.46 240.096 263.58 241.077 256.61 241.727C253.565 242.001 234.962 243.704 236.001 240.659C237.444 233.991 240.331 221.753 240.908 219.184V218.982C240.908 218.766 241.009 218.549 240.908 219.184C240.908 218.968 240.994 218.838 241.023 218.766L244.631 204.81C245.108 203.093 248.384 191.418 250.043 190.595C253.723 188.777 314.207 180.955 319.316 184.375C320.182 188.084 309.545 232.144 306.89 233.919L306.876 233.905Z'
        fill='#FF4F00'
      />
      <path
        d='M189.964 117.83V116.719C189.964 116.539 189.892 116.366 189.765 116.239C189.638 116.112 189.465 116.04 189.286 116.04C189.104 116.04 188.93 116.111 188.801 116.238C188.671 116.365 188.597 116.537 188.593 116.719V118.017C188.625 118.189 188.722 118.342 188.863 118.444C189.005 118.546 189.181 118.589 189.354 118.565C189.526 118.541 189.683 118.451 189.792 118.314C189.9 118.177 189.951 118.004 189.935 117.83H189.964ZM282.197 206.643C281.779 206.239 281.187 205.763 280.639 205.936C279.73 206.224 278.82 208.534 278.431 209.486C277.336 212.328 276.468 215.253 275.833 218.232C276.425 219.761 286.411 217.755 287.768 217.092C288.201 216.89 288.143 216.37 287.999 215.908C286.571 212.531 284.612 209.403 282.197 206.643ZM276.223 218.044C276.482 216.846 279.773 207.668 280.899 206.831C282.645 207.826 286.152 213.945 287.09 216.255C285.791 216.774 276.973 219.011 276.223 218.044ZM158.719 248.654C158.575 248.755 155.429 250.747 155.284 250.891C155.25 250.905 155.221 250.929 155.2 250.96C155.18 250.991 155.169 251.027 155.169 251.064C155.169 251.101 155.18 251.137 155.2 251.168C155.221 251.199 155.25 251.223 155.284 251.237C156.092 251.468 158.791 251.771 159.614 251.858C179.356 246.908 179.486 246.908 179.241 246.908C179.374 246.89 179.494 246.821 179.578 246.716C179.661 246.611 179.701 246.478 179.688 246.345C179.688 246.099 179.299 244.397 179.183 243.877L158.719 248.654ZM196.963 111.797C197.367 111.797 198.161 111.985 198.32 111.999C199.196 112.09 200.064 112.245 200.918 112.461L202.216 112.692C202.266 112.704 202.318 112.699 202.364 112.677C202.409 112.654 202.446 112.616 202.467 112.57C202.487 112.523 202.491 112.471 202.477 112.422C202.463 112.373 202.432 112.331 202.39 112.302C201.637 111.664 200.723 111.245 199.749 111.09C198.783 110.883 197.779 110.969 196.862 111.335C196.832 111.342 196.803 111.355 196.778 111.372C196.752 111.39 196.73 111.413 196.714 111.439C196.697 111.465 196.686 111.494 196.68 111.525C196.675 111.555 196.675 111.587 196.682 111.617C196.688 111.647 196.701 111.676 196.719 111.701C196.736 111.727 196.759 111.749 196.785 111.765C196.811 111.782 196.84 111.794 196.871 111.799C196.902 111.804 196.933 111.804 196.963 111.797ZM185.533 113.067C185.923 112.981 186.76 112.851 186.976 112.822C187.851 112.631 188.739 112.506 189.632 112.447L191.075 112.288C191.132 112.288 191.188 112.265 191.228 112.225C191.269 112.184 191.292 112.129 191.292 112.071C191.292 112.014 191.269 111.959 191.228 111.918C191.188 111.878 191.132 111.855 191.075 111.855C190.145 111.461 189.124 111.329 188.124 111.474C187.124 111.619 186.183 112.035 185.403 112.678C185.369 112.678 185.335 112.686 185.305 112.701C185.274 112.717 185.248 112.74 185.228 112.768C185.208 112.795 185.195 112.828 185.189 112.861C185.184 112.895 185.187 112.93 185.198 112.963C185.209 112.995 185.227 113.025 185.252 113.049C185.276 113.073 185.306 113.09 185.339 113.101C185.372 113.111 185.406 113.113 185.44 113.107C185.474 113.102 185.506 113.088 185.533 113.067ZM199.965 115.578C199.785 115.578 199.613 115.65 199.485 115.777C199.358 115.904 199.287 116.077 199.287 116.257V117.556C199.312 117.735 199.407 117.898 199.552 118.008C199.697 118.117 199.879 118.165 200.059 118.14C200.239 118.115 200.401 118.02 200.511 117.875C200.621 117.73 200.668 117.548 200.643 117.368V116.257C200.645 116.167 200.629 116.078 200.596 115.995C200.562 115.912 200.512 115.836 200.449 115.773C200.386 115.709 200.31 115.659 200.227 115.626C200.144 115.593 200.055 115.576 199.965 115.578ZM87.9599 240.875C89.9659 241.525 94.6418 243.271 96.7922 243.011C97.0519 243.011 97.3406 242.751 97.5282 242.289C98.9714 239.042 97.9323 222.532 97.4127 219.343C97.0519 217.048 88.7537 214.205 86.7476 215.836C85.4488 216.89 86.0982 229.113 86.2425 230.816C86.6178 234.929 86.2281 240.312 87.9599 240.875ZM87.3971 216.601C88.9557 215.475 96.186 218.145 96.4169 219.487C96.7777 221.753 98.1199 240.803 96.6767 242.289C94.815 242.564 89.8793 241.048 88.0176 240.471C86.7043 240.038 87.1517 234.294 86.9353 230.744C86.8342 228.348 86.6755 218.838 87.3971 216.601ZM189.949 126.474C189.913 126.457 189.874 126.447 189.834 126.447C189.794 126.447 189.754 126.457 189.718 126.474C189.358 126.604 189.141 127.008 189.083 127.6C189.037 129.129 189.55 130.622 190.527 131.8C190.756 132.112 191.045 132.375 191.378 132.574C191.711 132.772 192.08 132.901 192.464 132.954C192.848 133.006 193.238 132.981 193.612 132.879C193.986 132.778 194.335 132.602 194.64 132.363C195.51 131.647 196.193 130.731 196.631 129.693C196.671 129.612 196.691 129.523 196.691 129.433C196.691 129.343 196.671 129.254 196.631 129.173C196.184 128.48 195.116 129.462 189.949 126.474ZM189.819 126.965C191.387 128.3 193.223 129.284 195.203 129.851C192.114 135.105 189.011 128.019 189.819 126.965ZM193.355 123.574C194.279 123.747 196.833 123.429 197.382 122.491C197.656 122.044 197.382 121.9 196.776 120.052C196.229 118.447 195.589 116.876 194.856 115.347C194.596 114.943 194.264 115.347 194.452 115.593C194.853 117.805 195.492 119.968 196.357 122.044C195.313 122.533 194.243 122.966 193.153 123.343C193.151 123.371 193.155 123.4 193.164 123.427C193.173 123.454 193.188 123.479 193.206 123.5C193.225 123.522 193.248 123.539 193.273 123.552C193.299 123.564 193.327 123.572 193.355 123.574ZM246.58 273.65C251.992 270.215 247.778 267.054 244.198 268.555C243.318 266.953 243.116 266.824 241.312 266.91C231.946 267.386 189.646 277.171 189.242 277.33C187.106 278.21 192.533 290.953 194.683 292.628C195.174 293.003 195.015 293.075 200.311 292.036C200.658 295.182 202.029 300.695 205.233 300.868C206.726 300.595 208.18 300.139 209.562 299.512C212.239 302.174 215.088 304.657 218.091 306.944C221.411 309.166 242.625 284.387 245.8 281.501C246.71 281.198 247.518 280.996 247.417 278.744C250.159 278.239 252.28 276.551 250.823 274.126C249.841 272.654 248.138 272.885 246.58 273.65ZM247.085 269.724C247.677 269.941 247.98 270.172 247.792 270.763C247.403 271.668 246.833 272.483 246.118 273.159C245.735 271.985 245.287 270.834 244.776 269.71C245.523 269.441 246.341 269.446 247.085 269.724ZM231.729 269.248C232.263 271.774 232.624 273.145 233.302 275.468L223.301 277.359C222.726 275.271 222.057 273.21 221.295 271.182C223.186 270.821 230.185 269.508 231.729 269.248ZM216.937 288.515C217.466 290.328 218.248 292.057 219.26 293.652C216.489 294.994 213.877 296.221 211.655 297.231C210.857 294.811 209.736 292.51 208.321 290.391L216.937 288.515ZM212.853 288.515C212.365 286.007 211.748 283.526 211.005 281.082L222.551 278.585C223.18 281.03 223.942 283.439 224.831 285.801C220.862 286.638 216.72 287.576 212.853 288.457V288.515ZM217.658 288.587C217.5 288.356 216.518 288.702 227.14 286.263C227.328 287.336 227.725 288.361 228.309 289.279L219.852 293.421C219.35 291.697 218.612 290.051 217.658 288.529V288.587ZM227.761 286.104C233.245 284.834 238.281 283.622 241.759 282.699L229.016 288.919C228.78 287.894 228.36 286.921 227.775 286.047L227.761 286.104ZM225.322 285.657C224.859 283.195 224.271 280.757 223.561 278.355L233.418 275.93C233.418 276.002 234.082 278.225 234.385 279.177C234.529 279.61 235.756 283.103 235.828 283.16C232.841 283.824 225.553 285.542 225.307 285.599L225.322 285.657ZM220.862 271.326C221.339 273.953 221.786 275.656 222.305 277.618L210.76 280.158C210.082 277.864 209.62 276.363 208.624 273.765C210.875 273.246 219.13 271.6 220.877 271.269L220.862 271.326ZM208.148 273.852C208.711 276.738 209.129 278.253 209.735 280.389C208.768 280.606 200.874 282.583 200.874 282.583C200.586 282.583 200.701 283.03 200.99 282.973C200.99 282.973 209.548 281.385 209.981 281.284C209.981 281.284 210.601 283.766 212.376 288.63L203.068 290.708C201.736 285.674 200.063 280.736 198.06 275.93L208.148 273.852ZM195.087 292.137C192.893 290.492 187.871 278.369 189.387 277.705C189.387 277.705 192.691 276.984 197.656 275.944C198.893 281.002 200.544 285.95 202.592 290.737C195.001 292.44 195.332 292.267 195.102 292.079L195.087 292.137ZM205.189 299.815C202.75 299.815 201.293 294.547 200.86 292.151C200.86 291.877 200.095 292.151 207.643 290.578C208.018 290.506 207.426 290.405 209.23 294.157C209.748 295.336 210.386 296.458 211.135 297.506C209.237 298.415 207.268 299.168 205.247 299.757L205.189 299.815ZM218.64 305.991C215.706 303.935 212.887 301.719 210.197 299.353C212.679 298.328 215.494 297.015 217.918 295.86C219.816 298.067 221.967 300.043 224.326 301.748C223.345 302.585 220.011 305.674 218.697 305.934L218.64 305.991ZM224.744 301.315C222.838 299.188 220.704 297.276 218.38 295.615L227.443 291.156C228.706 292.452 230.168 293.538 231.773 294.374C229.503 296.722 227.179 299.018 224.802 301.258L224.744 301.315ZM232.263 293.912C231.06 292.683 229.69 291.629 228.194 290.78C234.399 287.649 237.964 285.744 243.751 282.54C241.182 284.806 234.659 291.473 232.321 293.854L232.263 293.912ZM246.031 280.346C245.411 280.794 236.91 282.872 236.174 283.045C235.255 278.323 233.908 273.696 232.148 269.219C234.948 268.743 240.49 267.776 242.553 268.007C242.832 268.335 243.074 268.693 243.275 269.075C242.29 269.744 241.475 270.633 240.894 271.673C240.749 272.033 241.124 272.221 241.312 272.048C242.034 271.284 242.878 270.645 243.809 270.157C244.464 271.51 245.032 272.903 245.512 274.328C244.229 275.205 243.074 276.254 242.077 277.445C241.889 277.676 241.947 277.849 242.077 277.922C242.423 278.124 242.452 277.604 245.858 275.584C246.202 276.752 246.396 277.96 246.435 279.177C246.363 279.437 246.32 280.101 246.089 280.288L246.031 280.346ZM249.625 276.478C248.98 277.217 248.169 277.791 247.258 278.152C247.125 277.124 246.918 276.106 246.637 275.107C247.576 274.631 249.033 274.025 249.524 274.905C249.709 275.108 249.824 275.364 249.852 275.637C249.881 275.91 249.821 276.184 249.683 276.421L249.625 276.478Z'
        fill='#FF4F00'
      />
    </svg>
  );
};

export default DesignerIcon;


import React from 'react';

const HeroEllipseLeft = () => {
  return (
    <svg width='1237' height='667' viewBox='0 0 1237 667' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <g filter='url(#filter0_f_1_115)'>
        <circle cx='-80' cy='-584' r='317' fill='#FFD6B0' />
      </g>
      <defs>
        <filter
          id='filter0_f_1_115'
          x='-1397'
          y='-1901'
          width='2634'
          height='2634'
          filterUnits='userSpaceOnUse'
          colorInterpolationFilters='sRGB'>
          <feFlood floodOpacity='0' result='BackgroundImageFix' />
          <feBlend mode='normal' in='SourceGraphic' in2='BackgroundImageFix' result='shape' />
          <feGaussianBlur stdDeviation='500' result='effect1_foregroundBlur_1_115' />
        </filter>
      </defs>
    </svg>
  );
};

export default HeroEllipseLeft;


import React from 'react';

const LightningIcon = () => {
  return (
    <svg width='25' height='24' viewBox='0 0 25 24' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <g id='Icon'>
        <g id='Group'>
          <path
            id='Vector'
            d='M20.7303 11.0785C20.7019 10.9583 20.6443 10.8469 20.5625 10.7544C20.4807 10.6618 20.3774 10.5908 20.2616 10.5478L14.8607 8.5219L16.235 1.64721C16.2662 1.48748 16.2445 1.32197 16.1733 1.17564C16.1021 1.0293 15.9852 0.910102 15.8403 0.836016C15.6954 0.76193 15.5304 0.73698 15.3701 0.764931C15.2097 0.792882 15.0629 0.872217 14.9516 0.990965L4.45159 12.241C4.36631 12.3308 4.30462 12.4404 4.27203 12.5599C4.23943 12.6795 4.23696 12.8052 4.26481 12.9259C4.29267 13.0466 4.34999 13.1585 4.43166 13.2517C4.51334 13.3448 4.61681 13.4163 4.73284 13.4597L10.1357 15.4857L8.76503 22.3528C8.73391 22.5126 8.75558 22.6781 8.82679 22.8244C8.89799 22.9708 9.01485 23.09 9.15974 23.164C9.30464 23.2381 9.46969 23.2631 9.63001 23.2351C9.79032 23.2072 9.9372 23.1278 10.0485 23.0091L20.5485 11.7591C20.6322 11.6692 20.6926 11.5601 20.7243 11.4415C20.756 11.3228 20.7581 11.1981 20.7303 11.0785ZM10.7535 20.0625L11.735 15.1519C11.7702 14.9777 11.7423 14.7968 11.6565 14.6412C11.5706 14.4857 11.4324 14.3656 11.2663 14.3025L6.31253 12.4416L14.2457 3.94221L13.265 8.85284C13.2299 9.027 13.2577 9.20797 13.3436 9.36352C13.4294 9.51907 13.5677 9.6391 13.7338 9.70222L18.6838 11.5585L10.7535 20.0625Z'
            fill='#94989E'
          />
        </g>
      </g>
    </svg>
  );
};

export default LightningIcon;


import React from 'react';

const HeroEllipseIcon = () => {
  return (
    <svg viewBox='0 0 1440 1016' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <g filter='url(#filter0_f_155_2515)'>
        <ellipse cx='720' cy='591.5' rx='202' ry='192.5' fill='#D9D9D9' />
      </g>
      <defs>
        <filter
          id='filter0_f_155_2515'
          x='-484'
          y='-603'
          width='2408'
          height='2389'
          filterUnits='userSpaceOnUse'
          colorInterpolationFilters='sRGB'>
          <feFlood floodOpacity='0' result='BackgroundImageFix' />
          <feBlend mode='normal' in='SourceGraphic' in2='BackgroundImageFix' result='shape' />
          <feGaussianBlur stdDeviation='501' result='effect1_foregroundBlur_155_2515' />
        </filter>
      </defs>
    </svg>
  );
};

export default HeroEllipseIcon;


import React from 'react';

const HeroBG = ({ className }: { className: string }) => {
  return (
    <svg
      className={className}
      width='1346'
      height='559'
      viewBox='0 0 1346 559'
      fill='none'
      xmlns='http://www.w3.org/2000/svg'>
      <circle
        opacity='0.4'
        cx='83.3455'
        cy='555.171'
        r='2.87395'
        transform='rotate(180 83.3455 555.171)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='2.8741'
        cy='441.651'
        r='2.87395'
        transform='rotate(180 2.8741 441.651)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='158.071'
        cy='434.465'
        r='2.87395'
        transform='rotate(180 158.071 434.465)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='380.799'
        cy='454.583'
        r='2.87395'
        transform='rotate(180 380.799 454.583)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='527.371'
        cy='527.869'
        r='2.87395'
        transform='rotate(180 527.371 527.869)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='501.507'
        cy='371.238'
        r='2.87395'
        transform='rotate(180 501.507 371.238)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='495.761'
        cy='260.591'
        r='2.87395'
        transform='rotate(180 495.761 260.591)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='626.524'
        cy='129.827'
        r='2.87395'
        transform='rotate(180 626.524 129.827)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='454.088'
        cy='171.498'
        r='2.87395'
        transform='rotate(180 454.088 171.498)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='428.224'
        cy='3.37336'
        r='2.87395'
        transform='rotate(180 428.224 3.37336)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='303.207'
        cy='69.4735'
        r='2.87395'
        transform='rotate(180 303.207 69.4735)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='186.809'
        cy='19.1802'
        r='2.87395'
        transform='rotate(180 186.809 19.1802)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='89.0977'
        cy='86.7169'
        r='2.87395'
        transform='rotate(180 89.0977 86.7169)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='8.62617'
        cy='63.7257'
        r='2.87395'
        transform='rotate(180 8.62617 63.7257)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='77.5997'
        cy='263.466'
        r='2.87395'
        transform='rotate(180 77.5997 263.466)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='799.003'
        cy='555.171'
        r='2.87395'
        transform='rotate(180 799.003 555.171)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='718.531'
        cy='441.651'
        r='2.87395'
        transform='rotate(180 718.531 441.651)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='873.729'
        cy='434.465'
        r='2.87395'
        transform='rotate(180 873.729 434.465)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='1096.46'
        cy='454.583'
        r='2.87395'
        transform='rotate(180 1096.46 454.583)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='1243.03'
        cy='527.869'
        r='2.87395'
        transform='rotate(180 1243.03 527.869)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='1217.16'
        cy='371.238'
        r='2.87395'
        transform='rotate(180 1217.16 371.238)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='1211.42'
        cy='260.591'
        r='2.87395'
        transform='rotate(180 1211.42 260.591)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='1342.18'
        cy='129.827'
        r='2.87395'
        transform='rotate(180 1342.18 129.827)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='1169.75'
        cy='171.498'
        r='2.87395'
        transform='rotate(180 1169.75 171.498)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='1143.88'
        cy='3.37336'
        r='2.87395'
        transform='rotate(180 1143.88 3.37336)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='1018.86'
        cy='69.4735'
        r='2.87395'
        transform='rotate(180 1018.86 69.4735)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='902.466'
        cy='19.1802'
        r='2.87395'
        transform='rotate(180 902.466 19.1802)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='804.756'
        cy='86.7169'
        r='2.87395'
        transform='rotate(180 804.756 86.7169)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='724.283'
        cy='63.7257'
        r='2.87395'
        transform='rotate(180 724.283 63.7257)'
        fill='#D9D9D9'
      />
      <circle
        opacity='0.4'
        cx='793.257'
        cy='263.466'
        r='2.87395'
        transform='rotate(180 793.257 263.466)'
        fill='#D9D9D9'
      />
    </svg>
  );
};

export default HeroBG;


import React from 'react';

const DesingerIcon = () => {
  return (
    <svg viewBox='0 0 384 384' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <rect width='384' height='384' fill='#111111' />
      <path
        d='M256.522 118.465C258.865 119.941 260.722 122.074 261.862 124.598C263.391 128.179 264.467 131.936 265.066 135.783C264.181 135.806 263.302 135.917 262.439 136.115C262.338 136.115 261.761 136.418 261.66 136.735C261.198 138.335 260.846 139.965 260.606 141.613L231.743 141.787C231.411 141.787 231.454 142.176 231.743 142.191C231.743 142.191 258.095 142.595 260.606 142.609C259.971 147.862 260.505 153.635 264.229 157.358C267.736 160.822 279.656 161.313 284.087 158.008C287.767 155.251 288.676 147.285 288.416 142.609C289.282 142.609 308.794 142.263 310.728 142.191C310.782 142.191 310.833 142.169 310.871 142.131C310.909 142.094 310.93 142.042 310.93 141.989C310.93 141.935 310.909 141.884 310.871 141.846C310.833 141.808 310.782 141.787 310.728 141.787C307.438 141.787 288.373 141.642 288.373 141.642C287.983 137.313 286.93 136.88 286.93 136.678C286.918 136.544 286.864 136.418 286.776 136.316C286.688 136.215 286.57 136.145 286.439 136.115C285.184 135.869 283.909 135.739 282.629 135.725C284.65 132.478 286.382 123.646 289.557 117.729C294.261 108.911 311.969 117.31 311.68 109.517C311.334 100.858 301.723 95.9944 291.404 100.584C281.605 104.913 279.05 125.118 278.877 135.667C275.919 135.667 277.347 135.754 273.104 135.667C276.813 130.732 281.532 114.28 280.71 102.777C279.768 95.1441 276.555 87.9696 271.488 82.1832C267.043 77.2043 261.833 75.0972 257.908 79.0948C252.135 84.8675 257.446 91.3185 262.382 97.8561C267.808 105.072 269.843 108.666 270.579 118.941C270.924 124.516 270.817 130.11 270.261 135.667H268.659C269.9 131.612 268.299 122.679 267.13 118.479C265.455 112.548 262.598 106.573 258.066 102.46C252.713 97.8375 246.203 94.7593 239.233 93.5555C234.976 92.8339 231.339 93.1081 229.362 94.2915C228.635 94.6697 228.073 95.3034 227.785 96.0708C227.498 96.8382 227.504 97.6849 227.803 98.4479C230.199 106.284 247.142 112.692 256.522 118.465ZM291.692 101.507C301.347 97.1779 310.237 101.724 310.54 109.575C310.771 115.593 293.41 108.132 288.676 117.353C285.386 123.732 283.928 132.651 281.937 135.74H280.912C282.355 129.375 285.891 115.218 290.047 110.21C295.358 103.73 304.609 107.511 305.013 107.41C305.172 107.41 305.331 107.15 304.854 106.977C299.082 104.884 293.208 104.928 289.282 109.575C284.563 115.145 281.59 128.567 280.349 135.783H279.108C279.498 125.681 282.326 105.62 291.692 101.507ZM271.315 118.927C270.738 108.738 268.861 105 263.161 97.2789C258.485 91.001 253.477 85.0119 258.644 79.7731C262.165 76.194 266.754 78.3299 270.738 82.8327C275.615 88.4786 278.691 95.455 279.57 102.864C280.508 114.554 275.745 131.338 272.354 135.682H271.589C273.133 129.074 274.132 122.35 274.576 115.578C274.908 109.806 274.807 105.794 273.133 100.771C271.758 96.9475 269.848 93.3374 267.462 90.0485C266.322 88.4263 265.068 86.8878 263.709 85.4448C263.675 85.4027 263.625 85.376 263.571 85.3706C263.517 85.3652 263.463 85.3815 263.421 85.4159C263.379 85.4504 263.352 85.5002 263.346 85.5543C263.341 85.6084 263.357 85.6625 263.392 85.7046C263.753 86.0823 264.091 86.4824 264.402 86.9024C268.905 92.6751 273.35 101.103 273.696 108.55C274.042 115.997 272.556 128.423 271.185 135.783H270.781C271.418 130.188 271.597 124.55 271.315 118.927ZM286.021 137.342C288.402 139.521 287.652 153.996 283.336 157.229C279.021 160.461 267.779 159.696 264.719 156.738C259.899 152.105 260.39 143.432 262.035 136.995C262.138 137.13 262.278 137.231 262.439 137.284C263.549 137.54 264.679 137.694 265.816 137.746C264.403 142.983 264.65 148.53 266.523 153.621C266.592 153.766 266.716 153.878 266.868 153.932C267.019 153.986 267.186 153.978 267.332 153.909C267.477 153.84 267.589 153.716 267.643 153.565C267.697 153.413 267.689 153.246 267.62 153.101C265.802 149.464 265.311 141.382 266.365 137.847C270.867 138.049 282.918 138.135 286.021 137.342ZM257.446 103.196C267.231 111.855 269.742 131.035 268.226 135.711H267.332C267.127 131.7 266.429 127.731 265.253 123.891C262.136 113.789 256.912 107.583 248.902 102.907C244.718 100.514 240.24 98.6753 235.582 97.4376C235.528 97.4242 235.471 97.4327 235.424 97.4611C235.377 97.4895 235.343 97.5356 235.329 97.5892C235.316 97.6427 235.324 97.6995 235.353 97.7468C235.381 97.7942 235.427 97.8283 235.481 97.8417C240.919 99.5661 246.081 102.064 250.807 105.26C256.048 108.749 260.14 113.71 262.569 119.518C264.874 124.653 266.336 130.125 266.899 135.725H265.542C265.008 131.764 263.98 127.885 262.483 124.18C261.312 121.515 259.392 119.248 256.955 117.657C247.416 111.783 230.978 105.346 228.784 98.1304C226.749 91.5062 246.362 93.2668 257.446 103.196ZM132.654 177.505C113.431 170.823 96.1995 167.836 85.4767 165.137C85.3439 165.1 85.2049 165.09 85.0681 165.107C84.9313 165.125 84.7995 165.17 84.6805 165.24C84.5616 165.31 84.458 165.403 84.3759 165.514C84.2938 165.625 84.235 165.751 84.2029 165.885C84.1708 166.019 84.1662 166.159 84.1892 166.295C84.2122 166.431 84.2625 166.561 84.337 166.677C84.4114 166.793 84.5086 166.893 84.6226 166.97C84.7366 167.048 84.8651 167.102 85.0004 167.129C91.8988 168.788 102.319 170.693 113.59 173.306C132.207 177.635 132.611 178.92 132.914 178.025C132.946 177.921 132.937 177.809 132.889 177.713C132.84 177.616 132.756 177.541 132.654 177.505ZM284.982 189.181C284.982 189.146 284.975 189.113 284.962 189.081C284.949 189.05 284.93 189.021 284.906 188.997C284.881 188.973 284.853 188.954 284.821 188.941C284.79 188.927 284.756 188.921 284.722 188.921C272.065 188.921 259.755 191.807 252.784 192.457C252.699 192.464 252.617 192.488 252.542 192.528C252.466 192.567 252.4 192.622 252.346 192.688C252.292 192.754 252.252 192.83 252.228 192.912C252.204 192.993 252.197 193.079 252.207 193.164C252.214 193.249 252.238 193.332 252.278 193.408C252.318 193.484 252.372 193.552 252.437 193.607C252.503 193.662 252.579 193.703 252.661 193.729C252.743 193.754 252.829 193.763 252.914 193.755C258.023 193.25 266.87 191.316 275.154 190.248C284.347 189.181 284.996 189.83 284.982 189.181ZM241.383 219.213C241.396 219.189 241.403 219.164 241.406 219.137C241.408 219.11 241.405 219.083 241.397 219.058C241.389 219.032 241.376 219.009 241.359 218.988C241.342 218.968 241.32 218.951 241.297 218.939L240.936 218.751L240.849 219.184C241.095 219.3 241.282 219.487 241.383 219.213Z'
        fill='white'
      />
      <path
        d='M329.042 222.821C325.333 222.056 316.169 222.359 312.388 222.691C315.505 212.041 318.724 198.157 320.023 190.508C320.493 188.392 320.697 186.225 320.629 184.057C320.581 183.863 320.494 183.68 320.372 183.521C320.251 183.362 320.097 183.23 319.922 183.134C314.149 179.511 253.665 187.463 249.451 189.556C248.196 190.176 247.07 193.308 246.565 194.722C242.827 188.575 243.217 187.117 239.046 177.404C236.447 171.078 233.15 165.061 229.218 159.466C229.319 158.701 233.316 128.841 229.03 120.861C226.144 115.521 210.514 113.645 204.496 113.14C204.496 112.822 203.746 107.367 203.428 104.899C208.508 100.656 210.644 92.8485 205.131 91.5352C201.22 90.6115 185.778 87.6675 174.276 90.6404C167.06 92.5165 161.287 96.7306 160.797 105.072C160.603 108.24 160.797 111.419 161.374 114.539C153.913 115.362 141.068 116.589 134.516 119.057C126.088 122.232 129.638 159.105 130.533 162.092C130.043 163.304 129.581 164.531 129.162 165.671C108.164 160.317 61.1596 150.33 59.067 150.518C58.522 150.511 57.9837 150.64 57.5003 150.891C57.0168 151.143 56.6031 151.511 56.2961 151.961C55.7333 152.091 55.5312 152.885 55.4302 153.404C53.987 161.082 56.5992 206.932 57.061 214.711C57.8259 217.51 80.0653 223.586 82.9516 224.38C83.0959 228.175 83.8608 247.023 84.0196 250.891C82.764 250.662 81.5212 250.368 80.2962 250.011C77.7273 248.957 67.8848 258.54 68.7507 257.746C64.984 261.094 105.97 272.106 109.246 271.182C112.522 270.258 119.002 264.067 117.905 260.618C117.602 260.004 117.091 259.518 116.462 259.247C113.359 257.616 105.148 255.61 101.727 254.788C102.059 247.803 102.059 236.344 102.045 229.388C106.1 230.398 129.119 235.969 133.275 235.896C133.573 235.901 133.867 235.826 134.127 235.68C135.454 235.492 137.013 235.16 137.143 233.804C137.143 233.4 137.475 229.878 137.893 224.654C148.068 228.536 160.407 228.248 162.601 227.353C163.192 227.068 163.692 226.623 164.044 226.068C164.145 226.198 164.188 226.169 164.953 226.285C167.839 226.747 172.458 227.18 175.055 225.823C178.735 226.415 189.4 227.266 190.194 223.702C190.295 223.225 190.44 222.258 190.584 221.089C201.263 221.667 239.19 221.407 239.334 221.407L238.454 225.376C238.432 225.343 238.402 225.316 238.366 225.299C238.331 225.281 238.292 225.273 238.252 225.275C238.252 225.159 238.252 225.188 238.252 225.275C232.342 224.809 226.412 224.655 220.487 224.813C218.38 224.914 212.823 225.174 212.722 227.223C211.984 228.965 211.877 230.909 212.419 232.721C212.737 233.861 215.421 235.709 216.417 236.387C210.774 235.824 207.484 236.041 205.781 236.647C205.376 236.717 204.998 236.899 204.69 237.171C204.382 237.444 204.156 237.796 204.036 238.19C203.916 238.583 203.908 239.002 204.012 239.399C204.116 239.797 204.329 240.158 204.626 240.442C206.56 243.098 210.586 243.993 211.019 247.471C211.842 254.066 195.072 261.527 188.953 264.139C192.027 260.098 200.268 247.384 196.27 244.31C191.825 240.89 153.711 239.389 150.204 240.284C147.736 240.919 129.595 254.326 129.927 259.045C130.158 262.119 148.01 265.135 151.329 265.712C155.067 266.347 181.737 270.504 184.927 268.469C185.603 268.196 186.217 267.79 186.733 267.274C187.249 266.758 187.656 266.144 187.928 265.467C193.455 263.567 198.774 261.111 203.803 258.136C211.741 253.215 216.186 247.124 208.335 242.001C207.397 241.395 204.828 239.548 205.203 238.509C206.011 236.214 217.167 237.065 217.326 237.065C222.507 240.442 232.422 245.652 238.267 247.168C244.443 248.798 273.307 245.638 280.277 244.757C281.071 247.644 281.836 250.328 282.341 251.973C281.259 252.06 278.17 252.334 277.304 253.012C276.828 253.388 276.843 254.023 277.608 254.456C277.608 259.29 277.016 273.751 278.459 280.274C279.007 282.713 279.642 283.723 282.168 284.604C286.945 286.148 296.124 285.599 300.929 284.315C303.917 283.507 304.306 282.872 304.783 281.284C306.428 275.887 306.341 259.954 306.226 254.297C306.318 254.23 306.393 254.142 306.445 254.041C306.497 253.939 306.524 253.826 306.524 253.712C306.524 253.598 306.497 253.486 306.445 253.384C306.393 253.283 306.318 253.195 306.226 253.128C305.158 252.633 304.008 252.339 302.834 252.262C303.036 250.646 304.119 241.611 304.278 240.024C305.032 239.571 305.705 238.996 306.269 238.321C307.151 237.249 307.725 235.957 307.929 234.583C309.372 232.693 311.45 225.635 312.128 223.326C318.565 223.6 328.003 223.225 328.884 223.326C328.951 223.347 329.023 223.341 329.086 223.308C329.148 223.276 329.195 223.22 329.216 223.153C329.237 223.086 329.23 223.014 329.198 222.951C329.165 222.889 329.109 222.842 329.042 222.821ZM133.968 253.965C134.935 252.897 136.075 251.786 137.287 250.66C142.439 245.898 148.991 241.106 150.42 240.745C153.884 239.851 191.926 242.189 195.794 245.075C196.443 245.566 196.573 246.518 196.443 247.658C195.924 252.19 191.19 259.666 188.434 263.317C185.316 260.632 138.095 254.528 133.968 253.965ZM204.684 114.179C210.197 114.698 225.653 116.473 228.309 121.294C232.061 128.076 229.752 151.211 228.828 158.816C228.02 157.734 227.183 156.709 226.331 155.771C221.439 150.402 213.04 147.704 205.925 146.333C201.354 145.537 196.744 144.992 192.114 144.702C191.969 144.702 192.2 144.918 191.06 142.58C189.357 139.073 189.256 139.131 189.429 139.03C191.322 138.929 193.196 138.61 195.014 138.078C199.892 136.635 202.793 133.748 204.164 126.734C204.909 122.577 205.064 118.336 204.626 114.135L204.684 114.179ZM192.258 145.149C193.167 145.279 193.413 145.265 193.485 145.308C193.485 145.669 196.645 162.626 185.821 163.405C176.874 164.142 170.986 151.586 167.811 143.201C168.965 143.013 169.889 142.883 170.509 142.797C170.812 149.378 180.28 161.313 185.533 160.476C191.435 159.509 194.336 150.532 192.258 145.149ZM170.711 118.595C170.841 117.951 171.129 117.35 171.55 116.846C171.971 116.341 172.511 115.951 173.121 115.708C176.008 115.001 176.008 118.595 178.302 118.393C181.189 118.205 177.971 111.509 180.453 107.425C183.152 102.922 194.091 112.028 202.938 105.274C204.005 112.88 205.174 118.797 203.544 126.561C202.1 133.373 199.416 135.884 194.784 137.241C192.88 137.679 190.952 138.007 189.011 138.222C188.856 138.31 188.726 138.435 188.632 138.586C188.539 138.738 188.486 138.91 188.477 139.088C188.477 139.593 189.92 142.176 191.262 145.193C193.268 149.926 190.656 158.528 185.374 159.35C181.622 159.942 174.276 151.528 172.183 145.582C171.26 142.956 171.534 142.855 173.165 132.594C175.459 132.752 175.936 128.264 176.051 125.941C176.075 125.448 175.904 124.966 175.575 124.598C174.536 123.458 173.684 124.786 171.664 122.26C171.223 121.77 170.906 121.182 170.741 120.544C170.575 119.906 170.565 119.237 170.711 118.595ZM161.576 115.579C163.51 124.411 168.59 130.544 172.082 132.247C171.447 136.303 170.726 140.82 170.538 142.191C162.211 142.608 153.998 144.312 146.192 147.242C142.725 148.569 139.495 150.445 136.623 152.798C135.036 144.572 139.12 128.495 138.615 123.935C138.384 122.001 137.836 119.951 135.945 119.533C142.411 117.498 154.389 116.343 161.576 115.579ZM135.079 119.908C135.424 119.92 135.763 120.001 136.076 120.148C136.388 120.294 136.668 120.502 136.898 120.76C137.548 121.741 137.876 122.902 137.836 124.079C138.153 128.408 133.665 144.37 136.19 153.217C133.758 155.498 131.915 158.336 130.822 161.486C129.667 154.458 127.748 122.463 135.079 119.908ZM83.2258 185.659C83.3413 184.981 84.5824 184.678 85.2607 184.562C90.2685 183.74 100.674 186.597 100.443 190.075C100.097 195.228 101.684 257.66 100.327 259.954C98.7111 262.711 89.8789 261.181 86.3575 258.727C84.7556 257.616 84.7845 256.664 84.8278 256.851C83.6011 207.711 83.0238 186.785 83.2258 185.659ZM116.679 261.094C117.415 263.548 111.628 269.191 108.943 269.941C106.259 270.691 66.687 260.445 69.2703 258.107C68.0725 259.189 75.7069 252.161 79.0695 251.035C79.3375 250.902 79.6438 250.866 79.9354 250.934C80.325 251.107 81.8548 251.497 84.0629 252.017C84.1928 255.062 84.2793 256.866 84.2793 256.866C85.1308 261.109 98.7111 264.313 101.078 260.402C101.44 259.016 101.634 257.591 101.655 256.159C103.863 256.707 115.192 259.463 116.679 261.094ZM133.275 234.67C129.48 234.814 105.855 229.272 102.045 228.377C101.973 211.463 101.626 192.5 101.8 190.162C102.146 184.851 88.6377 181.965 83.8753 183.523C83.4033 183.627 82.9696 183.86 82.6229 184.197C82.2761 184.533 82.0302 184.96 81.9125 185.428C81.595 187.348 82.8362 221.508 82.9083 223.557C80.5559 222.922 58.5186 217.048 57.6094 214.696C57.3641 209.385 55.0117 158.037 56.6858 153.173C64.5367 155.136 131.587 168.659 136.306 171.935C137.489 175.182 134.791 230.08 133.275 234.67ZM136.667 233.818C136.667 234.785 135.382 235.117 134.43 235.261C135.988 231.524 139.091 174.648 137.504 171.3C135.916 167.951 63.512 153.881 56.7435 151.99C57.0445 151.664 57.411 151.406 57.8189 151.232C58.2268 151.058 58.6669 150.972 59.1103 150.98C61.1163 150.835 135.151 167.374 139.452 169.741C140.174 171.819 139.452 186.294 139.351 188.676C139.091 194.419 136.724 233.039 136.667 233.818ZM175.633 224.048C173.944 226.299 167.955 226.025 165.141 225.765H164.448C165.732 223.184 166.46 220.362 166.584 217.481C168.027 217.077 173.309 215.851 174.117 217.149C174.363 217.525 173.583 217.972 173.179 218.189C172.112 218.684 170.994 219.061 169.845 219.314C169.675 219.347 169.525 219.446 169.427 219.589C169.33 219.733 169.293 219.909 169.326 220.079C169.358 220.249 169.457 220.4 169.601 220.497C169.744 220.595 169.92 220.631 170.091 220.599C171.534 220.397 175.474 219.848 176.874 220.324C176.297 221.125 175.469 221.709 174.521 221.984C173.172 221.975 171.824 222.086 170.495 222.316C170.303 222.352 170.132 222.458 170.013 222.612C169.894 222.767 169.836 222.96 169.851 223.154C169.865 223.349 169.95 223.531 170.09 223.666C170.23 223.802 170.415 223.881 170.61 223.889C172.076 223.932 173.539 223.732 174.94 223.297C175.305 223.313 175.663 223.401 175.993 223.557C175.901 223.751 175.762 223.92 175.589 224.048H175.633ZM189.285 223.543C189.224 223.768 189.109 223.974 188.951 224.145C188.793 224.316 188.595 224.446 188.376 224.524C185.706 225.967 178.966 225.708 175.964 225.404C177.076 224.553 177.725 223.168 176.599 222.403C178.822 220.959 178.591 219.415 177.133 218.968C176.189 218.739 175.214 218.671 174.247 218.766C175.156 218.088 175.488 217.323 174.94 216.5C174.146 215.374 172.053 215.519 170.755 215.735C170.137 210.022 169.819 204.279 169.802 198.532C173.655 201.332 186.428 201.419 190.887 198.763C191.103 203.612 189.646 221.436 189.227 223.543H189.285ZM176.903 220.267C176.903 220.267 176.859 220.296 176.859 220.267H176.903ZM207.873 220.584C210.543 212.777 210.918 196.238 210.76 187.968C212.996 191.562 225.191 208.793 225.278 208.938C225.574 209.391 225.923 209.808 226.317 210.179C229.225 212.836 232.489 215.076 236.015 216.832C239.782 218.824 240.085 218.723 240.056 218.881L239.551 221.046C239.306 221.032 210.081 220.584 207.83 220.584H207.873ZM214.093 227.064C217.196 224.899 238.295 225.881 238.526 225.736V225.895C236.506 235.564 235.727 239.057 235.481 240.327C235.611 239.764 236.405 235.997 237.314 231.827C237.949 228.767 238.757 225.13 239.58 221.277C239.955 219.516 240.2 218.391 240.215 218.304C236.26 216.211 230.228 212.603 227.067 209.414C226.274 208.606 210.933 187.348 210.788 187.102C210.644 186.857 210.644 180.522 210.485 180.233C210.455 180.2 210.415 180.178 210.372 180.168C210.328 180.159 210.283 180.163 210.242 180.18C210.201 180.198 210.166 180.227 210.143 180.265C210.119 180.303 210.108 180.347 210.11 180.392C209.966 180.392 210.11 211.247 207.44 220.541L190.815 220.7C190.916 219.892 191.017 218.953 191.132 217.943C197.829 218.795 200.874 211.449 199.099 205.46C198.045 202.169 195.332 201.664 192.229 203.252C192.373 201.33 192.373 199.4 192.229 197.479C192.363 197.147 192.386 196.781 192.295 196.435C192.204 196.09 192.004 195.782 191.724 195.56C189.574 193.539 183.556 193.323 180.626 193.323C177.696 193.323 171.664 193.553 169.528 195.56C169.341 195.704 169.192 195.892 169.095 196.108C167.998 198.085 170.105 215.418 170.365 215.793C169.108 216.043 167.869 216.376 166.656 216.789V214.48C166.569 209.443 150.464 206.643 149.915 203.771C149.728 202.79 149.424 200.596 149.078 197.998C147.13 183.74 147.418 184.288 147.101 184.288C147.047 184.288 146.996 184.31 146.958 184.347C146.92 184.385 146.899 184.437 146.899 184.49C146.899 184.88 148.458 200.582 149.02 203.916C149.583 207.249 165.574 210.482 165.646 214.48C165.646 217.597 164.953 225.332 162.254 226.444C160.624 227.136 148.01 227.771 137.951 224.235C138.168 221.436 142.18 171.314 140.246 169.092C139.51 168.24 130.865 166.075 129.768 165.801C134.098 155.988 137.302 147.906 167.406 143.187C168.243 145.989 169.265 148.732 170.466 151.398C173.526 157.936 178.707 164.993 185.879 164.387C194.12 163.68 195.447 154.746 194.134 146.592C194.048 146.015 193.961 145.64 193.889 145.308C197.849 145.704 201.784 146.311 205.68 147.126C212.477 148.57 220.833 151.312 225.494 156.478C230.531 162.02 234.933 170.578 238.021 177.419C242.466 187.261 242.437 189.801 246.262 195.473C243.572 203.959 241.318 212.576 239.508 221.291C238.93 223.99 238.064 228.103 237.242 231.841C236.044 237.614 235.322 241.265 235.395 240.5C235.265 241.279 235.395 241.251 235.395 241.438C230.69 239.34 226.15 236.889 221.814 234.107C220.299 233.097 212.564 228.146 214.093 227.035V227.064ZM192.114 206.196C192.114 205.445 192.2 204.753 192.229 204.031C194.841 202.977 197.165 203.136 197.872 205.864C199.315 210.814 197.035 217.409 191.219 217.409C191.219 216.717 191.464 214.739 191.493 214.523C198.132 215.418 198.088 203.266 192.114 206.196ZM191.551 213.902C191.753 211.622 191.926 209.212 192.07 206.946C192.761 206.733 193.501 206.733 194.192 206.946C195.909 207.567 195.635 213.527 191.479 213.902H191.551ZM238.757 245.926C233.204 244.11 227.831 241.781 222.709 238.97C221.266 238.205 213.79 234.136 213.285 232.563C212.849 231.158 212.804 229.661 213.155 228.233C215.089 232 227.356 238.335 231.296 240.197C233.1 241.048 234.961 241.772 236.867 242.362C243.534 244.743 272.138 240.919 279.166 240.053C279.253 240.356 279.859 242.679 280.09 243.516C273.971 244.223 244.501 247.442 238.685 245.926H238.757ZM303.238 282.222C301.131 284.012 288.489 285.513 282.529 283.666C280.364 282.987 279.931 282.295 279.412 280.101C278.938 277.721 278.639 275.309 278.517 272.885C281.475 274.703 286.902 275.165 290.38 275.266C295.618 275.382 300.771 275.266 304.985 272.885C304.898 274.415 304.407 281.227 303.238 282.222ZM305.028 272.322C302.181 273.54 299.119 274.173 296.023 274.184C291.895 274.386 282.226 274.357 278.488 272.365C278.329 269.652 278.228 266.752 278.185 264.053C279.628 265.785 287.32 266.564 290.394 266.665C295.878 266.78 300.973 266.665 305.36 264.067C305.36 263.923 305.317 267.343 305.042 272.322H305.028ZM305.36 263.562C298.144 267.199 280.234 265.554 278.17 263.562V254.687C282.76 256.317 300.9 256.202 305.446 254.687C305.418 256.346 305.432 259.723 305.374 263.562H305.36ZM302.474 253.85C302.525 253.864 302.58 253.859 302.628 253.835C302.676 253.811 302.714 253.77 302.733 253.72C302.733 253.72 302.733 253.46 302.82 252.998C303.75 253.126 304.667 253.334 305.562 253.619C302.401 255.062 283.38 255.192 278.632 253.792C278.6 253.782 278.572 253.762 278.552 253.734C278.532 253.707 278.521 253.674 278.521 253.64C278.521 253.606 278.532 253.573 278.552 253.546C278.572 253.519 278.6 253.499 278.632 253.489C279.955 253.129 281.307 252.888 282.673 252.767C282.769 253.169 282.914 253.556 283.106 253.922C283.222 254.037 283.409 254.052 283.395 253.763C283.38 253.474 278.647 234.785 277.925 230.672C278.663 230.918 279.45 230.98 280.217 230.852C280.985 230.723 281.709 230.409 282.327 229.936C283.914 234.381 288.98 254.383 289.283 254.383C289.338 254.38 289.389 254.355 289.427 254.315C289.464 254.275 289.485 254.222 289.485 254.167L289.066 252.219H291.058C291.058 252.493 291.217 253.893 291.231 253.994C291.246 254.095 291.664 254.34 291.635 253.806C291.635 252.507 290.423 230.99 290.394 230.6C290.602 230.5 290.819 230.422 291.044 230.369C291.202 231.148 296.282 251.728 296.672 253.33C296.672 253.474 296.672 253.72 296.946 253.662C297.22 253.604 297.105 253.344 296.946 252.406L299.154 252.565V252.81C299.154 253.041 299.515 252.984 299.558 252.81C299.558 252.969 302.243 225.275 302.445 223.067C302.825 223.355 303.262 223.559 303.728 223.666C304.193 223.773 304.675 223.78 305.143 223.687C305.115 223.904 302.156 253.748 302.459 253.85H302.474ZM289.485 225.159C289.314 223.771 288.707 222.473 287.753 221.45C289.73 222.042 290.149 222.475 290.639 223.831C291.03 224.912 291.134 226.075 290.943 227.208C290.747 227.922 290.747 228.674 290.943 229.388C290.706 229.442 290.475 229.514 290.25 229.604C289.355 227.05 287.363 227.079 287.363 224.51C287.361 223.581 287.225 222.658 286.959 221.768C287.658 223.034 288.424 224.263 289.254 225.448C289.398 225.635 289.673 225.361 289.499 225.159H289.485ZM290.207 243.372C290.279 244.079 290.842 250.213 290.986 251.771H288.922C288.489 249.823 287.84 246.937 287.104 243.848L290.207 243.372ZM290.12 242.261L286.829 242.694C286.541 241.496 286.238 240.284 285.935 239.086C287.262 238.898 288.561 238.696 289.817 238.494C289.875 239.115 290.077 241.626 290.134 242.261H290.12ZM294.608 241.597C294.377 240.5 293.814 238.018 293.771 237.874C295.027 237.657 299.299 236.921 300.179 236.748C300.179 237.368 299.934 239.995 299.876 240.659C298.476 240.962 296.686 241.279 294.579 241.597H294.608ZM299.818 241.597C299.558 245.335 299.154 251.584 299.14 251.93C298.389 251.93 297.596 251.901 296.759 251.843C296.412 250.097 294.926 243.098 294.825 242.622C296.773 242.232 298.447 241.886 299.833 241.554L299.818 241.597ZM302.575 221.869C302.751 220.04 303.035 218.223 303.426 216.428C303.811 216.312 304.217 216.285 304.614 216.347C305.012 216.41 305.39 216.561 305.721 216.789C305.634 218.602 305.441 220.409 305.143 222.201C305.014 222.706 304.985 222.836 304.653 222.879C304.003 222.922 302.69 222.374 302.589 221.825L302.575 221.869ZM304.465 239.071C304.595 238.003 304.725 236.921 304.84 235.839C305.695 235.659 306.535 235.413 307.351 235.103C306.897 236.714 305.877 238.107 304.48 239.028L304.465 239.071ZM306.875 233.905C306.266 234.147 305.639 234.34 304.999 234.482C305.259 232.058 306.789 217.943 306.789 216.947C306.789 215.504 304.22 214.97 302.892 215.504C302.445 215.706 302.315 216.558 302.185 217.308C301.463 221.335 300.612 231.379 300.28 235.463L293.511 236.705C291.823 229.344 291.967 229.748 291.78 229.561C291.651 229.438 291.481 229.366 291.303 229.359C291.17 228.716 291.205 228.05 291.404 227.425C291.703 226.177 291.663 224.871 291.289 223.644C291.097 222.751 290.583 221.96 289.846 221.421C288.671 220.799 287.404 220.37 286.093 220.151C286.025 220.133 285.953 220.131 285.883 220.146C285.813 220.161 285.748 220.192 285.693 220.237C285.638 220.283 285.595 220.34 285.566 220.406C285.538 220.471 285.526 220.542 285.531 220.613C285.561 220.736 285.6 220.856 285.646 220.974C286.772 223.658 285.992 224.885 286.772 226.487C287.551 228.089 288.864 228.334 289.341 230.181C289.341 230.326 289.745 236.993 289.759 237.397L285.675 238.047C285.386 236.95 283.409 229.142 282.63 228.377C281.187 226.934 277.059 228.551 276.857 229.821C276.727 230.542 278.704 238.278 278.892 239.014C271.46 240.096 263.58 241.077 256.609 241.727C253.564 242.001 234.962 243.704 236.001 240.659C237.444 233.991 240.33 221.753 240.908 219.184V218.982C240.908 218.766 241.009 218.549 240.908 219.184C240.908 218.968 240.994 218.838 241.023 218.766L244.631 204.81C245.107 203.093 248.383 191.418 250.043 190.595C253.723 188.777 314.207 180.955 319.315 184.375C320.181 188.084 309.545 232.144 306.89 233.919L306.875 233.905Z'
        fill='white'
      />
      <path
        d='M189.963 117.83V116.719C189.963 116.539 189.892 116.366 189.765 116.239C189.638 116.112 189.465 116.04 189.285 116.04C189.104 116.04 188.93 116.111 188.8 116.238C188.671 116.365 188.596 116.537 188.592 116.719V118.017C188.624 118.189 188.721 118.342 188.863 118.444C189.005 118.546 189.18 118.589 189.353 118.565C189.526 118.541 189.683 118.451 189.791 118.314C189.9 118.177 189.951 118.004 189.935 117.83H189.963ZM282.197 206.643C281.778 206.239 281.187 205.763 280.638 205.936C279.729 206.224 278.82 208.534 278.43 209.486C277.336 212.328 276.467 215.253 275.833 218.232C276.424 219.761 286.411 217.755 287.768 217.092C288.201 216.89 288.143 216.37 287.999 215.908C286.57 212.531 284.612 209.403 282.197 206.643ZM276.222 218.044C276.482 216.846 279.772 207.668 280.898 206.831C282.644 207.826 286.151 213.945 287.089 216.255C285.79 216.774 276.973 219.011 276.222 218.044ZM158.719 248.654C158.574 248.755 155.428 250.747 155.284 250.891C155.25 250.905 155.22 250.929 155.2 250.96C155.179 250.991 155.168 251.027 155.168 251.064C155.168 251.101 155.179 251.137 155.2 251.168C155.22 251.199 155.25 251.223 155.284 251.237C156.092 251.468 158.791 251.771 159.613 251.858C179.356 246.908 179.486 246.908 179.241 246.908C179.373 246.89 179.494 246.821 179.577 246.716C179.661 246.611 179.7 246.478 179.688 246.345C179.688 246.099 179.298 244.397 179.183 243.877L158.719 248.654ZM196.963 111.797C197.367 111.797 198.161 111.985 198.319 111.999C199.195 112.09 200.064 112.245 200.917 112.461L202.216 112.692C202.265 112.704 202.318 112.699 202.363 112.677C202.409 112.654 202.445 112.616 202.466 112.57C202.487 112.523 202.49 112.471 202.476 112.422C202.462 112.373 202.431 112.331 202.389 112.302C201.636 111.664 200.723 111.245 199.748 111.09C198.783 110.883 197.778 110.969 196.862 111.335C196.831 111.342 196.803 111.355 196.777 111.372C196.752 111.39 196.73 111.413 196.713 111.439C196.697 111.465 196.685 111.494 196.68 111.525C196.674 111.555 196.675 111.587 196.681 111.617C196.688 111.647 196.701 111.676 196.718 111.701C196.736 111.727 196.759 111.749 196.785 111.765C196.811 111.782 196.84 111.794 196.871 111.799C196.901 111.804 196.932 111.804 196.963 111.797ZM185.533 113.067C185.922 112.981 186.76 112.851 186.976 112.822C187.851 112.631 188.738 112.506 189.631 112.447L191.075 112.288C191.132 112.288 191.187 112.265 191.228 112.225C191.268 112.184 191.291 112.129 191.291 112.071C191.291 112.014 191.268 111.959 191.228 111.918C191.187 111.878 191.132 111.855 191.075 111.855C190.144 111.461 189.124 111.329 188.124 111.474C187.124 111.619 186.183 112.035 185.403 112.678C185.369 112.678 185.335 112.686 185.304 112.701C185.274 112.717 185.247 112.74 185.227 112.768C185.207 112.795 185.194 112.828 185.189 112.861C185.184 112.895 185.187 112.93 185.198 112.963C185.208 112.995 185.227 113.025 185.251 113.049C185.276 113.073 185.306 113.09 185.338 113.101C185.371 113.111 185.406 113.113 185.44 113.107C185.473 113.102 185.505 113.088 185.533 113.067ZM199.965 115.578C199.785 115.578 199.612 115.65 199.485 115.777C199.358 115.904 199.286 116.077 199.286 116.257V117.556C199.311 117.735 199.407 117.898 199.551 118.008C199.696 118.117 199.879 118.165 200.058 118.14C200.238 118.115 200.401 118.02 200.511 117.875C200.62 117.73 200.668 117.548 200.643 117.368V116.257C200.645 116.167 200.629 116.078 200.595 115.995C200.562 115.912 200.512 115.836 200.449 115.773C200.385 115.709 200.31 115.659 200.227 115.626C200.143 115.593 200.054 115.576 199.965 115.578ZM87.9595 240.875C89.9655 241.525 94.6414 243.271 96.7917 243.011C97.0515 243.011 97.3401 242.751 97.5278 242.289C98.9709 239.042 97.9319 222.532 97.4123 219.343C97.0515 217.048 88.7532 214.205 86.7472 215.836C85.4484 216.89 86.0978 229.113 86.2421 230.816C86.6173 234.929 86.2277 240.312 87.9595 240.875ZM87.3966 216.601C88.9553 215.475 96.1856 218.145 96.4165 219.487C96.7773 221.753 98.1195 240.803 96.6763 242.289C94.8146 242.564 89.8789 241.048 88.0172 240.471C86.7039 240.038 87.1513 234.294 86.9348 230.744C86.8338 228.348 86.6751 218.838 87.3966 216.601ZM189.949 126.474C189.913 126.457 189.874 126.447 189.833 126.447C189.793 126.447 189.754 126.457 189.718 126.474C189.357 126.604 189.141 127.008 189.083 127.6C189.036 129.129 189.55 130.622 190.526 131.8C190.755 132.112 191.045 132.375 191.377 132.574C191.71 132.772 192.08 132.901 192.463 132.954C192.847 133.006 193.238 132.981 193.611 132.879C193.985 132.778 194.335 132.602 194.639 132.363C195.509 131.647 196.193 130.731 196.631 129.693C196.67 129.612 196.691 129.523 196.691 129.433C196.691 129.343 196.67 129.254 196.631 129.173C196.183 128.48 195.116 129.462 189.949 126.474ZM189.819 126.965C191.387 128.3 193.222 129.284 195.202 129.851C192.114 135.105 189.011 128.019 189.819 126.965ZM193.355 123.574C194.278 123.747 196.833 123.429 197.381 122.491C197.656 122.044 197.381 121.9 196.775 120.052C196.229 118.447 195.588 116.876 194.856 115.347C194.596 114.943 194.264 115.347 194.452 115.593C194.853 117.805 195.491 119.968 196.357 122.044C195.312 122.533 194.243 122.966 193.153 123.343C193.151 123.371 193.155 123.4 193.164 123.427C193.173 123.454 193.187 123.479 193.206 123.5C193.225 123.522 193.247 123.539 193.273 123.552C193.299 123.564 193.326 123.572 193.355 123.574ZM246.579 273.65C251.991 270.215 247.777 267.054 244.198 268.555C243.318 266.953 243.116 266.824 241.312 266.91C231.945 267.386 189.646 277.171 189.242 277.33C187.106 278.21 192.532 290.953 194.683 292.628C195.173 293.003 195.015 293.075 200.311 292.036C200.657 295.182 202.028 300.695 205.232 300.868C206.725 300.595 208.179 300.139 209.562 299.512C212.238 302.174 215.087 304.657 218.091 306.944C221.41 309.166 242.625 284.387 245.8 281.501C246.709 281.198 247.517 280.996 247.416 278.744C250.158 278.239 252.28 276.551 250.822 274.126C249.841 272.654 248.138 272.885 246.579 273.65ZM247.084 269.724C247.676 269.941 247.979 270.172 247.792 270.763C247.403 271.668 246.833 272.483 246.117 273.159C245.735 271.985 245.287 270.834 244.775 269.71C245.522 269.441 246.341 269.446 247.084 269.724ZM231.729 269.248C232.263 271.774 232.624 273.145 233.302 275.468L223.301 277.359C222.725 275.271 222.056 273.21 221.295 271.182C223.185 270.821 230.185 269.508 231.729 269.248ZM216.936 288.515C217.466 290.328 218.248 292.057 219.26 293.652C216.489 294.994 213.877 296.221 211.654 297.231C210.857 294.811 209.736 292.51 208.321 290.391L216.936 288.515ZM212.852 288.515C212.364 286.007 211.748 283.526 211.005 281.082L222.55 278.585C223.18 281.03 223.941 283.439 224.831 285.801C220.862 286.638 216.72 287.576 212.852 288.457V288.515ZM217.658 288.587C217.499 288.356 216.518 288.702 227.14 286.263C227.327 287.336 227.725 288.361 228.309 289.279L219.852 293.421C219.35 291.697 218.611 290.051 217.658 288.529V288.587ZM227.76 286.104C233.244 284.834 238.281 283.622 241.759 282.699L229.016 288.919C228.78 287.894 228.359 286.921 227.775 286.047L227.76 286.104ZM225.321 285.657C224.858 283.195 224.271 280.757 223.561 278.355L233.417 275.93C233.417 276.002 234.081 278.225 234.384 279.177C234.529 279.61 235.755 283.103 235.828 283.16C232.84 283.824 225.552 285.542 225.307 285.599L225.321 285.657ZM220.862 271.326C221.338 273.953 221.785 275.656 222.305 277.618L210.76 280.158C210.081 277.864 209.619 276.363 208.624 273.765C210.875 273.246 219.13 271.6 220.876 271.269L220.862 271.326ZM208.147 273.852C208.71 276.738 209.129 278.253 209.735 280.389C208.768 280.606 200.874 282.583 200.874 282.583C200.585 282.583 200.701 283.03 200.989 282.973C200.989 282.973 209.547 281.385 209.98 281.284C209.98 281.284 210.601 283.766 212.376 288.63L203.067 290.708C201.736 285.674 200.063 280.736 198.06 275.93L208.147 273.852ZM195.087 292.137C192.893 290.492 187.871 278.369 189.386 277.705C189.386 277.705 192.691 276.984 197.656 275.944C198.893 281.002 200.544 285.95 202.591 290.737C195 292.44 195.332 292.267 195.101 292.079L195.087 292.137ZM205.189 299.815C202.75 299.815 201.292 294.547 200.859 292.151C200.859 291.877 200.094 292.151 207.642 290.578C208.018 290.506 207.426 290.405 209.23 294.157C209.747 295.336 210.386 296.458 211.135 297.506C209.236 298.415 207.267 299.168 205.247 299.757L205.189 299.815ZM218.639 305.991C215.705 303.935 212.887 301.719 210.197 299.353C212.679 298.328 215.493 297.015 217.918 295.86C219.816 298.067 221.967 300.043 224.325 301.748C223.344 302.585 220.01 305.674 218.697 305.934L218.639 305.991ZM224.744 301.315C222.838 299.188 220.704 297.276 218.38 295.615L227.443 291.156C228.706 292.452 230.167 293.538 231.772 294.374C229.503 296.722 227.178 299.018 224.802 301.258L224.744 301.315ZM232.263 293.912C231.059 292.683 229.689 291.629 228.193 290.78C234.399 287.649 237.964 285.744 243.751 282.54C241.182 284.806 234.659 291.473 232.321 293.854L232.263 293.912ZM246.031 280.346C245.41 280.794 236.91 282.872 236.174 283.045C235.255 278.323 233.907 273.696 232.147 269.219C234.947 268.743 240.489 267.776 242.553 268.007C242.832 268.335 243.074 268.693 243.274 269.075C242.29 269.744 241.474 270.633 240.893 271.673C240.749 272.033 241.124 272.221 241.312 272.048C242.034 271.284 242.877 270.645 243.808 270.157C244.463 271.51 245.032 272.903 245.511 274.328C244.229 275.205 243.073 276.254 242.077 277.445C241.889 277.676 241.947 277.849 242.077 277.922C242.423 278.124 242.452 277.604 245.858 275.584C246.202 276.752 246.396 277.96 246.435 279.177C246.363 279.437 246.32 280.101 246.089 280.288L246.031 280.346ZM249.624 276.478C248.98 277.217 248.168 277.791 247.258 278.152C247.125 277.124 246.917 276.106 246.637 275.107C247.575 274.631 249.033 274.025 249.523 274.905C249.708 275.108 249.823 275.364 249.852 275.637C249.88 275.91 249.821 276.184 249.682 276.421L249.624 276.478Z'
        fill='white'
      />
    </svg>
  );
};

export default DesingerIcon;


